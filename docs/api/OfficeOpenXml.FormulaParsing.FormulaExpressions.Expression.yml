### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression
  commentId: T:OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression
  id: Expression
  parent: OfficeOpenXml.FormulaParsing.FormulaExpressions
  children:
  - OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext)
  - OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Compile
  - OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Context
  - OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.GetAddress
  - OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Negate
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: Expression
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/FormulaExpressions/Expression.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Expression
    path: ../src/EPPlus/FormulaParsing/FormulaExpressions/Expression.cs
    startLine: 40
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.FormulaExpressions
  syntax:
    content: public abstract class Expression
    content.vb: Public MustInherit Class Expression
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Context
  commentId: P:OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Context
  id: Context
  parent: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: Expression.Context
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Context
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/FormulaExpressions/Expression.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Context
    path: ../src/EPPlus/FormulaParsing/FormulaExpressions/Expression.cs
    startLine: 46
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.FormulaExpressions
  syntax:
    content: protected ParsingContext Context { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.ParsingContext
    content.vb: Protected ReadOnly Property Context As ParsingContext
  overload: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Context*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext)
  commentId: M:OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext)
  id: '#ctor(OfficeOpenXml.FormulaParsing.ParsingContext)'
  parent: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression
  langs:
  - csharp
  - vb
  name: Expression(ParsingContext)
  nameWithType: Expression.Expression(ParsingContext)
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Expression(OfficeOpenXml.FormulaParsing.ParsingContext)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/FormulaExpressions/Expression.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/FormulaExpressions/Expression.cs
    startLine: 51
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.FormulaExpressions
  syntax:
    content: public Expression(ParsingContext ctx)
    parameters:
    - id: ctx
      type: OfficeOpenXml.FormulaParsing.ParsingContext
    content.vb: Public Sub New(ctx As ParsingContext)
  overload: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Compile
  commentId: M:OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Compile
  id: Compile
  parent: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression
  langs:
  - csharp
  - vb
  name: Compile()
  nameWithType: Expression.Compile()
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Compile()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/FormulaExpressions/Expression.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Compile
    path: ../src/EPPlus/FormulaParsing/FormulaExpressions/Expression.cs
    startLine: 55
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.FormulaExpressions
  syntax:
    content: public abstract CompileResult Compile()
    return:
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
    content.vb: Public MustOverride Function Compile As CompileResult
  overload: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Compile*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Negate
  commentId: M:OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Negate
  id: Negate
  parent: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression
  langs:
  - csharp
  - vb
  name: Negate()
  nameWithType: Expression.Negate()
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Negate()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/FormulaExpressions/Expression.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Negate
    path: ../src/EPPlus/FormulaParsing/FormulaExpressions/Expression.cs
    startLine: 56
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.FormulaExpressions
  syntax:
    content: public virtual void Negate()
    content.vb: Public Overridable Sub Negate
  overload: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Negate*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.GetAddress
  commentId: M:OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.GetAddress
  id: GetAddress
  parent: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression
  langs:
  - csharp
  - vb
  name: GetAddress()
  nameWithType: Expression.GetAddress()
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.GetAddress()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/FormulaExpressions/Expression.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetAddress
    path: ../src/EPPlus/FormulaParsing/FormulaExpressions/Expression.cs
    startLine: 66
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.FormulaExpressions
  syntax:
    content: public virtual FormulaRangeAddress GetAddress()
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    content.vb: Public Overridable Function GetAddress As FormulaRangeAddress
  overload: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.GetAddress*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions
  commentId: N:OfficeOpenXml.FormulaParsing.FormulaExpressions
  name: OfficeOpenXml.FormulaParsing.FormulaExpressions
  nameWithType: OfficeOpenXml.FormulaParsing.FormulaExpressions
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Context*
  commentId: Overload:OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Context
  name: Context
  nameWithType: Expression.Context
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Context
- uid: OfficeOpenXml.FormulaParsing.ParsingContext
  commentId: T:OfficeOpenXml.FormulaParsing.ParsingContext
  parent: OfficeOpenXml.FormulaParsing
  name: ParsingContext
  nameWithType: ParsingContext
  fullName: OfficeOpenXml.FormulaParsing.ParsingContext
- uid: OfficeOpenXml.FormulaParsing
  commentId: N:OfficeOpenXml.FormulaParsing
  name: OfficeOpenXml.FormulaParsing
  nameWithType: OfficeOpenXml.FormulaParsing
  fullName: OfficeOpenXml.FormulaParsing
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.#ctor
  name: Expression
  nameWithType: Expression.Expression
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Expression
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Compile*
  commentId: Overload:OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Compile
  name: Compile
  nameWithType: Expression.Compile
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Compile
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  commentId: T:OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  parent: OfficeOpenXml.FormulaParsing.FormulaExpressions
  name: CompileResult
  nameWithType: CompileResult
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Negate*
  commentId: Overload:OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Negate
  name: Negate
  nameWithType: Expression.Negate
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.Negate
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.GetAddress*
  commentId: Overload:OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.GetAddress
  name: GetAddress
  nameWithType: Expression.GetAddress
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression.GetAddress
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: FormulaRangeAddress
  nameWithType: FormulaRangeAddress
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
