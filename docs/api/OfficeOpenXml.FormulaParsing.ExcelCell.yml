### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.ExcelCell
  commentId: T:OfficeOpenXml.FormulaParsing.ExcelCell
  id: ExcelCell
  parent: OfficeOpenXml.FormulaParsing
  children:
  - OfficeOpenXml.FormulaParsing.ExcelCell.#ctor(System.Object,System.String,System.Int32,System.Int32)
  - OfficeOpenXml.FormulaParsing.ExcelCell.ColIndex
  - OfficeOpenXml.FormulaParsing.ExcelCell.Formula
  - OfficeOpenXml.FormulaParsing.ExcelCell.RowIndex
  - OfficeOpenXml.FormulaParsing.ExcelCell.Value
  langs:
  - csharp
  - vb
  name: ExcelCell
  nameWithType: ExcelCell
  fullName: OfficeOpenXml.FormulaParsing.ExcelCell
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelCell.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelCell
    path: ../src/EPPlus/FormulaParsing/ExcelCell.cs
    startLine: 19
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  syntax:
    content: public class ExcelCell
    content.vb: Public Class ExcelCell
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.ExcelCell.#ctor(System.Object,System.String,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.ExcelCell.#ctor(System.Object,System.String,System.Int32,System.Int32)
  id: '#ctor(System.Object,System.String,System.Int32,System.Int32)'
  parent: OfficeOpenXml.FormulaParsing.ExcelCell
  langs:
  - csharp
  - vb
  name: ExcelCell(Object, String, Int32, Int32)
  nameWithType: ExcelCell.ExcelCell(Object, String, Int32, Int32)
  fullName: OfficeOpenXml.FormulaParsing.ExcelCell.ExcelCell(System.Object, System.String, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelCell.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/ExcelCell.cs
    startLine: 21
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  syntax:
    content: public ExcelCell(object val, string formula, int colIndex, int rowIndex)
    parameters:
    - id: val
      type: System.Object
    - id: formula
      type: System.String
    - id: colIndex
      type: System.Int32
    - id: rowIndex
      type: System.Int32
    content.vb: Public Sub New(val As Object, formula As String, colIndex As Integer, rowIndex As Integer)
  overload: OfficeOpenXml.FormulaParsing.ExcelCell.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExcelCell.ColIndex
  commentId: P:OfficeOpenXml.FormulaParsing.ExcelCell.ColIndex
  id: ColIndex
  parent: OfficeOpenXml.FormulaParsing.ExcelCell
  langs:
  - csharp
  - vb
  name: ColIndex
  nameWithType: ExcelCell.ColIndex
  fullName: OfficeOpenXml.FormulaParsing.ExcelCell.ColIndex
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelCell.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ColIndex
    path: ../src/EPPlus/FormulaParsing/ExcelCell.cs
    startLine: 29
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  syntax:
    content: public int ColIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ColIndex As Integer
  overload: OfficeOpenXml.FormulaParsing.ExcelCell.ColIndex*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExcelCell.RowIndex
  commentId: P:OfficeOpenXml.FormulaParsing.ExcelCell.RowIndex
  id: RowIndex
  parent: OfficeOpenXml.FormulaParsing.ExcelCell
  langs:
  - csharp
  - vb
  name: RowIndex
  nameWithType: ExcelCell.RowIndex
  fullName: OfficeOpenXml.FormulaParsing.ExcelCell.RowIndex
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelCell.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: RowIndex
    path: ../src/EPPlus/FormulaParsing/ExcelCell.cs
    startLine: 31
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  syntax:
    content: public int RowIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property RowIndex As Integer
  overload: OfficeOpenXml.FormulaParsing.ExcelCell.RowIndex*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExcelCell.Value
  commentId: P:OfficeOpenXml.FormulaParsing.ExcelCell.Value
  id: Value
  parent: OfficeOpenXml.FormulaParsing.ExcelCell
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ExcelCell.Value
  fullName: OfficeOpenXml.FormulaParsing.ExcelCell.Value
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelCell.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Value
    path: ../src/EPPlus/FormulaParsing/ExcelCell.cs
    startLine: 33
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  syntax:
    content: public object Value { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property Value As Object
  overload: OfficeOpenXml.FormulaParsing.ExcelCell.Value*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExcelCell.Formula
  commentId: P:OfficeOpenXml.FormulaParsing.ExcelCell.Formula
  id: Formula
  parent: OfficeOpenXml.FormulaParsing.ExcelCell
  langs:
  - csharp
  - vb
  name: Formula
  nameWithType: ExcelCell.Formula
  fullName: OfficeOpenXml.FormulaParsing.ExcelCell.Formula
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelCell.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Formula
    path: ../src/EPPlus/FormulaParsing/ExcelCell.cs
    startLine: 35
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  syntax:
    content: public string Formula { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Formula As String
  overload: OfficeOpenXml.FormulaParsing.ExcelCell.Formula*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: OfficeOpenXml.FormulaParsing
  commentId: N:OfficeOpenXml.FormulaParsing
  name: OfficeOpenXml.FormulaParsing
  nameWithType: OfficeOpenXml.FormulaParsing
  fullName: OfficeOpenXml.FormulaParsing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.ExcelCell.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelCell.#ctor
  name: ExcelCell
  nameWithType: ExcelCell.ExcelCell
  fullName: OfficeOpenXml.FormulaParsing.ExcelCell.ExcelCell
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.FormulaParsing.ExcelCell.ColIndex*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelCell.ColIndex
  name: ColIndex
  nameWithType: ExcelCell.ColIndex
  fullName: OfficeOpenXml.FormulaParsing.ExcelCell.ColIndex
- uid: OfficeOpenXml.FormulaParsing.ExcelCell.RowIndex*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelCell.RowIndex
  name: RowIndex
  nameWithType: ExcelCell.RowIndex
  fullName: OfficeOpenXml.FormulaParsing.ExcelCell.RowIndex
- uid: OfficeOpenXml.FormulaParsing.ExcelCell.Value*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelCell.Value
  name: Value
  nameWithType: ExcelCell.Value
  fullName: OfficeOpenXml.FormulaParsing.ExcelCell.Value
- uid: OfficeOpenXml.FormulaParsing.ExcelCell.Formula*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelCell.Formula
  name: Formula
  nameWithType: ExcelCell.Formula
  fullName: OfficeOpenXml.FormulaParsing.ExcelCell.Formula
