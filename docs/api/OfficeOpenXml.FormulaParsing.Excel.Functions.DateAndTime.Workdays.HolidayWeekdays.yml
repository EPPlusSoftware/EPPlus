### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays
  id: HolidayWeekdays
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
  children:
  - OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.#ctor
  - OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.#ctor(System.DayOfWeek[])
  - OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.AdjustResultWithHolidays(System.DateTime,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument})
  - OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.GetNextWorkday(System.DateTime,OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.WorkdayCalculationDirection)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.IsHolidayWeekday(System.DateTime)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.NumberOfWorkdaysPerWeek
  langs:
  - csharp
  - vb
  name: HolidayWeekdays
  nameWithType: HolidayWeekdays
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: HolidayWeekdays
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
    startLine: 21
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
  syntax:
    content: public class HolidayWeekdays
    content.vb: Public Class HolidayWeekdays
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.#ctor
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.#ctor
  id: '#ctor'
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays
  langs:
  - csharp
  - vb
  name: HolidayWeekdays()
  nameWithType: HolidayWeekdays.HolidayWeekdays()
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.HolidayWeekdays()
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
    startLine: 25
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
  syntax:
    content: public HolidayWeekdays()
    content.vb: Public Sub New
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.NumberOfWorkdaysPerWeek
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.NumberOfWorkdaysPerWeek
  id: NumberOfWorkdaysPerWeek
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays
  langs:
  - csharp
  - vb
  name: NumberOfWorkdaysPerWeek
  nameWithType: HolidayWeekdays.NumberOfWorkdaysPerWeek
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.NumberOfWorkdaysPerWeek
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: NumberOfWorkdaysPerWeek
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
    startLine: 31
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
  syntax:
    content: public int NumberOfWorkdaysPerWeek { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumberOfWorkdaysPerWeek As Integer
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.NumberOfWorkdaysPerWeek*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.#ctor(System.DayOfWeek[])
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.#ctor(System.DayOfWeek[])
  id: '#ctor(System.DayOfWeek[])'
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays
  langs:
  - csharp
  - vb
  name: HolidayWeekdays(DayOfWeek[])
  nameWithType: HolidayWeekdays.HolidayWeekdays(DayOfWeek[])
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.HolidayWeekdays(System.DayOfWeek[])
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
    startLine: 33
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
  syntax:
    content: public HolidayWeekdays(params DayOfWeek[] holidayDays)
    parameters:
    - id: holidayDays
      type: System.DayOfWeek[]
    content.vb: Public Sub New(ParamArray holidayDays As DayOfWeek())
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.#ctor*
  nameWithType.vb: HolidayWeekdays.HolidayWeekdays(DayOfWeek())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.HolidayWeekdays(System.DayOfWeek())
  name.vb: HolidayWeekdays(DayOfWeek())
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.IsHolidayWeekday(System.DateTime)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.IsHolidayWeekday(System.DateTime)
  id: IsHolidayWeekday(System.DateTime)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays
  langs:
  - csharp
  - vb
  name: IsHolidayWeekday(DateTime)
  nameWithType: HolidayWeekdays.IsHolidayWeekday(DateTime)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.IsHolidayWeekday(System.DateTime)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsHolidayWeekday
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
    startLine: 41
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
  syntax:
    content: public bool IsHolidayWeekday(DateTime dateTime)
    parameters:
    - id: dateTime
      type: System.DateTime
    return:
      type: System.Boolean
    content.vb: Public Function IsHolidayWeekday(dateTime As Date) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.IsHolidayWeekday*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.AdjustResultWithHolidays(System.DateTime,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument})
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.AdjustResultWithHolidays(System.DateTime,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument})
  id: AdjustResultWithHolidays(System.DateTime,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument})
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays
  langs:
  - csharp
  - vb
  name: AdjustResultWithHolidays(DateTime, IEnumerable<FunctionArgument>)
  nameWithType: HolidayWeekdays.AdjustResultWithHolidays(DateTime, IEnumerable<FunctionArgument>)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.AdjustResultWithHolidays(System.DateTime, System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AdjustResultWithHolidays
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
    startLine: 46
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
  syntax:
    content: public DateTime AdjustResultWithHolidays(DateTime resultDate, IEnumerable<FunctionArgument> arguments)
    parameters:
    - id: resultDate
      type: System.DateTime
    - id: arguments
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
    return:
      type: System.DateTime
    content.vb: Public Function AdjustResultWithHolidays(resultDate As Date, arguments As IEnumerable(Of FunctionArgument)) As Date
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.AdjustResultWithHolidays*
  nameWithType.vb: HolidayWeekdays.AdjustResultWithHolidays(DateTime, IEnumerable(Of FunctionArgument))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.AdjustResultWithHolidays(System.DateTime, System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument))
  name.vb: AdjustResultWithHolidays(DateTime, IEnumerable(Of FunctionArgument))
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.GetNextWorkday(System.DateTime,OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.WorkdayCalculationDirection)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.GetNextWorkday(System.DateTime,OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.WorkdayCalculationDirection)
  id: GetNextWorkday(System.DateTime,OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.WorkdayCalculationDirection)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays
  langs:
  - csharp
  - vb
  name: GetNextWorkday(DateTime, WorkdayCalculationDirection)
  nameWithType: HolidayWeekdays.GetNextWorkday(DateTime, WorkdayCalculationDirection)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.GetNextWorkday(System.DateTime, OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.WorkdayCalculationDirection)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetNextWorkday
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/DateAndTime/Workdays/HolidayWeekdays.cs
    startLine: 88
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
  syntax:
    content: public DateTime GetNextWorkday(DateTime date, WorkdayCalculationDirection direction = WorkdayCalculationDirection.Forward)
    parameters:
    - id: date
      type: System.DateTime
    - id: direction
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.WorkdayCalculationDirection
    return:
      type: System.DateTime
    content.vb: Public Function GetNextWorkday(date As Date, direction As WorkdayCalculationDirection = WorkdayCalculationDirection.Forward) As Date
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.GetNextWorkday*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
  commentId: N:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
  name: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
  nameWithType: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.#ctor
  name: HolidayWeekdays
  nameWithType: HolidayWeekdays.HolidayWeekdays
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.HolidayWeekdays
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.NumberOfWorkdaysPerWeek*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.NumberOfWorkdaysPerWeek
  name: NumberOfWorkdaysPerWeek
  nameWithType: HolidayWeekdays.NumberOfWorkdaysPerWeek
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.NumberOfWorkdaysPerWeek
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DayOfWeek[]
  isExternal: true
  name: DayOfWeek[]
  nameWithType: DayOfWeek[]
  fullName: System.DayOfWeek[]
  nameWithType.vb: DayOfWeek()
  fullName.vb: System.DayOfWeek()
  name.vb: DayOfWeek()
  spec.csharp:
  - uid: System.DayOfWeek
    name: DayOfWeek
    nameWithType: DayOfWeek
    fullName: System.DayOfWeek
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.DayOfWeek
    name: DayOfWeek
    nameWithType: DayOfWeek
    fullName: System.DayOfWeek
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.IsHolidayWeekday*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.IsHolidayWeekday
  name: IsHolidayWeekday
  nameWithType: HolidayWeekdays.IsHolidayWeekday
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.IsHolidayWeekday
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.AdjustResultWithHolidays*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.AdjustResultWithHolidays
  name: AdjustResultWithHolidays
  nameWithType: HolidayWeekdays.AdjustResultWithHolidays
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.AdjustResultWithHolidays
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<FunctionArgument>
  nameWithType: IEnumerable<FunctionArgument>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>
  nameWithType.vb: IEnumerable(Of FunctionArgument)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument)
  name.vb: IEnumerable(Of FunctionArgument)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
    name: FunctionArgument
    nameWithType: FunctionArgument
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
    name: FunctionArgument
    nameWithType: FunctionArgument
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.GetNextWorkday*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.GetNextWorkday
  name: GetNextWorkday
  nameWithType: HolidayWeekdays.GetNextWorkday
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays.GetNextWorkday
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.WorkdayCalculationDirection
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.WorkdayCalculationDirection
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays
  name: WorkdayCalculationDirection
  nameWithType: WorkdayCalculationDirection
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.WorkdayCalculationDirection
