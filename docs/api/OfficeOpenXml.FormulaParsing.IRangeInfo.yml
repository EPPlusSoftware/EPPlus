### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo
  commentId: T:OfficeOpenXml.FormulaParsing.IRangeInfo
  id: IRangeInfo
  parent: OfficeOpenXml.FormulaParsing
  children:
  - OfficeOpenXml.FormulaParsing.IRangeInfo.Address
  - OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells
  - OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32)
  - OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue(System.Int32,System.Int32)
  - OfficeOpenXml.FormulaParsing.IRangeInfo.IsEmpty
  - OfficeOpenXml.FormulaParsing.IRangeInfo.IsMulti
  - OfficeOpenXml.FormulaParsing.IRangeInfo.IsRef
  - OfficeOpenXml.FormulaParsing.IRangeInfo.Worksheet
  langs:
  - csharp
  - vb
  name: IRangeInfo
  nameWithType: IRangeInfo
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo
  type: Interface
  source:
    remote:
      path: src/EPPlus/FormulaParsing/IRangeInfo.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IRangeInfo
    path: ../src/EPPlus/FormulaParsing/IRangeInfo.cs
    startLine: 22
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nInformation about a specific range used by the formula parser.\n"
  example: []
  syntax:
    content: 'public interface IRangeInfo : IEnumerator<ICellInfo>, IEnumerator, IDisposable, IEnumerable<ICellInfo>, IEnumerable'
    content.vb: >-
      Public Interface IRangeInfo
          Inherits IEnumerator(Of ICellInfo), IEnumerable(Of ICellInfo)
  inheritedMembers:
  - System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}.Current
  - System.Collections.IEnumerator.MoveNext
  - System.Collections.IEnumerator.Reset
  - System.IDisposable.Dispose
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ICellInfo}.GetEnumerator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.IsEmpty
  commentId: P:OfficeOpenXml.FormulaParsing.IRangeInfo.IsEmpty
  id: IsEmpty
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: IRangeInfo.IsEmpty
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.IsEmpty
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/IRangeInfo.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsEmpty
    path: ../src/EPPlus/FormulaParsing/IRangeInfo.cs
    startLine: 27
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nIf the range is empty\n"
  example: []
  syntax:
    content: bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsEmpty As Boolean
  overload: OfficeOpenXml.FormulaParsing.IRangeInfo.IsEmpty*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.IsMulti
  commentId: P:OfficeOpenXml.FormulaParsing.IRangeInfo.IsMulti
  id: IsMulti
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  langs:
  - csharp
  - vb
  name: IsMulti
  nameWithType: IRangeInfo.IsMulti
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.IsMulti
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/IRangeInfo.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsMulti
    path: ../src/EPPlus/FormulaParsing/IRangeInfo.cs
    startLine: 31
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nIf the contains more than one cell  with a value.\n"
  example: []
  syntax:
    content: bool IsMulti { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsMulti As Boolean
  overload: OfficeOpenXml.FormulaParsing.IRangeInfo.IsMulti*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.IsRef
  commentId: P:OfficeOpenXml.FormulaParsing.IRangeInfo.IsRef
  id: IsRef
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  langs:
  - csharp
  - vb
  name: IsRef
  nameWithType: IRangeInfo.IsRef
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.IsRef
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/IRangeInfo.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsRef
    path: ../src/EPPlus/FormulaParsing/IRangeInfo.cs
    startLine: 35
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nIf the range is not valid and returns #REF!\n"
  example: []
  syntax:
    content: bool IsRef { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsRef As Boolean
  overload: OfficeOpenXml.FormulaParsing.IRangeInfo.IsRef*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells
  commentId: M:OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells
  id: GetNCells
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  langs:
  - csharp
  - vb
  name: GetNCells()
  nameWithType: IRangeInfo.GetNCells()
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/IRangeInfo.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetNCells
    path: ../src/EPPlus/FormulaParsing/IRangeInfo.cs
    startLine: 40
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nGet number of cells\n"
  example: []
  syntax:
    content: int GetNCells()
    return:
      type: System.Int32
      description: Number of cells
    content.vb: Function GetNCells As Integer
  overload: OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells*
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.Address
  commentId: P:OfficeOpenXml.FormulaParsing.IRangeInfo.Address
  id: Address
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: IRangeInfo.Address
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.Address
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/IRangeInfo.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Address
    path: ../src/EPPlus/FormulaParsing/IRangeInfo.cs
    startLine: 44
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nThe address.\n"
  example: []
  syntax:
    content: ExcelAddressBase Address { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelAddressBase
    content.vb: ReadOnly Property Address As ExcelAddressBase
  overload: OfficeOpenXml.FormulaParsing.IRangeInfo.Address*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue(System.Int32,System.Int32)
  id: GetValue(System.Int32,System.Int32)
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  langs:
  - csharp
  - vb
  name: GetValue(Int32, Int32)
  nameWithType: IRangeInfo.GetValue(Int32, Int32)
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/IRangeInfo.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetValue
    path: ../src/EPPlus/FormulaParsing/IRangeInfo.cs
    startLine: 51
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nGet the value from a cell\n"
  example: []
  syntax:
    content: object GetValue(int row, int col)
    parameters:
    - id: row
      type: System.Int32
      description: The Row
    - id: col
      type: System.Int32
      description: The Column
    return:
      type: System.Object
      description: ''
    content.vb: Function GetValue(row As Integer, col As Integer) As Object
  overload: OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue*
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32)
  id: GetOffset(System.Int32,System.Int32)
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  langs:
  - csharp
  - vb
  name: GetOffset(Int32, Int32)
  nameWithType: IRangeInfo.GetOffset(Int32, Int32)
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/IRangeInfo.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetOffset
    path: ../src/EPPlus/FormulaParsing/IRangeInfo.cs
    startLine: 58
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nGets\n"
  example: []
  syntax:
    content: object GetOffset(int rowOffset, int colOffset)
    parameters:
    - id: rowOffset
      type: System.Int32
      description: ''
    - id: colOffset
      type: System.Int32
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: Function GetOffset(rowOffset As Integer, colOffset As Integer) As Object
  overload: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset*
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.Worksheet
  commentId: P:OfficeOpenXml.FormulaParsing.IRangeInfo.Worksheet
  id: Worksheet
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  langs:
  - csharp
  - vb
  name: Worksheet
  nameWithType: IRangeInfo.Worksheet
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.Worksheet
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/IRangeInfo.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Worksheet
    path: ../src/EPPlus/FormulaParsing/IRangeInfo.cs
    startLine: 62
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nThe worksheet \n"
  example: []
  syntax:
    content: ExcelWorksheet Worksheet { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelWorksheet
    content.vb: ReadOnly Property Worksheet As ExcelWorksheet
  overload: OfficeOpenXml.FormulaParsing.IRangeInfo.Worksheet*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: OfficeOpenXml.FormulaParsing
  commentId: N:OfficeOpenXml.FormulaParsing
  name: OfficeOpenXml.FormulaParsing
  nameWithType: OfficeOpenXml.FormulaParsing
  fullName: OfficeOpenXml.FormulaParsing
- uid: System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}.Current
  commentId: P:System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}.Current
  parent: System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}
  definition: System.Collections.Generic.IEnumerator`1.Current
  name: Current
  nameWithType: IEnumerator<ICellInfo>.Current
  fullName: System.Collections.Generic.IEnumerator<OfficeOpenXml.FormulaParsing.ICellInfo>.Current
  nameWithType.vb: IEnumerator(Of ICellInfo).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of OfficeOpenXml.FormulaParsing.ICellInfo).Current
- uid: System.Collections.IEnumerator.MoveNext
  commentId: M:System.Collections.IEnumerator.MoveNext
  parent: System.Collections.IEnumerator
  isExternal: true
  name: MoveNext()
  nameWithType: IEnumerator.MoveNext()
  fullName: System.Collections.IEnumerator.MoveNext()
  spec.csharp:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator.Reset
  commentId: M:System.Collections.IEnumerator.Reset
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Reset()
  nameWithType: IEnumerator.Reset()
  fullName: System.Collections.IEnumerator.Reset()
  spec.csharp:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ICellInfo}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ICellInfo}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ICellInfo}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<ICellInfo>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ICellInfo>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of ICellInfo).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ICellInfo).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<ICellInfo>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ICellInfo>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of ICellInfo).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ICellInfo).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1.Current
  commentId: P:System.Collections.Generic.IEnumerator`1.Current
  isExternal: true
  name: Current
  nameWithType: IEnumerator<T>.Current
  fullName: System.Collections.Generic.IEnumerator<T>.Current
  nameWithType.vb: IEnumerator(Of T).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of T).Current
- uid: System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}
  commentId: T:System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<ICellInfo>
  nameWithType: IEnumerator<ICellInfo>
  fullName: System.Collections.Generic.IEnumerator<OfficeOpenXml.FormulaParsing.ICellInfo>
  nameWithType.vb: IEnumerator(Of ICellInfo)
  fullName.vb: System.Collections.Generic.IEnumerator(Of OfficeOpenXml.FormulaParsing.ICellInfo)
  name.vb: IEnumerator(Of ICellInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.ICellInfo
    name: ICellInfo
    nameWithType: ICellInfo
    fullName: OfficeOpenXml.FormulaParsing.ICellInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.ICellInfo
    name: ICellInfo
    nameWithType: ICellInfo
    fullName: OfficeOpenXml.FormulaParsing.ICellInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ICellInfo}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ICellInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ICellInfo>
  nameWithType: IEnumerable<ICellInfo>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ICellInfo>
  nameWithType.vb: IEnumerable(Of ICellInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ICellInfo)
  name.vb: IEnumerable(Of ICellInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.ICellInfo
    name: ICellInfo
    nameWithType: ICellInfo
    fullName: OfficeOpenXml.FormulaParsing.ICellInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.ICellInfo
    name: ICellInfo
    nameWithType: ICellInfo
    fullName: OfficeOpenXml.FormulaParsing.ICellInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.IsEmpty*
  commentId: Overload:OfficeOpenXml.FormulaParsing.IRangeInfo.IsEmpty
  name: IsEmpty
  nameWithType: IRangeInfo.IsEmpty
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.IsMulti*
  commentId: Overload:OfficeOpenXml.FormulaParsing.IRangeInfo.IsMulti
  name: IsMulti
  nameWithType: IRangeInfo.IsMulti
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.IsMulti
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.IsRef*
  commentId: Overload:OfficeOpenXml.FormulaParsing.IRangeInfo.IsRef
  name: IsRef
  nameWithType: IRangeInfo.IsRef
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.IsRef
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells*
  commentId: Overload:OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells
  name: GetNCells
  nameWithType: IRangeInfo.GetNCells
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.Address*
  commentId: Overload:OfficeOpenXml.FormulaParsing.IRangeInfo.Address
  name: Address
  nameWithType: IRangeInfo.Address
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.Address
- uid: OfficeOpenXml.ExcelAddressBase
  commentId: T:OfficeOpenXml.ExcelAddressBase
  parent: OfficeOpenXml
  name: ExcelAddressBase
  nameWithType: ExcelAddressBase
  fullName: OfficeOpenXml.ExcelAddressBase
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue*
  commentId: Overload:OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue
  name: GetValue
  nameWithType: IRangeInfo.GetValue
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset*
  commentId: Overload:OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset
  name: GetOffset
  nameWithType: IRangeInfo.GetOffset
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.Worksheet*
  commentId: Overload:OfficeOpenXml.FormulaParsing.IRangeInfo.Worksheet
  name: Worksheet
  nameWithType: IRangeInfo.Worksheet
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.Worksheet
- uid: OfficeOpenXml.ExcelWorksheet
  commentId: T:OfficeOpenXml.ExcelWorksheet
  parent: OfficeOpenXml
  name: ExcelWorksheet
  nameWithType: ExcelWorksheet
  fullName: OfficeOpenXml.ExcelWorksheet
