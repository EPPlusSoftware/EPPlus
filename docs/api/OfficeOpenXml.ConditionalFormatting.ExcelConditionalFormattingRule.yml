### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  commentId: T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  id: ExcelConditionalFormattingRule
  parent: OfficeOpenXml.ConditionalFormatting
  children:
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.AboveAverage
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Address
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.As
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Bottom
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.EqualAverage
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula2
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Node
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Operator
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Percent
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.PivotTable
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Priority
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Rank
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StdDev
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StopIfTrue
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Style
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.TimePeriod
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Type
  langs:
  - csharp
  - vb
  name: ExcelConditionalFormattingRule
  nameWithType: ExcelConditionalFormattingRule
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  type: Class
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelConditionalFormattingRule
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 28
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\n\n"
  example: []
  syntax:
    content: 'public abstract class ExcelConditionalFormattingRule : XmlHelper, IExcelConditionalFormattingRule'
    content.vb: >-
      Public MustInherit Class ExcelConditionalFormattingRule
          Inherits XmlHelper
          Implements IExcelConditionalFormattingRule
  inheritance:
  - System.Object
  - OfficeOpenXml.XmlHelper
  derivedClasses:
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveStdDev
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAverageGroup
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBeginsWith
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowStdDev
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBetween
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottom
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottomPercent
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsBlanks
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsErrors
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsText
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDuplicateValues
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEndsWith
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEqual
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingExpression
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThan
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThanOrEqual
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThan
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThanOrEqual
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotBetween
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsBlanks
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsErrors
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsText
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotEqual
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodGroup
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTop
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTopPercent
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingUniqueValues
  implements:
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Node
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Node
  id: Node
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: Node
  nameWithType: ExcelConditionalFormattingRule.Node
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Node
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Node
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 145
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nGet the &lt;cfRule> node\n"
  example: []
  syntax:
    content: public XmlNode Node { get; }
    parameters: []
    return:
      type: System.Xml.XmlNode
    content.vb: Public ReadOnly Property Node As XmlNode
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Node*
  implements:
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Node
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Address
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Address
  id: Address
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: ExcelConditionalFormattingRule.Address
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Address
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Address
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 157
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nThe address of the conditional formatting rule\n"
  remarks: "\nThe address is stored in a parent node called &lt;conditionalFormatting> in the\n@sqref attribute. Excel groups rules that have the same address inside one node.\n"
  example: []
  syntax:
    content: public ExcelAddress Address { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelAddress
    content.vb: Public Property Address As ExcelAddress
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Address*
  implements:
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Address
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.PivotTable
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.PivotTable
  id: PivotTable
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: PivotTable
  nameWithType: ExcelConditionalFormattingRule.PivotTable
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.PivotTable
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: PivotTable
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 200
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nIndicates that the conditional formatting is associated with a PivotTable\n"
  example: []
  syntax:
    content: public bool PivotTable { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property PivotTable As Boolean
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.PivotTable*
  implements:
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.PivotTable
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Type
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Type
  id: Type
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ExcelConditionalFormattingRule.Type
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Type
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Type
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 214
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nType of conditional formatting rule.\n"
  example: []
  syntax:
    content: public eExcelConditionalFormattingRuleType Type { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType
    content.vb: Public ReadOnly Property Type As eExcelConditionalFormattingRuleType
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Type*
  implements:
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Priority
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Priority
  id: Priority
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: Priority
  nameWithType: ExcelConditionalFormattingRule.Priority
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Priority
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Priority
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 243
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nThe priority of the rule. \nA lower values are higher priority than higher values, where 1 is the highest priority.\n"
  example: []
  syntax:
    content: public int Priority { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Priority As Integer
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Priority*
  implements:
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Priority
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StopIfTrue
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StopIfTrue
  id: StopIfTrue
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: StopIfTrue
  nameWithType: ExcelConditionalFormattingRule.StopIfTrue
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StopIfTrue
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: StopIfTrue
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 313
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nIf this property is true, no rules with lower priority shall be applied over this rule,\nwhen this rule evaluates to true.\n"
  example: []
  syntax:
    content: public bool StopIfTrue { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property StopIfTrue As Boolean
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StopIfTrue*
  implements:
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.StopIfTrue
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Style
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Style
  id: Style
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: Style
  nameWithType: ExcelConditionalFormattingRule.Style
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Style
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Style
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 351
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nThe style\n"
  example: []
  syntax:
    content: public ExcelDxfStyleConditionalFormatting Style { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Style.Dxf.ExcelDxfStyleConditionalFormatting
    content.vb: Public ReadOnly Property Style As ExcelDxfStyleConditionalFormatting
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Style*
  implements:
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Style
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StdDev
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StdDev
  id: StdDev
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: StdDev
  nameWithType: ExcelConditionalFormattingRule.StdDev
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StdDev
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: StdDev
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 365
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nStdDev (zero is not allowed and will be converted to 1)\n"
  example: []
  syntax:
    content: public ushort StdDev { get; set; }
    parameters: []
    return:
      type: System.UInt16
    content.vb: Public Property StdDev As UShort
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StdDev*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Rank
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Rank
  id: Rank
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: Rank
  nameWithType: ExcelConditionalFormattingRule.Rank
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Rank
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Rank
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 384
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nRank (zero is not allowed and will be converted to 1)\n"
  example: []
  syntax:
    content: public ushort Rank { get; set; }
    parameters: []
    return:
      type: System.UInt16
    content.vb: Public Property Rank As UShort
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Rank*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.AboveAverage
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.AboveAverage
  id: AboveAverage
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: AboveAverage
  nameWithType: ExcelConditionalFormattingRule.AboveAverage
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.AboveAverage
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AboveAverage
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 407
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nAbove average\n"
  example: []
  syntax:
    content: protected bool? AboveAverage { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Protected Property AboveAverage As Boolean?
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.AboveAverage*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.EqualAverage
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.EqualAverage
  id: EqualAverage
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: EqualAverage
  nameWithType: ExcelConditionalFormattingRule.EqualAverage
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.EqualAverage
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: EqualAverage
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 439
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nEqualAverage\n"
  example: []
  syntax:
    content: protected bool? EqualAverage { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Protected Property EqualAverage As Boolean?
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.EqualAverage*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Bottom
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Bottom
  id: Bottom
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: Bottom
  nameWithType: ExcelConditionalFormattingRule.Bottom
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Bottom
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Bottom
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 470
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nBottom attribute\n"
  example: []
  syntax:
    content: protected bool? Bottom { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Protected Property Bottom As Boolean?
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Bottom*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Percent
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Percent
  id: Percent
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: Percent
  nameWithType: ExcelConditionalFormattingRule.Percent
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Percent
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Percent
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 501
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nPercent attribute\n"
  example: []
  syntax:
    content: protected bool? Percent { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Protected Property Percent As Boolean?
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Percent*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.TimePeriod
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.TimePeriod
  id: TimePeriod
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: TimePeriod
  nameWithType: ExcelConditionalFormattingRule.TimePeriod
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.TimePeriod
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: TimePeriod
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 532
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nTimePeriod\n"
  example: []
  syntax:
    content: protected eExcelConditionalFormattingTimePeriodType TimePeriod { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType
    content.vb: Protected Property TimePeriod As eExcelConditionalFormattingTimePeriodType
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.TimePeriod*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Operator
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Operator
  id: Operator
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: Operator
  nameWithType: ExcelConditionalFormattingRule.Operator
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Operator
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Operator
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 551
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nOperator\n"
  example: []
  syntax:
    content: protected eExcelConditionalFormattingOperatorType Operator { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType
    content.vb: Protected Property Operator As eExcelConditionalFormattingOperatorType
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Operator*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula
  id: Formula
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: Formula
  nameWithType: ExcelConditionalFormattingRule.Formula
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Formula
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 570
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nFormula\n"
  example: []
  syntax:
    content: public string Formula { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Formula As String
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula2
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula2
  id: Formula2
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: Formula2
  nameWithType: ExcelConditionalFormattingRule.Formula2
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula2
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Formula2
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 588
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nFormula2\n"
  example: []
  syntax:
    content: public string Formula2 { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Formula2 As String
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula2*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.As
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.As
  id: As
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule
  langs:
  - csharp
  - vb
  name: As
  nameWithType: ExcelConditionalFormattingRule.As
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.As
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: As
    path: ../src/EPPlus/ConditionalFormatting/Rules/ExcelConditionalFormattingRule.cs
    startLine: 625
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nProvides access to type conversion for all conditional formatting rules.\n"
  example: []
  syntax:
    content: public ExcelConditionalFormattingAsType As { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType
    content.vb: Public ReadOnly Property As As ExcelConditionalFormattingAsType
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.As*
  implements:
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.As
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: OfficeOpenXml.ConditionalFormatting
  commentId: N:OfficeOpenXml.ConditionalFormatting
  name: OfficeOpenXml.ConditionalFormatting
  nameWithType: OfficeOpenXml.ConditionalFormatting
  fullName: OfficeOpenXml.ConditionalFormatting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.XmlHelper
  commentId: T:OfficeOpenXml.XmlHelper
  parent: OfficeOpenXml
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: OfficeOpenXml.XmlHelper
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  commentId: T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  parent: OfficeOpenXml.ConditionalFormatting.Contracts
  name: IExcelConditionalFormattingRule
  nameWithType: IExcelConditionalFormattingRule
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: OfficeOpenXml.ConditionalFormatting.Contracts
  commentId: N:OfficeOpenXml.ConditionalFormatting.Contracts
  name: OfficeOpenXml.ConditionalFormatting.Contracts
  nameWithType: OfficeOpenXml.ConditionalFormatting.Contracts
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Node*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Node
  name: Node
  nameWithType: ExcelConditionalFormattingRule.Node
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Node
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Node
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Node
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: Node
  nameWithType: IExcelConditionalFormattingRule.Node
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Node
- uid: System.Xml.XmlNode
  commentId: T:System.Xml.XmlNode
  parent: System.Xml
  isExternal: true
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Address*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Address
  name: Address
  nameWithType: ExcelConditionalFormattingRule.Address
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Address
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Address
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Address
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: Address
  nameWithType: IExcelConditionalFormattingRule.Address
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Address
- uid: OfficeOpenXml.ExcelAddress
  commentId: T:OfficeOpenXml.ExcelAddress
  parent: OfficeOpenXml
  name: ExcelAddress
  nameWithType: ExcelAddress
  fullName: OfficeOpenXml.ExcelAddress
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.PivotTable*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.PivotTable
  name: PivotTable
  nameWithType: ExcelConditionalFormattingRule.PivotTable
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.PivotTable
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.PivotTable
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.PivotTable
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: PivotTable
  nameWithType: IExcelConditionalFormattingRule.PivotTable
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.PivotTable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Type*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Type
  name: Type
  nameWithType: ExcelConditionalFormattingRule.Type
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Type
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Type
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Type
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: Type
  nameWithType: IExcelConditionalFormattingRule.Type
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Type
- uid: OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType
  commentId: T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType
  parent: OfficeOpenXml.ConditionalFormatting
  name: eExcelConditionalFormattingRuleType
  nameWithType: eExcelConditionalFormattingRuleType
  fullName: OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Priority*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Priority
  name: Priority
  nameWithType: ExcelConditionalFormattingRule.Priority
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Priority
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Priority
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Priority
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: Priority
  nameWithType: IExcelConditionalFormattingRule.Priority
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Priority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StopIfTrue*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StopIfTrue
  name: StopIfTrue
  nameWithType: ExcelConditionalFormattingRule.StopIfTrue
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StopIfTrue
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.StopIfTrue
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.StopIfTrue
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: StopIfTrue
  nameWithType: IExcelConditionalFormattingRule.StopIfTrue
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.StopIfTrue
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Style*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Style
  name: Style
  nameWithType: ExcelConditionalFormattingRule.Style
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Style
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Style
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Style
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: Style
  nameWithType: IExcelConditionalFormattingRule.Style
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Style
- uid: OfficeOpenXml.Style.Dxf.ExcelDxfStyleConditionalFormatting
  commentId: T:OfficeOpenXml.Style.Dxf.ExcelDxfStyleConditionalFormatting
  parent: OfficeOpenXml.Style.Dxf
  name: ExcelDxfStyleConditionalFormatting
  nameWithType: ExcelDxfStyleConditionalFormatting
  fullName: OfficeOpenXml.Style.Dxf.ExcelDxfStyleConditionalFormatting
- uid: OfficeOpenXml.Style.Dxf
  commentId: N:OfficeOpenXml.Style.Dxf
  name: OfficeOpenXml.Style.Dxf
  nameWithType: OfficeOpenXml.Style.Dxf
  fullName: OfficeOpenXml.Style.Dxf
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StdDev*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StdDev
  name: StdDev
  nameWithType: ExcelConditionalFormattingRule.StdDev
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StdDev
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Rank*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Rank
  name: Rank
  nameWithType: ExcelConditionalFormattingRule.Rank
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Rank
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.AboveAverage*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.AboveAverage
  name: AboveAverage
  nameWithType: ExcelConditionalFormattingRule.AboveAverage
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.AboveAverage
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.EqualAverage*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.EqualAverage
  name: EqualAverage
  nameWithType: ExcelConditionalFormattingRule.EqualAverage
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.EqualAverage
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Bottom*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Bottom
  name: Bottom
  nameWithType: ExcelConditionalFormattingRule.Bottom
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Bottom
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Percent*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Percent
  name: Percent
  nameWithType: ExcelConditionalFormattingRule.Percent
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Percent
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.TimePeriod*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.TimePeriod
  name: TimePeriod
  nameWithType: ExcelConditionalFormattingRule.TimePeriod
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.TimePeriod
- uid: OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType
  commentId: T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType
  parent: OfficeOpenXml.ConditionalFormatting
  name: eExcelConditionalFormattingTimePeriodType
  nameWithType: eExcelConditionalFormattingTimePeriodType
  fullName: OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Operator*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Operator
  name: Operator
  nameWithType: ExcelConditionalFormattingRule.Operator
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Operator
- uid: OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType
  commentId: T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType
  parent: OfficeOpenXml.ConditionalFormatting
  name: eExcelConditionalFormattingOperatorType
  nameWithType: eExcelConditionalFormattingOperatorType
  fullName: OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula
  name: Formula
  nameWithType: ExcelConditionalFormattingRule.Formula
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula2*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula2
  name: Formula2
  nameWithType: ExcelConditionalFormattingRule.Formula2
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula2
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.As*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.As
  name: As
  nameWithType: ExcelConditionalFormattingRule.As
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.As
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.As
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.As
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: As
  nameWithType: IExcelConditionalFormattingRule.As
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.As
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType
  commentId: T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType
  parent: OfficeOpenXml.ConditionalFormatting
  name: ExcelConditionalFormattingAsType
  nameWithType: ExcelConditionalFormattingAsType
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType
