### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  commentId: T:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  id: RangeInfo
  parent: OfficeOpenXml.FormulaParsing.Ranges
  children:
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelAddressBase)
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.FormulaParsing.ParsingContext)
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32,OfficeOpenXml.FormulaParsing.ParsingContext,System.Int32)
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress,OfficeOpenXml.FormulaParsing.ParsingContext)
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Address
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Current
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dimension
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dispose
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetEnumerator
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetNCells
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetOffset(System.Int32,System.Int32)
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetOffset(System.Int32,System.Int32,System.Int32,System.Int32)
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetValue(System.Int32,System.Int32)
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsEmpty
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsHidden(System.Int32,System.Int32)
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsInMemoryRange
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsMulti
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsRef
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.MoveNext
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.NextCell
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Reset
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Size
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System#Collections#IEnumerable#GetEnumerator
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System#Collections#IEnumerator#Current
  - OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Worksheet
  langs:
  - csharp
  - vb
  name: RangeInfo
  nameWithType: RangeInfo
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: RangeInfo
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 24
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nEPPlus implementation of the <xref href=\"OfficeOpenXml.FormulaParsing.IRangeInfo\" data-throw-if-not-resolved=\"false\"></xref> interface\n"
  example: []
  syntax:
    content: 'public class RangeInfo : IRangeInfo, IAddressInfo, IEnumerator<ICellInfo>, IEnumerator, IDisposable, IEnumerable<ICellInfo>, IEnumerable'
    content.vb: >-
      Public Class RangeInfo
          Implements IRangeInfo, IAddressInfo, IEnumerator(Of ICellInfo), IEnumerator, IDisposable, IEnumerable(Of ICellInfo), IEnumerable
  inheritance:
  - System.Object
  implements:
  - OfficeOpenXml.FormulaParsing.IRangeInfo
  - OfficeOpenXml.FormulaParsing.IAddressInfo
  - System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}
  - System.Collections.IEnumerator
  - System.IDisposable
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ICellInfo}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress,OfficeOpenXml.FormulaParsing.ParsingContext)
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress,OfficeOpenXml.FormulaParsing.ParsingContext)
  id: '#ctor(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress,OfficeOpenXml.FormulaParsing.ParsingContext)'
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: RangeInfo(FormulaRangeAddress, ParsingContext)
  nameWithType: RangeInfo.RangeInfo(FormulaRangeAddress, ParsingContext)
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.RangeInfo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress, OfficeOpenXml.FormulaParsing.ParsingContext)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 38
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public RangeInfo(FormulaRangeAddress address, ParsingContext ctx)
    parameters:
    - id: address
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    - id: ctx
      type: OfficeOpenXml.FormulaParsing.ParsingContext
    content.vb: Public Sub New(address As FormulaRangeAddress, ctx As ParsingContext)
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32,OfficeOpenXml.FormulaParsing.ParsingContext,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32,OfficeOpenXml.FormulaParsing.ParsingContext,System.Int32)
  id: '#ctor(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32,OfficeOpenXml.FormulaParsing.ParsingContext,System.Int32)'
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: RangeInfo(ExcelWorksheet, Int32, Int32, Int32, Int32, ParsingContext, Int32)
  nameWithType: RangeInfo.RangeInfo(ExcelWorksheet, Int32, Int32, Int32, Int32, ParsingContext, Int32)
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.RangeInfo(OfficeOpenXml.ExcelWorksheet, System.Int32, System.Int32, System.Int32, System.Int32, OfficeOpenXml.FormulaParsing.ParsingContext, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 64
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public RangeInfo(ExcelWorksheet ws, int fromRow, int fromCol, int toRow, int toCol, ParsingContext ctx, int extRef = -1)
    parameters:
    - id: ws
      type: OfficeOpenXml.ExcelWorksheet
      description: The worksheet
    - id: fromRow
      type: System.Int32
      description: ''
    - id: fromCol
      type: System.Int32
      description: ''
    - id: toRow
      type: System.Int32
      description: ''
    - id: toCol
      type: System.Int32
      description: ''
    - id: ctx
      type: OfficeOpenXml.FormulaParsing.ParsingContext
      description: Parsing context
    - id: extRef
      type: System.Int32
    content.vb: Public Sub New(ws As ExcelWorksheet, fromRow As Integer, fromCol As Integer, toRow As Integer, toCol As Integer, ctx As ParsingContext, extRef As Integer = -1)
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.FormulaParsing.ParsingContext)
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.FormulaParsing.ParsingContext)
  id: '#ctor(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.FormulaParsing.ParsingContext)'
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: RangeInfo(ExcelWorksheet, ParsingContext)
  nameWithType: RangeInfo.RangeInfo(ExcelWorksheet, ParsingContext)
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.RangeInfo(OfficeOpenXml.ExcelWorksheet, OfficeOpenXml.FormulaParsing.ParsingContext)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 77
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\n\n"
  example: []
  syntax:
    content: public RangeInfo(ExcelWorksheet ws, ParsingContext ctx)
    parameters:
    - id: ws
      type: OfficeOpenXml.ExcelWorksheet
      description: The worksheet
    - id: ctx
      type: OfficeOpenXml.FormulaParsing.ParsingContext
    content.vb: Public Sub New(ws As ExcelWorksheet, ctx As ParsingContext)
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelAddressBase)
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelAddressBase)
  id: '#ctor(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelAddressBase)'
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: RangeInfo(ExcelWorksheet, ExcelAddressBase)
  nameWithType: RangeInfo.RangeInfo(ExcelWorksheet, ExcelAddressBase)
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.RangeInfo(OfficeOpenXml.ExcelWorksheet, OfficeOpenXml.ExcelAddressBase)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 88
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public RangeInfo(ExcelWorksheet ws, ExcelAddressBase address)
    parameters:
    - id: ws
      type: OfficeOpenXml.ExcelWorksheet
      description: ''
    - id: address
      type: OfficeOpenXml.ExcelAddressBase
      description: ''
    content.vb: Public Sub New(ws As ExcelWorksheet, address As ExcelAddressBase)
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetNCells
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetNCells
  id: GetNCells
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: GetNCells()
  nameWithType: RangeInfo.GetNCells()
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetNCells()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetNCells
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 109
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nThe total number of cells (including empty) of the range\n"
  example: []
  syntax:
    content: public int GetNCells()
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function GetNCells As Integer
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetNCells*
  implements:
  - OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsRef
  commentId: P:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsRef
  id: IsRef
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: IsRef
  nameWithType: RangeInfo.IsRef
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsRef
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsRef
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 117
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nReturns true if the range represents a reference\n"
  example: []
  syntax:
    content: public bool IsRef { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsRef As Boolean
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsRef*
  implements:
  - OfficeOpenXml.FormulaParsing.IRangeInfo.IsRef
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsEmpty
  commentId: P:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsEmpty
  id: IsEmpty
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: RangeInfo.IsEmpty
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsEmpty
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsEmpty
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 127
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nReturns true if the range is empty\n"
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsEmpty*
  implements:
  - OfficeOpenXml.FormulaParsing.IRangeInfo.IsEmpty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsMulti
  commentId: P:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsMulti
  id: IsMulti
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: IsMulti
  nameWithType: RangeInfo.IsMulti
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsMulti
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsMulti
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 151
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nReturns true if more than one cell\n"
  example: []
  syntax:
    content: public bool IsMulti { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsMulti As Boolean
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsMulti*
  implements:
  - OfficeOpenXml.FormulaParsing.IRangeInfo.IsMulti
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Size
  commentId: P:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Size
  id: Size
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: RangeInfo.Size
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Size
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Size
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 180
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nSize of the range\n"
  example: []
  syntax:
    content: public RangeDefinition Size { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Ranges.RangeDefinition
    content.vb: Public ReadOnly Property Size As RangeDefinition
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Size*
  implements:
  - OfficeOpenXml.FormulaParsing.IRangeInfo.Size
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsInMemoryRange
  commentId: P:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsInMemoryRange
  id: IsInMemoryRange
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: IsInMemoryRange
  nameWithType: RangeInfo.IsInMemoryRange
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsInMemoryRange
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsInMemoryRange
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 185
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nReturns true if the range is an <xref href=\"OfficeOpenXml.FormulaParsing.Ranges.InMemoryRange\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool IsInMemoryRange { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInMemoryRange As Boolean
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsInMemoryRange*
  implements:
  - OfficeOpenXml.FormulaParsing.IRangeInfo.IsInMemoryRange
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Current
  commentId: P:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Current
  id: Current
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: RangeInfo.Current
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Current
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Current
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 190
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nCurrent cell\n"
  example: []
  syntax:
    content: public ICellInfo Current { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.ICellInfo
    content.vb: Public ReadOnly Property Current As ICellInfo
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Current*
  implements:
  - System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}.Current
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Worksheet
  commentId: P:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Worksheet
  id: Worksheet
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: Worksheet
  nameWithType: RangeInfo.Worksheet
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Worksheet
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Worksheet
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 198
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nThe worksheet\n"
  example: []
  syntax:
    content: public ExcelWorksheet Worksheet { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelWorksheet
    content.vb: Public ReadOnly Property Worksheet As ExcelWorksheet
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Worksheet*
  implements:
  - OfficeOpenXml.FormulaParsing.IRangeInfo.Worksheet
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dimension
  commentId: P:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dimension
  id: Dimension
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: Dimension
  nameWithType: RangeInfo.Dimension
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dimension
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Dimension
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 203
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  syntax:
    content: public FormulaRangeAddress Dimension { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    content.vb: Public ReadOnly Property Dimension As FormulaRangeAddress
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dimension*
  implements:
  - OfficeOpenXml.FormulaParsing.IRangeInfo.Dimension
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dispose
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dispose
  id: Dispose
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: RangeInfo.Dispose()
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dispose()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Dispose
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 224
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nRuns at dispose of this instance\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System#Collections#IEnumerator#Current
  commentId: P:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: IEnumerator.Current
  nameWithType: RangeInfo.IEnumerator.Current
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System.Collections.IEnumerator.Current
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: System.Collections.IEnumerator.Current
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 234
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nIEnumerator.Current\n"
  example: []
  syntax:
    content: object IEnumerator.Current { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property System.Collections.IEnumerator.Current As Object Implements IEnumerator.Current
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System#Collections#IEnumerator#Current*
  implements:
  - System.Collections.IEnumerator.Current
  nameWithType.vb: RangeInfo.System.Collections.IEnumerator.Current
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IEnumerator.Current
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.MoveNext
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.MoveNext
  id: MoveNext
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: RangeInfo.MoveNext()
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.MoveNext()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: MoveNext
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 246
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nMoves to next cell\n"
  example: []
  syntax:
    content: public bool MoveNext()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function MoveNext As Boolean
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.MoveNext*
  implements:
  - System.Collections.IEnumerator.MoveNext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Reset
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Reset
  id: Reset
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: RangeInfo.Reset()
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Reset()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Reset
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 256
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\n\n"
  example: []
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Reset*
  implements:
  - System.Collections.IEnumerator.Reset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.NextCell
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.NextCell
  id: NextCell
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: NextCell()
  nameWithType: RangeInfo.NextCell()
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.NextCell()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: NextCell
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 267
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nMoves to next cell\n"
  example: []
  syntax:
    content: public bool NextCell()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function NextCell As Boolean
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.NextCell*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetEnumerator
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetEnumerator
  id: GetEnumerator
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: RangeInfo.GetEnumerator()
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetEnumerator
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 278
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nReturns enumerator for cells\n"
  example: []
  syntax:
    content: public IEnumerator<ICellInfo> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}
      description: ''
    content.vb: Public Function GetEnumerator As IEnumerator(Of ICellInfo)
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ICellInfo}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System#Collections#IEnumerable#GetEnumerator
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: RangeInfo.IEnumerable.GetEnumerator()
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 288
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nReturns enumerator for cells\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: ''
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: RangeInfo.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Address
  commentId: P:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Address
  id: Address
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: RangeInfo.Address
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Address
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Address
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 302
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nAddress of the range\n"
  example: []
  syntax:
    content: public FormulaRangeAddress Address { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    content.vb: Public ReadOnly Property Address As FormulaRangeAddress
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Address*
  implements:
  - OfficeOpenXml.FormulaParsing.IAddressInfo.Address
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetValue(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetValue(System.Int32,System.Int32)
  id: GetValue(System.Int32,System.Int32)
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: GetValue(Int32, Int32)
  nameWithType: RangeInfo.GetValue(Int32, Int32)
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetValue(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetValue
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 310
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nReturns the cell value by 0-based index\n"
  example: []
  syntax:
    content: public object GetValue(int row, int col)
    parameters:
    - id: row
      type: System.Int32
      description: 0-based row index
    - id: col
      type: System.Int32
      description: 0-based col index
    return:
      type: System.Object
      description: Cell value
    content.vb: Public Function GetValue(row As Integer, col As Integer) As Object
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetValue*
  implements:
  - OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetOffset(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetOffset(System.Int32,System.Int32)
  id: GetOffset(System.Int32,System.Int32)
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: GetOffset(Int32, Int32)
  nameWithType: RangeInfo.GetOffset(Int32, Int32)
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetOffset(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetOffset
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 321
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nReturn value by offset\n"
  example: []
  syntax:
    content: public object GetOffset(int rowOffset, int colOffset)
    parameters:
    - id: rowOffset
      type: System.Int32
      description: ''
    - id: colOffset
      type: System.Int32
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: Public Function GetOffset(rowOffset As Integer, colOffset As Integer) As Object
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetOffset*
  implements:
  - OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetOffset(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetOffset(System.Int32,System.Int32,System.Int32,System.Int32)
  id: GetOffset(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: GetOffset(Int32, Int32, Int32, Int32)
  nameWithType: RangeInfo.GetOffset(Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetOffset(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetOffset
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 342
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  summary: "\nReturns a subrange\n"
  example: []
  syntax:
    content: public IRangeInfo GetOffset(int rowOffsetStart, int colOffsetStart, int rowOffsetEnd, int colOffsetEnd)
    parameters:
    - id: rowOffsetStart
      type: System.Int32
      description: ''
    - id: colOffsetStart
      type: System.Int32
      description: ''
    - id: rowOffsetEnd
      type: System.Int32
      description: ''
    - id: colOffsetEnd
      type: System.Int32
      description: ''
    return:
      type: OfficeOpenXml.FormulaParsing.IRangeInfo
      description: ''
    content.vb: Public Function GetOffset(rowOffsetStart As Integer, colOffsetStart As Integer, rowOffsetEnd As Integer, colOffsetEnd As Integer) As IRangeInfo
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetOffset*
  implements:
  - OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsHidden(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsHidden(System.Int32,System.Int32)
  id: IsHidden(System.Int32,System.Int32)
  parent: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo
  langs:
  - csharp
  - vb
  name: IsHidden(Int32, Int32)
  nameWithType: RangeInfo.IsHidden(Int32, Int32)
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsHidden(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsHidden
    path: ../src/EPPlus/FormulaParsing/Ranges/RangeInfo.cs
    startLine: 359
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Ranges
  syntax:
    content: public bool IsHidden(int rowOffset, int colOffset)
    parameters:
    - id: rowOffset
      type: System.Int32
    - id: colOffset
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function IsHidden(rowOffset As Integer, colOffset As Integer) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsHidden*
  implements:
  - OfficeOpenXml.FormulaParsing.IRangeInfo.IsHidden(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo
  commentId: T:OfficeOpenXml.FormulaParsing.IRangeInfo
  parent: OfficeOpenXml.FormulaParsing
  name: IRangeInfo
  nameWithType: IRangeInfo
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo
- uid: OfficeOpenXml.FormulaParsing.Ranges
  commentId: N:OfficeOpenXml.FormulaParsing.Ranges
  name: OfficeOpenXml.FormulaParsing.Ranges
  nameWithType: OfficeOpenXml.FormulaParsing.Ranges
  fullName: OfficeOpenXml.FormulaParsing.Ranges
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.FormulaParsing.IAddressInfo
  commentId: T:OfficeOpenXml.FormulaParsing.IAddressInfo
  parent: OfficeOpenXml.FormulaParsing
  name: IAddressInfo
  nameWithType: IAddressInfo
  fullName: OfficeOpenXml.FormulaParsing.IAddressInfo
- uid: System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}
  commentId: T:System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<ICellInfo>
  nameWithType: IEnumerator<ICellInfo>
  fullName: System.Collections.Generic.IEnumerator<OfficeOpenXml.FormulaParsing.ICellInfo>
  nameWithType.vb: IEnumerator(Of ICellInfo)
  fullName.vb: System.Collections.Generic.IEnumerator(Of OfficeOpenXml.FormulaParsing.ICellInfo)
  name.vb: IEnumerator(Of ICellInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.ICellInfo
    name: ICellInfo
    nameWithType: ICellInfo
    fullName: OfficeOpenXml.FormulaParsing.ICellInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.ICellInfo
    name: ICellInfo
    nameWithType: ICellInfo
    fullName: OfficeOpenXml.FormulaParsing.ICellInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ICellInfo}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ICellInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ICellInfo>
  nameWithType: IEnumerable<ICellInfo>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ICellInfo>
  nameWithType.vb: IEnumerable(Of ICellInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ICellInfo)
  name.vb: IEnumerable(Of ICellInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.ICellInfo
    name: ICellInfo
    nameWithType: ICellInfo
    fullName: OfficeOpenXml.FormulaParsing.ICellInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.ICellInfo
    name: ICellInfo
    nameWithType: ICellInfo
    fullName: OfficeOpenXml.FormulaParsing.ICellInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing
  commentId: N:OfficeOpenXml.FormulaParsing
  name: OfficeOpenXml.FormulaParsing
  nameWithType: OfficeOpenXml.FormulaParsing
  fullName: OfficeOpenXml.FormulaParsing
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.#ctor
  name: RangeInfo
  nameWithType: RangeInfo.RangeInfo
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.RangeInfo
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: FormulaRangeAddress
  nameWithType: FormulaRangeAddress
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
- uid: OfficeOpenXml.FormulaParsing.ParsingContext
  commentId: T:OfficeOpenXml.FormulaParsing.ParsingContext
  parent: OfficeOpenXml.FormulaParsing
  name: ParsingContext
  nameWithType: ParsingContext
  fullName: OfficeOpenXml.FormulaParsing.ParsingContext
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
- uid: OfficeOpenXml.ExcelWorksheet
  commentId: T:OfficeOpenXml.ExcelWorksheet
  parent: OfficeOpenXml
  name: ExcelWorksheet
  nameWithType: ExcelWorksheet
  fullName: OfficeOpenXml.ExcelWorksheet
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: OfficeOpenXml.ExcelAddressBase
  commentId: T:OfficeOpenXml.ExcelAddressBase
  parent: OfficeOpenXml
  name: ExcelAddressBase
  nameWithType: ExcelAddressBase
  fullName: OfficeOpenXml.ExcelAddressBase
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetNCells*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetNCells
  name: GetNCells
  nameWithType: RangeInfo.GetNCells
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetNCells
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells
  commentId: M:OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  name: GetNCells()
  nameWithType: IRangeInfo.GetNCells()
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells()
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells
    name: GetNCells
    nameWithType: IRangeInfo.GetNCells
    fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells
    name: GetNCells
    nameWithType: IRangeInfo.GetNCells
    fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsRef*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsRef
  name: IsRef
  nameWithType: RangeInfo.IsRef
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsRef
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.IsRef
  commentId: P:OfficeOpenXml.FormulaParsing.IRangeInfo.IsRef
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  name: IsRef
  nameWithType: IRangeInfo.IsRef
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.IsRef
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsEmpty*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsEmpty
  name: IsEmpty
  nameWithType: RangeInfo.IsEmpty
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsEmpty
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.IsEmpty
  commentId: P:OfficeOpenXml.FormulaParsing.IRangeInfo.IsEmpty
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  name: IsEmpty
  nameWithType: IRangeInfo.IsEmpty
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.IsEmpty
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsMulti*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsMulti
  name: IsMulti
  nameWithType: RangeInfo.IsMulti
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsMulti
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.IsMulti
  commentId: P:OfficeOpenXml.FormulaParsing.IRangeInfo.IsMulti
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  name: IsMulti
  nameWithType: IRangeInfo.IsMulti
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.IsMulti
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Size*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Size
  name: Size
  nameWithType: RangeInfo.Size
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Size
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.Size
  commentId: P:OfficeOpenXml.FormulaParsing.IRangeInfo.Size
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  name: Size
  nameWithType: IRangeInfo.Size
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.Size
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeDefinition
  commentId: T:OfficeOpenXml.FormulaParsing.Ranges.RangeDefinition
  parent: OfficeOpenXml.FormulaParsing.Ranges
  name: RangeDefinition
  nameWithType: RangeDefinition
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeDefinition
- uid: OfficeOpenXml.FormulaParsing.Ranges.InMemoryRange
  commentId: T:OfficeOpenXml.FormulaParsing.Ranges.InMemoryRange
  isExternal: true
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsInMemoryRange*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsInMemoryRange
  name: IsInMemoryRange
  nameWithType: RangeInfo.IsInMemoryRange
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsInMemoryRange
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.IsInMemoryRange
  commentId: P:OfficeOpenXml.FormulaParsing.IRangeInfo.IsInMemoryRange
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  name: IsInMemoryRange
  nameWithType: IRangeInfo.IsInMemoryRange
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.IsInMemoryRange
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Current*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Current
  name: Current
  nameWithType: RangeInfo.Current
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Current
- uid: System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}.Current
  commentId: P:System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}.Current
  parent: System.Collections.Generic.IEnumerator{OfficeOpenXml.FormulaParsing.ICellInfo}
  definition: System.Collections.Generic.IEnumerator`1.Current
  name: Current
  nameWithType: IEnumerator<ICellInfo>.Current
  fullName: System.Collections.Generic.IEnumerator<OfficeOpenXml.FormulaParsing.ICellInfo>.Current
  nameWithType.vb: IEnumerator(Of ICellInfo).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of OfficeOpenXml.FormulaParsing.ICellInfo).Current
- uid: OfficeOpenXml.FormulaParsing.ICellInfo
  commentId: T:OfficeOpenXml.FormulaParsing.ICellInfo
  parent: OfficeOpenXml.FormulaParsing
  name: ICellInfo
  nameWithType: ICellInfo
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo
- uid: System.Collections.Generic.IEnumerator`1.Current
  commentId: P:System.Collections.Generic.IEnumerator`1.Current
  isExternal: true
  name: Current
  nameWithType: IEnumerator<T>.Current
  fullName: System.Collections.Generic.IEnumerator<T>.Current
  nameWithType.vb: IEnumerator(Of T).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of T).Current
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Worksheet*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Worksheet
  name: Worksheet
  nameWithType: RangeInfo.Worksheet
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Worksheet
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.Worksheet
  commentId: P:OfficeOpenXml.FormulaParsing.IRangeInfo.Worksheet
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  name: Worksheet
  nameWithType: IRangeInfo.Worksheet
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.Worksheet
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dimension*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dimension
  name: Dimension
  nameWithType: RangeInfo.Dimension
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dimension
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.Dimension
  commentId: P:OfficeOpenXml.FormulaParsing.IRangeInfo.Dimension
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  name: Dimension
  nameWithType: IRangeInfo.Dimension
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.Dimension
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dispose*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dispose
  name: Dispose
  nameWithType: RangeInfo.Dispose
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System#Collections#IEnumerator#Current*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System#Collections#IEnumerator#Current
  name: IEnumerator.Current
  nameWithType: RangeInfo.IEnumerator.Current
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System.Collections.IEnumerator.Current
  nameWithType.vb: RangeInfo.System.Collections.IEnumerator.Current
  name.vb: System.Collections.IEnumerator.Current
- uid: System.Collections.IEnumerator.Current
  commentId: P:System.Collections.IEnumerator.Current
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Current
  nameWithType: IEnumerator.Current
  fullName: System.Collections.IEnumerator.Current
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.MoveNext*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.MoveNext
  name: MoveNext
  nameWithType: RangeInfo.MoveNext
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.MoveNext
- uid: System.Collections.IEnumerator.MoveNext
  commentId: M:System.Collections.IEnumerator.MoveNext
  parent: System.Collections.IEnumerator
  isExternal: true
  name: MoveNext()
  nameWithType: IEnumerator.MoveNext()
  fullName: System.Collections.IEnumerator.MoveNext()
  spec.csharp:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Reset*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Reset
  name: Reset
  nameWithType: RangeInfo.Reset
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Reset
- uid: System.Collections.IEnumerator.Reset
  commentId: M:System.Collections.IEnumerator.Reset
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Reset()
  nameWithType: IEnumerator.Reset()
  fullName: System.Collections.IEnumerator.Reset()
  spec.csharp:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.NextCell*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.NextCell
  name: NextCell
  nameWithType: RangeInfo.NextCell
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.NextCell
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetEnumerator*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetEnumerator
  name: GetEnumerator
  nameWithType: RangeInfo.GetEnumerator
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ICellInfo}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ICellInfo}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ICellInfo}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<ICellInfo>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ICellInfo>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of ICellInfo).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ICellInfo).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<ICellInfo>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ICellInfo>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of ICellInfo).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ICellInfo).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: RangeInfo.IEnumerable.GetEnumerator
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: RangeInfo.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Address*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Address
  name: Address
  nameWithType: RangeInfo.Address
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.Address
- uid: OfficeOpenXml.FormulaParsing.IAddressInfo.Address
  commentId: P:OfficeOpenXml.FormulaParsing.IAddressInfo.Address
  parent: OfficeOpenXml.FormulaParsing.IAddressInfo
  name: Address
  nameWithType: IAddressInfo.Address
  fullName: OfficeOpenXml.FormulaParsing.IAddressInfo.Address
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetValue*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetValue
  name: GetValue
  nameWithType: RangeInfo.GetValue
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetValue
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue(System.Int32,System.Int32)
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  isExternal: true
  name: GetValue(Int32, Int32)
  nameWithType: IRangeInfo.GetValue(Int32, Int32)
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue(System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue(System.Int32,System.Int32)
    name: GetValue
    nameWithType: IRangeInfo.GetValue
    fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue(System.Int32,System.Int32)
    name: GetValue
    nameWithType: IRangeInfo.GetValue
    fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetOffset*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetOffset
  name: GetOffset
  nameWithType: RangeInfo.GetOffset
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.GetOffset
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32)
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  isExternal: true
  name: GetOffset(Int32, Int32)
  nameWithType: IRangeInfo.GetOffset(Int32, Int32)
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32)
    name: GetOffset
    nameWithType: IRangeInfo.GetOffset
    fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32)
    name: GetOffset
    nameWithType: IRangeInfo.GetOffset
    fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  isExternal: true
  name: GetOffset(Int32, Int32, Int32, Int32)
  nameWithType: IRangeInfo.GetOffset(Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32, System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32,System.Int32,System.Int32)
    name: GetOffset
    nameWithType: IRangeInfo.GetOffset
    fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32,System.Int32,System.Int32)
    name: GetOffset
    nameWithType: IRangeInfo.GetOffset
    fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsHidden*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsHidden
  name: IsHidden
  nameWithType: RangeInfo.IsHidden
  fullName: OfficeOpenXml.FormulaParsing.Ranges.RangeInfo.IsHidden
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo.IsHidden(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.IRangeInfo.IsHidden(System.Int32,System.Int32)
  parent: OfficeOpenXml.FormulaParsing.IRangeInfo
  isExternal: true
  name: IsHidden(Int32, Int32)
  nameWithType: IRangeInfo.IsHidden(Int32, Int32)
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.IsHidden(System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.IRangeInfo.IsHidden(System.Int32,System.Int32)
    name: IsHidden
    nameWithType: IRangeInfo.IsHidden
    fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.IsHidden
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.IRangeInfo.IsHidden(System.Int32,System.Int32)
    name: IsHidden
    nameWithType: IRangeInfo.IsHidden
    fullName: OfficeOpenXml.FormulaParsing.IRangeInfo.IsHidden
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
