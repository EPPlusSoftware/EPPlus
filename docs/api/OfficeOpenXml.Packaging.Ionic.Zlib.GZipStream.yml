### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  commentId: T:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  id: GZipStream
  parent: OfficeOpenXml.Packaging.Ionic.Zlib
  children:
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode)
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,System.Boolean)
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.BufferSize
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanRead
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanSeek
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanWrite
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Comment
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Crc32
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Dispose(System.Boolean)
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FileName
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Flush
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FlushMode
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.LastModified
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Length
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Position
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.SetLength(System.Int64)
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalIn
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalOut
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])
  - OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: GZipStream
  nameWithType: GZipStream
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  type: Class
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GZipStream
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 85
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nA class for compressing and decompressing GZIP streams.\n"
  remarks: "\n\n<p>\n  The <code>GZipStream</code> is a <a href=\"http://en.wikipedia.org/wiki/Decorator_pattern\">Decorator</a> on a\n<xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. It adds GZIP compression or decompression to any\nstream.\n</p>\n\n<p>\n  Like the <code>System.IO.Compression.GZipStream</code> in the .NET Base Class Library, the\n<code>Ionic.Zlib.GZipStream</code> can compress while writing, or decompress while\nreading, but not vice versa.  The compression method used is GZIP, which is\ndocumented in <a href=\"http://www.ietf.org/rfc/rfc1952.txt\">IETF RFC\n1952</a>, &quot;GZIP file format specification version 4.3&quot;.</p>\n\n<p>\n  A <code>GZipStream</code> can be used to decompress data (through <code>Read()</code>) or\n  to compress data (through <code>Write()</code>), but not both.\n</p>\n\n<p>\n  If you wish to use the <code>GZipStream</code> to compress data, you must wrap it\n  around a write-able stream. As you call <code>Write()</code> on the <code>GZipStream</code>, the\n  data will be compressed into the GZIP format.  If you want to decompress data,\n  you must wrap the <code>GZipStream</code> around a readable stream that contains an\n  IETF RFC 1952-compliant stream.  The data will be decompressed as you call\n<code>Read()</code> on the <code>GZipStream</code>.\n</p>\n\n<p>\n  Though the GZIP format allows data from multiple files to be concatenated\n  together, this stream handles only a single segment of GZIP format, typically\n  representing a single file.\n</p>\n\n<p>\n  This class is similar to <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream\" data-throw-if-not-resolved=\"false\"></xref>.\n<code>ZlibStream</code> handles RFC1950-compliant streams.  <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream\" data-throw-if-not-resolved=\"false\"></xref>\nhandles RFC1951-compliant streams. This class handles RFC1952-compliant streams.\n</p>\n\n"
  example: []
  syntax:
    content: 'public class GZipStream : Stream, IAsyncDisposable, IDisposable'
    content.vb: >-
      Public Class GZipStream
          Inherits Stream
          Implements IAsyncDisposable, IDisposable
  seealso:
  - linkId: OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream
    commentId: T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream
  - linkId: OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream
    commentId: T:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.IO.Stream
  implements:
  - System.IAsyncDisposable
  - System.IDisposable
  inheritedMembers:
  - System.IO.Stream.Null
  - System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Stream.Close
  - System.IO.Stream.CopyTo(System.IO.Stream)
  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)
  - System.IO.Stream.CreateWaitHandle
  - System.IO.Stream.Dispose
  - System.IO.Stream.DisposeAsync
  - System.IO.Stream.EndRead(System.IAsyncResult)
  - System.IO.Stream.EndWrite(System.IAsyncResult)
  - System.IO.Stream.FlushAsync
  - System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.Stream.ObjectInvariant
  - System.IO.Stream.Read(System.Span{System.Byte})
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
  - System.IO.Stream.ReadAtLeast(System.Span{System.Byte},System.Int32,System.Boolean)
  - System.IO.Stream.ReadAtLeastAsync(System.Memory{System.Byte},System.Int32,System.Boolean,System.Threading.CancellationToken)
  - System.IO.Stream.ReadByte
  - System.IO.Stream.ReadExactly(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.ReadExactly(System.Span{System.Byte})
  - System.IO.Stream.ReadExactlyAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.ReadExactlyAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
  - System.IO.Stream.Synchronized(System.IO.Stream)
  - System.IO.Stream.ValidateBufferArguments(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.ValidateCopyToArguments(System.IO.Stream,System.Int32)
  - System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
  - System.IO.Stream.WriteByte(System.Byte)
  - System.IO.Stream.CanTimeout
  - System.IO.Stream.ReadTimeout
  - System.IO.Stream.WriteTimeout
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Comment
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Comment
  id: Comment
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: Comment
  nameWithType: GZipStream.Comment
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Comment
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Comment
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 145
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThe comment on the GZIP stream.\n"
  remarks: "\n<p>\n  The GZIP format allows for each file to optionally have an associated\n  comment stored with the file.  The comment is encoded with the ISO-8859-1\n  code page.  To include a comment in a GZIP stream you create, set this\n  property before calling <code>Write()</code> for the first time on the\n<code>GZipStream</code>.\n</p>\n\n<p>\n  When using <code>GZipStream</code> to decompress, you can retrieve this property\n  after the first call to <code>Read()</code>.  If no comment has been set in the\n  GZIP bytestream, the Comment property will return <code>null</code>\n  (<code>Nothing</code> in VB).\n</p>\n"
  example: []
  syntax:
    content: public string Comment { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Comment As String
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Comment*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FileName
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FileName
  id: FileName
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: FileName
  nameWithType: GZipStream.FileName
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FileName
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FileName
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 181
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThe FileName for the GZIP stream.\n"
  remarks: "\n\n<p>\n  The GZIP format optionally allows each file to have an associated\n  filename.  When compressing data (through <code>Write()</code>), set this\n  FileName before calling <code>Write()</code> the first time on the <code>GZipStream</code>.\n  The actual filename is encoded into the GZIP bytestream with the\n  ISO-8859-1 code page, according to RFC 1952. It is the application&apos;s\n  responsibility to insure that the FileName can be encoded and decoded\n  correctly with this code page.\n</p>\n\n<p>\n  When decompressing (through <code>Read()</code>), you can retrieve this value\n  any time after the first <code>Read()</code>.  In the case where there was no filename\n  encoded into the GZIP bytestream, the property will return <code>null</code> (<code>Nothing</code>\n  in VB).\n</p>\n"
  example: []
  syntax:
    content: public string FileName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property FileName As String
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FileName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.LastModified
  commentId: F:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.LastModified
  id: LastModified
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: LastModified
  nameWithType: GZipStream.LastModified
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.LastModified
  type: Field
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LastModified
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 213
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThe last modified time for the GZIP stream.\n"
  remarks: "\nGZIP allows the storage of a last modified time with each GZIP entry.\nWhen compressing data, you can set this before the first call to\n<code>Write()</code>.  When decompressing, you can retrieve this value any time\nafter the first call to <code>Read()</code>.\n"
  example: []
  syntax:
    content: public DateTime? LastModified
    return:
      type: System.Nullable{System.DateTime}
    content.vb: Public LastModified As Date?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Crc32
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Crc32
  id: Crc32
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: Crc32
  nameWithType: GZipStream.Crc32
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Crc32
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Crc32
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 221
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThe CRC on the GZIP stream.\n"
  remarks: "\nThis is used for internal error checking. You probably don&apos;t need to look at this property.\n"
  example: []
  syntax:
    content: public int Crc32 { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Crc32 As Integer
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Crc32*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode)
  id: '#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode)'
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: GZipStream(Stream, CompressionMode)
  nameWithType: GZipStream.GZipStream(Stream, CompressionMode)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.GZipStream(System.IO.Stream, OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 346
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nCreate a <code>GZipStream</code> using the specified <code>CompressionMode</code>.\n"
  remarks: "\n\n<p>\n  When mode is <code>CompressionMode.Compress</code>, the <code>GZipStream</code> will use the\n  default compression level.\n</p>\n\n<p>\n  As noted in the class documentation, the <code>CompressionMode</code> (Compress\n  or Decompress) also establishes the &quot;direction&quot; of the stream.  A\n<code>GZipStream</code> with <code>CompressionMode.Compress</code> works only through\n<code>Write()</code>.  A <code>GZipStream</code> with\n<code>CompressionMode.Decompress</code> works only through <code>Read()</code>.\n</p>\n\n"
  example:
  - "\nThis example shows how to use a GZipStream to compress data.\n<pre><code>using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))\n{\n    using (var raw = System.IO.File.Create(outputFile))\n    {\n        using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))\n        {\n            byte[] buffer = new byte[WORKING_BUFFER_SIZE];\n            int n;\n            while ((n= input.Read(buffer, 0, buffer.Length)) != 0)\n            {\n                compressor.Write(buffer, 0, n);\n            }\n        }\n    }\n}</code></pre>\n<pre><code>Dim outputFile As String = (fileToCompress &amp; &quot;.compressed&quot;)\nUsing input As Stream = File.OpenRead(fileToCompress)\n    Using raw As FileStream = File.Create(outputFile)\n    Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)\n        Dim buffer As Byte() = New Byte(4096) {}\n        Dim n As Integer = -1\n        Do While (n &lt;> 0)\n            If (n > 0) Then\n                compressor.Write(buffer, 0, n)\n            End If\n            n = input.Read(buffer, 0, buffer.Length)\n        Loop\n    End Using\n    End Using\nEnd Using</code></pre>\n"
  - "\nThis example shows how to use a GZipStream to uncompress a file.\n<pre><code>private void GunZipFile(string filename)\n{\n    if (!filename.EndsWith(&quot;.gz))\n        throw new ArgumentException(&quot;filename&quot;);\n    var DecompressedFile = filename.Substring(0,filename.Length-3);\n    byte[] working = new byte[WORKING_BUFFER_SIZE];\n    int n= 1;\n    using (System.IO.Stream input = System.IO.File.OpenRead(filename))\n    {\n        using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))\n        {\n            using (var output = System.IO.File.Create(DecompressedFile))\n            {\n                while (n !=0)\n                {\n                    n= decompressor.Read(working, 0, working.Length);\n                    if (n > 0)\n                    {\n                        output.Write(working, 0, n);\n                    }\n                }\n            }\n        }\n    }\n}</code></pre>\n\n<pre><code>Private Sub GunZipFile(ByVal filename as String)\n    If Not (filename.EndsWith(&quot;.gz)) Then\n        Throw New ArgumentException(&quot;filename&quot;)\n    End If\n    Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)\n    Dim working(WORKING_BUFFER_SIZE) as Byte\n    Dim n As Integer = 1\n    Using input As Stream = File.OpenRead(filename)\n        Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)\n            Using output As Stream = File.Create(UncompressedFile)\n                Do\n                    n= decompressor.Read(working, 0, working.Length)\n                    If n > 0 Then\n                        output.Write(working, 0, n)\n                    End IF\n                Loop While (n  > 0)\n            End Using\n        End Using\n    End Using\nEnd Sub</code></pre>\n"
  syntax:
    content: public GZipStream(Stream stream, CompressionMode mode)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream which will be read or written.
    - id: mode
      type: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode
      description: Indicates whether the GZipStream will compress or decompress.
    content.vb: Public Sub New(stream As Stream, mode As CompressionMode)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)
  id: '#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)'
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: GZipStream(Stream, CompressionMode, CompressionLevel)
  nameWithType: GZipStream.GZipStream(Stream, CompressionMode, CompressionLevel)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.GZipStream(System.IO.Stream, OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode, OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 411
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nCreate a <code>GZipStream</code> using the specified <code>CompressionMode</code> and\nthe specified <code>CompressionLevel</code>.\n"
  remarks: "\n\n<p>\n  The <code>CompressionMode</code> (Compress or Decompress) also establishes the\n  &quot;direction&quot; of the stream.  A <code>GZipStream</code> with\n<code>CompressionMode.Compress</code> works only through <code>Write()</code>.  A\n<code>GZipStream</code> with <code>CompressionMode.Decompress</code> works only\nthrough <code>Read()</code>.\n</p>\n\n"
  example:
  - "\n\nThis example shows how to use a <code>GZipStream</code> to compress a file into a .gz file.\n\n<pre><code>using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))\n{\n    using (var raw = System.IO.File.Create(fileToCompress + &quot;.gz&quot;))\n    {\n        using (Stream compressor = new GZipStream(raw,\n                                                  CompressionMode.Compress,\n                                                  CompressionLevel.BestCompression))\n        {\n            byte[] buffer = new byte[WORKING_BUFFER_SIZE];\n            int n;\n            while ((n= input.Read(buffer, 0, buffer.Length)) != 0)\n            {\n                compressor.Write(buffer, 0, n);\n            }\n        }\n    }\n}</code></pre>\n\n<pre><code>Using input As Stream = File.OpenRead(fileToCompress)\n    Using raw As FileStream = File.Create(fileToCompress &amp; &quot;.gz&quot;)\n        Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)\n            Dim buffer As Byte() = New Byte(4096) {}\n            Dim n As Integer = -1\n            Do While (n &lt;> 0)\n                If (n > 0) Then\n                    compressor.Write(buffer, 0, n)\n                End If\n                n = input.Read(buffer, 0, buffer.Length)\n            Loop\n        End Using\n    End Using\nEnd Using</code></pre>\n"
  syntax:
    content: public GZipStream(Stream stream, CompressionMode mode, CompressionLevel level)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream to be read or written while deflating or inflating.
    - id: mode
      type: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode
      description: Indicates whether the <code>GZipStream</code> will compress or decompress.
    - id: level
      type: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel
      description: A tuning knob to trade speed for effectiveness.
    content.vb: Public Sub New(stream As Stream, mode As CompressionMode, level As CompressionLevel)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,System.Boolean)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,System.Boolean)
  id: '#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,System.Boolean)'
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: GZipStream(Stream, CompressionMode, Boolean)
  nameWithType: GZipStream.GZipStream(Stream, CompressionMode, Boolean)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.GZipStream(System.IO.Stream, OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 464
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nCreate a <code>GZipStream</code> using the specified <code>CompressionMode</code>, and\nexplicitly specify whether the stream should be left open after Deflation\nor Inflation.\n"
  remarks: "\n<p>\n  This constructor allows the application to request that the captive stream\n  remain open after the deflation or inflation occurs.  By default, after\n<code>Close()</code> is called on the stream, the captive stream is also\nclosed. In some cases this is not desired, for example if the stream is a\nmemory stream that will be re-read after compressed data has been written\nto it.  Specify true for the <code data-dev-comment-type=\"paramref\" class=\"paramref\">leaveOpen</code> parameter to leave\nthe stream open.\n</p>\n\n<p>\n  The <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode\" data-throw-if-not-resolved=\"false\"></xref> (Compress or Decompress) also\n  establishes the &quot;direction&quot; of the stream.  A <code>GZipStream</code> with\n<code>CompressionMode.Compress</code> works only through <code>Write()</code>.  A <code>GZipStream</code>\nwith <code>CompressionMode.Decompress</code> works only through <code>Read()</code>.\n</p>\n\n<p>\n  The <code>GZipStream</code> will use the default compression level. If you want\n  to specify the compression level, see <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.%23ctor(System.IO.Stream%2cOfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode%2cOfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n\n<p>\n  See the other overloads of this constructor for example code.\n</p>\n\n"
  example: []
  syntax:
    content: public GZipStream(Stream stream, CompressionMode mode, bool leaveOpen)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\nThe stream which will be read or written. This is called the &quot;captive&quot;\nstream in other places in this documentation.\n"
    - id: mode
      type: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode
      description: >
        Indicates whether the GZipStream will compress or decompress.
    - id: leaveOpen
      type: System.Boolean
      description: "\ntrue if the application would like the base stream to remain open after\ninflation/deflation.\n"
    content.vb: Public Sub New(stream As Stream, mode As CompressionMode, leaveOpen As Boolean)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)
  id: '#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)'
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: GZipStream(Stream, CompressionMode, CompressionLevel, Boolean)
  nameWithType: GZipStream.GZipStream(Stream, CompressionMode, CompressionLevel, Boolean)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.GZipStream(System.IO.Stream, OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode, OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 538
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nCreate a <code>GZipStream</code> using the specified <code>CompressionMode</code> and the\nspecified <code>CompressionLevel</code>, and explicitly specify whether the\nstream should be left open after Deflation or Inflation.\n"
  remarks: "\n\n<p>\n  This constructor allows the application to request that the captive stream\n  remain open after the deflation or inflation occurs.  By default, after\n<code>Close()</code> is called on the stream, the captive stream is also\nclosed. In some cases this is not desired, for example if the stream is a\nmemory stream that will be re-read after compressed data has been written\nto it.  Specify true for the <code data-dev-comment-type=\"paramref\" class=\"paramref\">leaveOpen</code> parameter to\nleave the stream open.\n</p>\n\n<p>\n  As noted in the class documentation, the <code>CompressionMode</code> (Compress\n  or Decompress) also establishes the &quot;direction&quot; of the stream.  A\n<code>GZipStream</code> with <code>CompressionMode.Compress</code> works only through\n<code>Write()</code>.  A <code>GZipStream</code> with <code>CompressionMode.Decompress</code> works only\nthrough <code>Read()</code>.\n</p>\n\n"
  example:
  - "\nThis example shows how to use a <code>GZipStream</code> to compress data.\n<pre><code>using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))\n{\n    using (var raw = System.IO.File.Create(outputFile))\n    {\n        using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))\n        {\n            byte[] buffer = new byte[WORKING_BUFFER_SIZE];\n            int n;\n            while ((n= input.Read(buffer, 0, buffer.Length)) != 0)\n            {\n                compressor.Write(buffer, 0, n);\n            }\n        }\n    }\n}</code></pre>\n<pre><code>Dim outputFile As String = (fileToCompress &amp; &quot;.compressed&quot;)\nUsing input As Stream = File.OpenRead(fileToCompress)\n    Using raw As FileStream = File.Create(outputFile)\n    Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)\n        Dim buffer As Byte() = New Byte(4096) {}\n        Dim n As Integer = -1\n        Do While (n &lt;> 0)\n            If (n > 0) Then\n                compressor.Write(buffer, 0, n)\n            End If\n            n = input.Read(buffer, 0, buffer.Length)\n        Loop\n    End Using\n    End Using\nEnd Using</code></pre>\n"
  syntax:
    content: public GZipStream(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream which will be read or written.
    - id: mode
      type: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode
      description: Indicates whether the GZipStream will compress or decompress.
    - id: level
      type: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel
      description: A tuning knob to trade speed for effectiveness.
    - id: leaveOpen
      type: System.Boolean
      description: true if the application would like the stream to remain open after inflation/deflation.
    content.vb: Public Sub New(stream As Stream, mode As CompressionMode, level As CompressionLevel, leaveOpen As Boolean)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FlushMode
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FlushMode
  id: FlushMode
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: FlushMode
  nameWithType: GZipStream.FlushMode
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FlushMode
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FlushMode
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 548
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThis property sets the flush behavior on the stream.\n"
  example: []
  syntax:
    content: public virtual FlushType FlushMode { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.Packaging.Ionic.Zlib.FlushType
    content.vb: Public Overridable Property FlushMode As FlushType
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FlushMode*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.BufferSize
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.BufferSize
  id: BufferSize
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: BufferSize
  nameWithType: GZipStream.BufferSize
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.BufferSize
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: BufferSize
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 574
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThe size of the working buffer for the compression codec.\n"
  remarks: "\n<p>\n  The working buffer is used for all stream operations.  The default size is\n  1024 bytes.  The minimum size is 128 bytes. You may get better performance\n  with a larger buffer.  Then again, you might not.  You would have to test\n  it.\n</p>\n\n<p>\n  Set this before the first call to <code>Read()</code> or <code>Write()</code> on the\n  stream. If you try to set it afterwards, it will throw.\n</p>\n"
  example: []
  syntax:
    content: public int BufferSize { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property BufferSize As Integer
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.BufferSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalIn
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalIn
  id: TotalIn
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: TotalIn
  nameWithType: GZipStream.TotalIn
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalIn
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: TotalIn
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 593
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: Returns the total number of bytes input so far.
  example: []
  syntax:
    content: public virtual long TotalIn { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Overridable ReadOnly Property TotalIn As Long
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalIn*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalOut
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalOut
  id: TotalOut
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: TotalOut
  nameWithType: GZipStream.TotalOut
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalOut
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: TotalOut
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 602
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: Returns the total number of bytes output so far.
  example: []
  syntax:
    content: public virtual long TotalOut { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Overridable ReadOnly Property TotalOut As Long
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalOut*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Dispose(System.Boolean)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: GZipStream.Dispose(Boolean)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Dispose
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 637
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nDispose the stream.\n"
  remarks: "\n<p>\n  This may or may not result in a <code>Close()</code> call on the captive\n  stream.  See the constructors that have a <code>leaveOpen</code> parameter\n  for more information.\n</p>\n<p>\n  This method may be invoked in two distinct scenarios.  If disposing\n  == true, the method has been called directly or indirectly by a\n  user&apos;s code, for example via the public Dispose() method. In this\n  case, both managed and unmanaged resources can be referenced and\n  disposed.  If disposing == false, the method has been called by the\n  runtime from inside the object finalizer and this method should not\n  reference other objects; in that case only unmanaged resources must\n  be referenced or disposed.\n</p>\n"
  example: []
  syntax:
    content: protected override void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\nindicates whether the Dispose method was invoked by user code.\n"
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
  overridden: System.IO.Stream.Dispose(System.Boolean)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Dispose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanRead
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanRead
  id: CanRead
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: CanRead
  nameWithType: GZipStream.CanRead
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanRead
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CanRead
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 664
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nIndicates whether the stream can be read.\n"
  remarks: "\nThe return value depends on whether the captive stream supports reading.\n"
  example: []
  syntax:
    content: public override bool CanRead { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
  overridden: System.IO.Stream.CanRead
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanRead*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanSeek
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanSeek
  id: CanSeek
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: CanSeek
  nameWithType: GZipStream.CanSeek
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanSeek
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CanSeek
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 679
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nIndicates whether the stream supports Seek operations.\n"
  remarks: "\nAlways returns false.\n"
  example: []
  syntax:
    content: public override bool CanSeek { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
  overridden: System.IO.Stream.CanSeek
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanSeek*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanWrite
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanWrite
  id: CanWrite
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: CanWrite
  nameWithType: GZipStream.CanWrite
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanWrite
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CanWrite
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 691
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nIndicates whether the stream can be written.\n"
  remarks: "\nThe return value depends on whether the captive stream supports writing.\n"
  example: []
  syntax:
    content: public override bool CanWrite { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
  overridden: System.IO.Stream.CanWrite
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanWrite*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Flush
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Flush
  id: Flush
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: Flush()
  nameWithType: GZipStream.Flush()
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Flush()
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Flush
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 703
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nFlush the stream.\n"
  example: []
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  overridden: System.IO.Stream.Flush
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Flush*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Length
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Length
  id: Length
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: GZipStream.Length
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Length
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Length
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 712
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nReading this property always throws a <xref href=\"System.NotImplementedException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override long Length { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Overrides ReadOnly Property Length As Long
  overridden: System.IO.Stream.Length
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Length*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Position
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Position
  id: Position
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: GZipStream.Position
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Position
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Position
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 728
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThe position of the stream pointer.\n"
  remarks: "\nSetting this property always throws a <xref href=\"System.NotImplementedException\" data-throw-if-not-resolved=\"false\"></xref>. Reading will return the total bytes\nwritten out, if used in writing, or the total bytes read in, if used in\nreading.  The count may refer to compressed bytes or uncompressed bytes,\ndepending on how you&apos;ve used the stream.\n"
  example: []
  syntax:
    content: public override long Position { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Overrides Property Position As Long
  overridden: System.IO.Stream.Position
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Position*
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  nameWithType: GZipStream.Read(Byte[], Int32, Int32)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Read
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 773
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nRead and decompress data from the source stream.\n"
  remarks: "\nWith a <code>GZipStream</code>, decompression is done through reading.\n"
  example:
  - "\n<pre><code>byte[] working = new byte[WORKING_BUFFER_SIZE];\nusing (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))\n{\n    using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))\n    {\n        using (var output = System.IO.File.Create(_DecompressedFile))\n        {\n            int n;\n            while ((n= decompressor.Read(working, 0, working.Length)) !=0)\n            {\n                output.Write(working, 0, n);\n            }\n        }\n    }\n}</code></pre>\n"
  syntax:
    content: public override int Read(byte[] buffer, int offset, int count)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer into which the decompressed data should be placed.
    - id: offset
      type: System.Int32
      description: the offset within that data array to put the first byte read.
    - id: count
      type: System.Int32
      description: the number of bytes to read.
    return:
      type: System.Int32
      description: the number of bytes actually read
    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer
  overridden: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Read*
  nameWithType.vb: GZipStream.Read(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, SeekOrigin)
  nameWithType: GZipStream.Seek(Int64, SeekOrigin)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Seek
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 798
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nCalling this method always throws a <xref href=\"System.NotImplementedException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override long Seek(long offset, SeekOrigin origin)
    parameters:
    - id: offset
      type: System.Int64
      description: irrelevant; it will always throw!
    - id: origin
      type: System.IO.SeekOrigin
      description: irrelevant; it will always throw!
    return:
      type: System.Int64
      description: irrelevant!
    content.vb: Public Overrides Function Seek(offset As Long, origin As SeekOrigin) As Long
  overridden: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Seek*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.SetLength(System.Int64)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  nameWithType: GZipStream.SetLength(Int64)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SetLength
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 807
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nCalling this method always throws a <xref href=\"System.NotImplementedException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override void SetLength(long value)
    parameters:
    - id: value
      type: System.Int64
      description: irrelevant; this method will always throw!
    content.vb: Public Overrides Sub SetLength(value As Long)
  overridden: System.IO.Stream.SetLength(System.Int64)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.SetLength*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  nameWithType: GZipStream.Write(Byte[], Int32, Int32)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Write
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 834
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nWrite data to the stream.\n"
  remarks: "\n<p>\n  If you wish to use the <code>GZipStream</code> to compress data while writing,\n  you can create a <code>GZipStream</code> with <code>CompressionMode.Compress</code>, and a\n  writable output stream.  Then call <code>Write()</code> on that <code>GZipStream</code>,\n  providing uncompressed data as input.  The data sent to the output stream\n  will be the compressed form of the data written.\n</p>\n\n<p>\n  A <code>GZipStream</code> can be used for <code>Read()</code> or <code>Write()</code>, but not\n  both. Writing implies compression.  Reading implies decompression.\n</p>\n\n"
  example: []
  syntax:
    content: public override void Write(byte[] buffer, int offset, int count)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer holding data to write to the stream.
    - id: offset
      type: System.Int32
      description: the offset within that data array to find the first byte to write.
    - id: count
      type: System.Int32
      description: the number of bytes to write.
    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)
  overridden: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Write*
  nameWithType.vb: GZipStream.Write(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)
  id: CompressString(System.String)
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: CompressString(String)
  nameWithType: GZipStream.CompressString(String)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CompressString
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 946
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nCompress a string into a byte array using GZip.\n"
  remarks: "\nUncompress it with <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static byte[] CompressString(string s)
    parameters:
    - id: s
      type: System.String
      description: "\nA string to compress. The string will first be encoded\nusing UTF8, then compressed.\n"
    return:
      type: System.Byte[]
      description: The string in compressed form
    content.vb: Public Shared Function CompressString(s As String) As Byte()
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString*
  seealso:
  - linkId: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])
    commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])
  - linkId: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])
    commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])
  id: CompressBuffer(System.Byte[])
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: CompressBuffer(Byte[])
  nameWithType: GZipStream.CompressBuffer(Byte[])
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CompressBuffer
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 974
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nCompress a byte array into a new byte array using GZip.\n"
  remarks: "\nUncompress it with <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static byte[] CompressBuffer(byte[] b)
    parameters:
    - id: b
      type: System.Byte[]
      description: "\nA buffer to compress.\n"
    return:
      type: System.Byte[]
      description: The data in compressed form
    content.vb: Public Shared Function CompressBuffer(b As Byte()) As Byte()
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer*
  seealso:
  - linkId: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)
    commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)
  - linkId: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])
    commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])
  nameWithType.vb: GZipStream.CompressBuffer(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte())
  name.vb: CompressBuffer(Byte())
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])
  id: UncompressString(System.Byte[])
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: UncompressString(Byte[])
  nameWithType: GZipStream.UncompressString(Byte[])
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: UncompressString
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 999
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nUncompress a GZip&apos;ed byte array into a single string.\n"
  example: []
  syntax:
    content: public static string UncompressString(byte[] compressed)
    parameters:
    - id: compressed
      type: System.Byte[]
      description: "\nA buffer containing GZIP-compressed data.\n"
    return:
      type: System.String
      description: The uncompressed string
    content.vb: Public Shared Function UncompressString(compressed As Byte()) As String
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString*
  seealso:
  - linkId: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)
    commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)
  - linkId: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])
    commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])
  nameWithType.vb: GZipStream.UncompressString(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte())
  name.vb: UncompressString(Byte())
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])
  id: UncompressBuffer(System.Byte[])
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream
  langs:
  - csharp
  - vb
  name: UncompressBuffer(Byte[])
  nameWithType: GZipStream.UncompressBuffer(Byte[])
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: UncompressBuffer
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/GZipStream.cs
    startLine: 1021
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nUncompress a GZip&apos;ed byte array into a byte array.\n"
  example: []
  syntax:
    content: public static byte[] UncompressBuffer(byte[] compressed)
    parameters:
    - id: compressed
      type: System.Byte[]
      description: "\nA buffer containing data that has been compressed with GZip.\n"
    return:
      type: System.Byte[]
      description: The data in uncompressed form
    content.vb: Public Shared Function UncompressBuffer(compressed As Byte()) As Byte()
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer*
  seealso:
  - linkId: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])
    commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])
  - linkId: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])
    commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])
  nameWithType.vb: GZipStream.UncompressBuffer(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte())
  name.vb: UncompressBuffer(Byte())
references:
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream
  commentId: T:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream
  name: ZlibStream
  nameWithType: ZlibStream
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream
  commentId: T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream
  name: DeflateStream
  nameWithType: DeflateStream
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream
- uid: OfficeOpenXml.Packaging.Ionic.Zlib
  commentId: N:OfficeOpenXml.Packaging.Ionic.Zlib
  name: OfficeOpenXml.Packaging.Ionic.Zlib
  nameWithType: OfficeOpenXml.Packaging.Ionic.Zlib
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.MarshalByRefObject
  commentId: T:System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: System.IAsyncDisposable
  commentId: T:System.IAsyncDisposable
  parent: System
  isExternal: true
  name: IAsyncDisposable
  nameWithType: IAsyncDisposable
  fullName: System.IAsyncDisposable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.IO.Stream.Null
  commentId: F:System.IO.Stream.Null
  parent: System.IO.Stream
  isExternal: true
  name: "Null"
  nameWithType: Stream.Null
  fullName: System.IO.Stream.Null
- uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  commentId: M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Stream
  isExternal: true
  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)
  nameWithType: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)
  fullName: System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)
  nameWithType.vb: Stream.BeginRead(Byte(), Int32, Int32, AsyncCallback, Object)
  fullName.vb: System.IO.Stream.BeginRead(System.Byte(), System.Int32, System.Int32, System.AsyncCallback, System.Object)
  name.vb: BeginRead(Byte(), Int32, Int32, AsyncCallback, Object)
  spec.csharp:
  - uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginRead
    nameWithType: Stream.BeginRead
    fullName: System.IO.Stream.BeginRead
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginRead
    nameWithType: Stream.BeginRead
    fullName: System.IO.Stream.BeginRead
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  commentId: M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Stream
  isExternal: true
  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)
  nameWithType: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)
  fullName: System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)
  nameWithType.vb: Stream.BeginWrite(Byte(), Int32, Int32, AsyncCallback, Object)
  fullName.vb: System.IO.Stream.BeginWrite(System.Byte(), System.Int32, System.Int32, System.AsyncCallback, System.Object)
  name.vb: BeginWrite(Byte(), Int32, Int32, AsyncCallback, Object)
  spec.csharp:
  - uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginWrite
    nameWithType: Stream.BeginWrite
    fullName: System.IO.Stream.BeginWrite
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginWrite
    nameWithType: Stream.BeginWrite
    fullName: System.IO.Stream.BeginWrite
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.Close
  commentId: M:System.IO.Stream.Close
  parent: System.IO.Stream
  isExternal: true
  name: Close()
  nameWithType: Stream.Close()
  fullName: System.IO.Stream.Close()
  spec.csharp:
  - uid: System.IO.Stream.Close
    name: Close
    nameWithType: Stream.Close
    fullName: System.IO.Stream.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Close
    name: Close
    nameWithType: Stream.Close
    fullName: System.IO.Stream.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyTo(System.IO.Stream)
  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: true
  name: CopyTo(Stream)
  nameWithType: Stream.CopyTo(Stream)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: CopyTo(Stream, Int32)
  nameWithType: Stream.CopyTo(Stream, Int32)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream)
  nameWithType: Stream.CopyToAsync(Stream)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, Int32)
  nameWithType: Stream.CopyToAsync(Stream, Int32)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, Int32, CancellationToken)
  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, CancellationToken)
  nameWithType: Stream.CopyToAsync(Stream, CancellationToken)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CreateWaitHandle
  commentId: M:System.IO.Stream.CreateWaitHandle
  parent: System.IO.Stream
  isExternal: true
  name: CreateWaitHandle()
  nameWithType: Stream.CreateWaitHandle()
  fullName: System.IO.Stream.CreateWaitHandle()
  spec.csharp:
  - uid: System.IO.Stream.CreateWaitHandle
    name: CreateWaitHandle
    nameWithType: Stream.CreateWaitHandle
    fullName: System.IO.Stream.CreateWaitHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CreateWaitHandle
    name: CreateWaitHandle
    nameWithType: Stream.CreateWaitHandle
    fullName: System.IO.Stream.CreateWaitHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.Dispose
  commentId: M:System.IO.Stream.Dispose
  parent: System.IO.Stream
  isExternal: true
  name: Dispose()
  nameWithType: Stream.Dispose()
  fullName: System.IO.Stream.Dispose()
  spec.csharp:
  - uid: System.IO.Stream.Dispose
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Dispose
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.DisposeAsync
  commentId: M:System.IO.Stream.DisposeAsync
  parent: System.IO.Stream
  isExternal: true
  name: DisposeAsync()
  nameWithType: Stream.DisposeAsync()
  fullName: System.IO.Stream.DisposeAsync()
  spec.csharp:
  - uid: System.IO.Stream.DisposeAsync
    name: DisposeAsync
    nameWithType: Stream.DisposeAsync
    fullName: System.IO.Stream.DisposeAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.DisposeAsync
    name: DisposeAsync
    nameWithType: Stream.DisposeAsync
    fullName: System.IO.Stream.DisposeAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.EndRead(System.IAsyncResult)
  commentId: M:System.IO.Stream.EndRead(System.IAsyncResult)
  parent: System.IO.Stream
  isExternal: true
  name: EndRead(IAsyncResult)
  nameWithType: Stream.EndRead(IAsyncResult)
  fullName: System.IO.Stream.EndRead(System.IAsyncResult)
  spec.csharp:
  - uid: System.IO.Stream.EndRead(System.IAsyncResult)
    name: EndRead
    nameWithType: Stream.EndRead
    fullName: System.IO.Stream.EndRead
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.EndRead(System.IAsyncResult)
    name: EndRead
    nameWithType: Stream.EndRead
    fullName: System.IO.Stream.EndRead
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.EndWrite(System.IAsyncResult)
  commentId: M:System.IO.Stream.EndWrite(System.IAsyncResult)
  parent: System.IO.Stream
  isExternal: true
  name: EndWrite(IAsyncResult)
  nameWithType: Stream.EndWrite(IAsyncResult)
  fullName: System.IO.Stream.EndWrite(System.IAsyncResult)
  spec.csharp:
  - uid: System.IO.Stream.EndWrite(System.IAsyncResult)
    name: EndWrite
    nameWithType: Stream.EndWrite
    fullName: System.IO.Stream.EndWrite
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.EndWrite(System.IAsyncResult)
    name: EndWrite
    nameWithType: Stream.EndWrite
    fullName: System.IO.Stream.EndWrite
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.FlushAsync
  commentId: M:System.IO.Stream.FlushAsync
  parent: System.IO.Stream
  isExternal: true
  name: FlushAsync()
  nameWithType: Stream.FlushAsync()
  fullName: System.IO.Stream.FlushAsync()
  spec.csharp:
  - uid: System.IO.Stream.FlushAsync
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.FlushAsync
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: FlushAsync(CancellationToken)
  nameWithType: Stream.FlushAsync(CancellationToken)
  fullName: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ObjectInvariant
  commentId: M:System.IO.Stream.ObjectInvariant
  parent: System.IO.Stream
  isExternal: true
  name: ObjectInvariant()
  nameWithType: Stream.ObjectInvariant()
  fullName: System.IO.Stream.ObjectInvariant()
  spec.csharp:
  - uid: System.IO.Stream.ObjectInvariant
    name: ObjectInvariant
    nameWithType: Stream.ObjectInvariant
    fullName: System.IO.Stream.ObjectInvariant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ObjectInvariant
    name: ObjectInvariant
    nameWithType: Stream.ObjectInvariant
    fullName: System.IO.Stream.ObjectInvariant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.Read(System.Span{System.Byte})
  commentId: M:System.IO.Stream.Read(System.Span{System.Byte})
  parent: System.IO.Stream
  isExternal: true
  name: Read(Span<Byte>)
  nameWithType: Stream.Read(Span<Byte>)
  fullName: System.IO.Stream.Read(System.Span<System.Byte>)
  nameWithType.vb: Stream.Read(Span(Of Byte))
  fullName.vb: System.IO.Stream.Read(System.Span(Of System.Byte))
  name.vb: Read(Span(Of Byte))
  spec.csharp:
  - uid: System.IO.Stream.Read(System.Span{System.Byte})
    name: Read
    nameWithType: Stream.Read
    fullName: System.IO.Stream.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Read(System.Span{System.Byte})
    name: Read
    nameWithType: Stream.Read
    fullName: System.IO.Stream.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Byte[], Int32, Int32)
  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadAsync(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32, CancellationToken)
  fullName.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Memory<Byte>, CancellationToken)
  nameWithType: Stream.ReadAsync(Memory<Byte>, CancellationToken)
  fullName: System.IO.Stream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken)
  nameWithType.vb: Stream.ReadAsync(Memory(Of Byte), CancellationToken)
  fullName.vb: System.IO.Stream.ReadAsync(System.Memory(Of System.Byte), System.Threading.CancellationToken)
  name.vb: ReadAsync(Memory(Of Byte), CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Memory`1
    name: Memory
    nameWithType: Memory
    fullName: System.Memory
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Memory`1
    name: Memory
    nameWithType: Memory
    fullName: System.Memory
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadAtLeast(System.Span{System.Byte},System.Int32,System.Boolean)
  commentId: M:System.IO.Stream.ReadAtLeast(System.Span{System.Byte},System.Int32,System.Boolean)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAtLeast(Span<Byte>, Int32, Boolean)
  nameWithType: Stream.ReadAtLeast(Span<Byte>, Int32, Boolean)
  fullName: System.IO.Stream.ReadAtLeast(System.Span<System.Byte>, System.Int32, System.Boolean)
  nameWithType.vb: Stream.ReadAtLeast(Span(Of Byte), Int32, Boolean)
  fullName.vb: System.IO.Stream.ReadAtLeast(System.Span(Of System.Byte), System.Int32, System.Boolean)
  name.vb: ReadAtLeast(Span(Of Byte), Int32, Boolean)
  spec.csharp:
  - uid: System.IO.Stream.ReadAtLeast(System.Span{System.Byte},System.Int32,System.Boolean)
    name: ReadAtLeast
    nameWithType: Stream.ReadAtLeast
    fullName: System.IO.Stream.ReadAtLeast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAtLeast(System.Span{System.Byte},System.Int32,System.Boolean)
    name: ReadAtLeast
    nameWithType: Stream.ReadAtLeast
    fullName: System.IO.Stream.ReadAtLeast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadAtLeastAsync(System.Memory{System.Byte},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.ReadAtLeastAsync(System.Memory{System.Byte},System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAtLeastAsync(Memory<Byte>, Int32, Boolean, CancellationToken)
  nameWithType: Stream.ReadAtLeastAsync(Memory<Byte>, Int32, Boolean, CancellationToken)
  fullName: System.IO.Stream.ReadAtLeastAsync(System.Memory<System.Byte>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Stream.ReadAtLeastAsync(Memory(Of Byte), Int32, Boolean, CancellationToken)
  fullName.vb: System.IO.Stream.ReadAtLeastAsync(System.Memory(Of System.Byte), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: ReadAtLeastAsync(Memory(Of Byte), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadAtLeastAsync(System.Memory{System.Byte},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: ReadAtLeastAsync
    nameWithType: Stream.ReadAtLeastAsync
    fullName: System.IO.Stream.ReadAtLeastAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Memory`1
    name: Memory
    nameWithType: Memory
    fullName: System.Memory
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAtLeastAsync(System.Memory{System.Byte},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: ReadAtLeastAsync
    nameWithType: Stream.ReadAtLeastAsync
    fullName: System.IO.Stream.ReadAtLeastAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Memory`1
    name: Memory
    nameWithType: Memory
    fullName: System.Memory
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadByte
  commentId: M:System.IO.Stream.ReadByte
  parent: System.IO.Stream
  isExternal: true
  name: ReadByte()
  nameWithType: Stream.ReadByte()
  fullName: System.IO.Stream.ReadByte()
  spec.csharp:
  - uid: System.IO.Stream.ReadByte
    name: ReadByte
    nameWithType: Stream.ReadByte
    fullName: System.IO.Stream.ReadByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadByte
    name: ReadByte
    nameWithType: Stream.ReadByte
    fullName: System.IO.Stream.ReadByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadExactly(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.ReadExactly(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: ReadExactly(Byte[], Int32, Int32)
  nameWithType: Stream.ReadExactly(Byte[], Int32, Int32)
  fullName: System.IO.Stream.ReadExactly(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.ReadExactly(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.ReadExactly(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadExactly(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.ReadExactly(System.Byte[],System.Int32,System.Int32)
    name: ReadExactly
    nameWithType: Stream.ReadExactly
    fullName: System.IO.Stream.ReadExactly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadExactly(System.Byte[],System.Int32,System.Int32)
    name: ReadExactly
    nameWithType: Stream.ReadExactly
    fullName: System.IO.Stream.ReadExactly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadExactly(System.Span{System.Byte})
  commentId: M:System.IO.Stream.ReadExactly(System.Span{System.Byte})
  parent: System.IO.Stream
  isExternal: true
  name: ReadExactly(Span<Byte>)
  nameWithType: Stream.ReadExactly(Span<Byte>)
  fullName: System.IO.Stream.ReadExactly(System.Span<System.Byte>)
  nameWithType.vb: Stream.ReadExactly(Span(Of Byte))
  fullName.vb: System.IO.Stream.ReadExactly(System.Span(Of System.Byte))
  name.vb: ReadExactly(Span(Of Byte))
  spec.csharp:
  - uid: System.IO.Stream.ReadExactly(System.Span{System.Byte})
    name: ReadExactly
    nameWithType: Stream.ReadExactly
    fullName: System.IO.Stream.ReadExactly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadExactly(System.Span{System.Byte})
    name: ReadExactly
    nameWithType: Stream.ReadExactly
    fullName: System.IO.Stream.ReadExactly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadExactlyAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.ReadExactlyAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadExactlyAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: Stream.ReadExactlyAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.Stream.ReadExactlyAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType.vb: Stream.ReadExactlyAsync(Byte(), Int32, Int32, CancellationToken)
  fullName.vb: System.IO.Stream.ReadExactlyAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadExactlyAsync(Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadExactlyAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadExactlyAsync
    nameWithType: Stream.ReadExactlyAsync
    fullName: System.IO.Stream.ReadExactlyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadExactlyAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadExactlyAsync
    nameWithType: Stream.ReadExactlyAsync
    fullName: System.IO.Stream.ReadExactlyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadExactlyAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.ReadExactlyAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadExactlyAsync(Memory<Byte>, CancellationToken)
  nameWithType: Stream.ReadExactlyAsync(Memory<Byte>, CancellationToken)
  fullName: System.IO.Stream.ReadExactlyAsync(System.Memory<System.Byte>, System.Threading.CancellationToken)
  nameWithType.vb: Stream.ReadExactlyAsync(Memory(Of Byte), CancellationToken)
  fullName.vb: System.IO.Stream.ReadExactlyAsync(System.Memory(Of System.Byte), System.Threading.CancellationToken)
  name.vb: ReadExactlyAsync(Memory(Of Byte), CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadExactlyAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
    name: ReadExactlyAsync
    nameWithType: Stream.ReadExactlyAsync
    fullName: System.IO.Stream.ReadExactlyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Memory`1
    name: Memory
    nameWithType: Memory
    fullName: System.Memory
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadExactlyAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
    name: ReadExactlyAsync
    nameWithType: Stream.ReadExactlyAsync
    fullName: System.IO.Stream.ReadExactlyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Memory`1
    name: Memory
    nameWithType: Memory
    fullName: System.Memory
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.Synchronized(System.IO.Stream)
  commentId: M:System.IO.Stream.Synchronized(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: true
  name: Synchronized(Stream)
  nameWithType: Stream.Synchronized(Stream)
  fullName: System.IO.Stream.Synchronized(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.Synchronized(System.IO.Stream)
    name: Synchronized
    nameWithType: Stream.Synchronized
    fullName: System.IO.Stream.Synchronized
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Synchronized(System.IO.Stream)
    name: Synchronized
    nameWithType: Stream.Synchronized
    fullName: System.IO.Stream.Synchronized
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ValidateBufferArguments(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.ValidateBufferArguments(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: ValidateBufferArguments(Byte[], Int32, Int32)
  nameWithType: Stream.ValidateBufferArguments(Byte[], Int32, Int32)
  fullName: System.IO.Stream.ValidateBufferArguments(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.ValidateBufferArguments(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.ValidateBufferArguments(System.Byte(), System.Int32, System.Int32)
  name.vb: ValidateBufferArguments(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.ValidateBufferArguments(System.Byte[],System.Int32,System.Int32)
    name: ValidateBufferArguments
    nameWithType: Stream.ValidateBufferArguments
    fullName: System.IO.Stream.ValidateBufferArguments
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ValidateBufferArguments(System.Byte[],System.Int32,System.Int32)
    name: ValidateBufferArguments
    nameWithType: Stream.ValidateBufferArguments
    fullName: System.IO.Stream.ValidateBufferArguments
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ValidateCopyToArguments(System.IO.Stream,System.Int32)
  commentId: M:System.IO.Stream.ValidateCopyToArguments(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: ValidateCopyToArguments(Stream, Int32)
  nameWithType: Stream.ValidateCopyToArguments(Stream, Int32)
  fullName: System.IO.Stream.ValidateCopyToArguments(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.ValidateCopyToArguments(System.IO.Stream,System.Int32)
    name: ValidateCopyToArguments
    nameWithType: Stream.ValidateCopyToArguments
    fullName: System.IO.Stream.ValidateCopyToArguments
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ValidateCopyToArguments(System.IO.Stream,System.Int32)
    name: ValidateCopyToArguments
    nameWithType: Stream.ValidateCopyToArguments
    fullName: System.IO.Stream.ValidateCopyToArguments
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})
  commentId: M:System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})
  parent: System.IO.Stream
  isExternal: true
  name: Write(ReadOnlySpan<Byte>)
  nameWithType: Stream.Write(ReadOnlySpan<Byte>)
  fullName: System.IO.Stream.Write(System.ReadOnlySpan<System.Byte>)
  nameWithType.vb: Stream.Write(ReadOnlySpan(Of Byte))
  fullName.vb: System.IO.Stream.Write(System.ReadOnlySpan(Of System.Byte))
  name.vb: Write(ReadOnlySpan(Of Byte))
  spec.csharp:
  - uid: System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})
    name: Write
    nameWithType: Stream.Write
    fullName: System.IO.Stream.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})
    name: Write
    nameWithType: Stream.Write
    fullName: System.IO.Stream.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(Byte[], Int32, Int32)
  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: WriteAsync(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32, CancellationToken)
  fullName.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(ReadOnlyMemory<Byte>, CancellationToken)
  nameWithType: Stream.WriteAsync(ReadOnlyMemory<Byte>, CancellationToken)
  fullName: System.IO.Stream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken)
  nameWithType.vb: Stream.WriteAsync(ReadOnlyMemory(Of Byte), CancellationToken)
  fullName.vb: System.IO.Stream.WriteAsync(System.ReadOnlyMemory(Of System.Byte), System.Threading.CancellationToken)
  name.vb: WriteAsync(ReadOnlyMemory(Of Byte), CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    nameWithType: ReadOnlyMemory
    fullName: System.ReadOnlyMemory
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    nameWithType: ReadOnlyMemory
    fullName: System.ReadOnlyMemory
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.WriteByte(System.Byte)
  commentId: M:System.IO.Stream.WriteByte(System.Byte)
  parent: System.IO.Stream
  isExternal: true
  name: WriteByte(Byte)
  nameWithType: Stream.WriteByte(Byte)
  fullName: System.IO.Stream.WriteByte(System.Byte)
  spec.csharp:
  - uid: System.IO.Stream.WriteByte(System.Byte)
    name: WriteByte
    nameWithType: Stream.WriteByte
    fullName: System.IO.Stream.WriteByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteByte(System.Byte)
    name: WriteByte
    nameWithType: Stream.WriteByte
    fullName: System.IO.Stream.WriteByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CanTimeout
  commentId: P:System.IO.Stream.CanTimeout
  parent: System.IO.Stream
  isExternal: true
  name: CanTimeout
  nameWithType: Stream.CanTimeout
  fullName: System.IO.Stream.CanTimeout
- uid: System.IO.Stream.ReadTimeout
  commentId: P:System.IO.Stream.ReadTimeout
  parent: System.IO.Stream
  isExternal: true
  name: ReadTimeout
  nameWithType: Stream.ReadTimeout
  fullName: System.IO.Stream.ReadTimeout
- uid: System.IO.Stream.WriteTimeout
  commentId: P:System.IO.Stream.WriteTimeout
  parent: System.IO.Stream
  isExternal: true
  name: WriteTimeout
  nameWithType: Stream.WriteTimeout
  fullName: System.IO.Stream.WriteTimeout
- uid: System.MarshalByRefObject.GetLifetimeService
  commentId: M:System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.InitializeLifetimeService
  commentId: M:System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: System.MarshalByRefObject.InitializeLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: MarshalByRefObject.InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: MarshalByRefObject.InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Comment*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Comment
  name: Comment
  nameWithType: GZipStream.Comment
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Comment
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FileName*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FileName
  name: FileName
  nameWithType: GZipStream.FileName
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FileName
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Crc32*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Crc32
  name: Crc32
  nameWithType: GZipStream.Crc32
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Crc32
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor
  name: GZipStream
  nameWithType: GZipStream.GZipStream
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.GZipStream
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode
  commentId: T:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode
  parent: OfficeOpenXml.Packaging.Ionic.Zlib
  name: CompressionMode
  nameWithType: CompressionMode
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel
  commentId: T:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel
  parent: OfficeOpenXml.Packaging.Ionic.Zlib
  name: CompressionLevel
  nameWithType: CompressionLevel
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)
  isExternal: true
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FlushMode*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FlushMode
  name: FlushMode
  nameWithType: GZipStream.FlushMode
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FlushMode
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.FlushType
  commentId: T:OfficeOpenXml.Packaging.Ionic.Zlib.FlushType
  parent: OfficeOpenXml.Packaging.Ionic.Zlib
  name: FlushType
  nameWithType: FlushType
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.FlushType
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.BufferSize*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.BufferSize
  name: BufferSize
  nameWithType: GZipStream.BufferSize
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.BufferSize
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalIn*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalIn
  name: TotalIn
  nameWithType: GZipStream.TotalIn
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalIn
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalOut*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalOut
  name: TotalOut
  nameWithType: GZipStream.TotalOut
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalOut
- uid: System.IO.Stream.Dispose(System.Boolean)
  commentId: M:System.IO.Stream.Dispose(System.Boolean)
  parent: System.IO.Stream
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: Stream.Dispose(Boolean)
  fullName: System.IO.Stream.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.IO.Stream.Dispose(System.Boolean)
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Dispose(System.Boolean)
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Dispose*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Dispose
  name: Dispose
  nameWithType: GZipStream.Dispose
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Dispose
- uid: System.IO.Stream.CanRead
  commentId: P:System.IO.Stream.CanRead
  parent: System.IO.Stream
  isExternal: true
  name: CanRead
  nameWithType: Stream.CanRead
  fullName: System.IO.Stream.CanRead
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanRead*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanRead
  name: CanRead
  nameWithType: GZipStream.CanRead
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanRead
- uid: System.IO.Stream.CanSeek
  commentId: P:System.IO.Stream.CanSeek
  parent: System.IO.Stream
  isExternal: true
  name: CanSeek
  nameWithType: Stream.CanSeek
  fullName: System.IO.Stream.CanSeek
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanSeek*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanSeek
  name: CanSeek
  nameWithType: GZipStream.CanSeek
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanSeek
- uid: System.IO.Stream.CanWrite
  commentId: P:System.IO.Stream.CanWrite
  parent: System.IO.Stream
  isExternal: true
  name: CanWrite
  nameWithType: Stream.CanWrite
  fullName: System.IO.Stream.CanWrite
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanWrite*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanWrite
  name: CanWrite
  nameWithType: GZipStream.CanWrite
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanWrite
- uid: System.IO.Stream.Flush
  commentId: M:System.IO.Stream.Flush
  parent: System.IO.Stream
  isExternal: true
  name: Flush()
  nameWithType: Stream.Flush()
  fullName: System.IO.Stream.Flush()
  spec.csharp:
  - uid: System.IO.Stream.Flush
    name: Flush
    nameWithType: Stream.Flush
    fullName: System.IO.Stream.Flush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Flush
    name: Flush
    nameWithType: Stream.Flush
    fullName: System.IO.Stream.Flush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Flush*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Flush
  name: Flush
  nameWithType: GZipStream.Flush
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Flush
- uid: System.NotImplementedException
  commentId: T:System.NotImplementedException
  isExternal: true
- uid: System.IO.Stream.Length
  commentId: P:System.IO.Stream.Length
  parent: System.IO.Stream
  isExternal: true
  name: Length
  nameWithType: Stream.Length
  fullName: System.IO.Stream.Length
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Length*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Length
  name: Length
  nameWithType: GZipStream.Length
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Length
- uid: System.IO.Stream.Position
  commentId: P:System.IO.Stream.Position
  parent: System.IO.Stream
  isExternal: true
  name: Position
  nameWithType: Stream.Position
  fullName: System.IO.Stream.Position
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Position*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Position
  name: Position
  nameWithType: GZipStream.Position
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Position
- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: Read(Byte[], Int32, Int32)
  nameWithType: Stream.Read(Byte[], Int32, Int32)
  fullName: System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.Read(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    nameWithType: Stream.Read
    fullName: System.IO.Stream.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    nameWithType: Stream.Read
    fullName: System.IO.Stream.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Read*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Read
  name: Read
  nameWithType: GZipStream.Read
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Read
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.Stream
  isExternal: true
  name: Seek(Int64, SeekOrigin)
  nameWithType: Stream.Seek(Int64, SeekOrigin)
  fullName: System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin)
  spec.csharp:
  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    nameWithType: Stream.Seek
    fullName: System.IO.Stream.Seek
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    nameWithType: SeekOrigin
    fullName: System.IO.SeekOrigin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    nameWithType: Stream.Seek
    fullName: System.IO.Stream.Seek
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    nameWithType: SeekOrigin
    fullName: System.IO.SeekOrigin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Seek*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Seek
  name: Seek
  nameWithType: GZipStream.Seek
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Seek
- uid: System.IO.SeekOrigin
  commentId: T:System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.IO.Stream.SetLength(System.Int64)
  commentId: M:System.IO.Stream.SetLength(System.Int64)
  parent: System.IO.Stream
  isExternal: true
  name: SetLength(Int64)
  nameWithType: Stream.SetLength(Int64)
  fullName: System.IO.Stream.SetLength(System.Int64)
  spec.csharp:
  - uid: System.IO.Stream.SetLength(System.Int64)
    name: SetLength
    nameWithType: Stream.SetLength
    fullName: System.IO.Stream.SetLength
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.SetLength(System.Int64)
    name: SetLength
    nameWithType: Stream.SetLength
    fullName: System.IO.Stream.SetLength
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.SetLength*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.SetLength
  name: SetLength
  nameWithType: GZipStream.SetLength
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.SetLength
- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: Write(Byte[], Int32, Int32)
  nameWithType: Stream.Write(Byte[], Int32, Int32)
  fullName: System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.Write(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    nameWithType: Stream.Write
    fullName: System.IO.Stream.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    nameWithType: Stream.Write
    fullName: System.IO.Stream.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Write*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Write
  name: Write
  nameWithType: GZipStream.Write
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Write
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])
  isExternal: true
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])
  isExternal: true
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString
  name: CompressString
  nameWithType: GZipStream.CompressString
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])
  isExternal: true
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)
  isExternal: true
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer
  name: CompressBuffer
  nameWithType: GZipStream.CompressBuffer
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString
  name: UncompressString
  nameWithType: GZipStream.UncompressString
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer
  name: UncompressBuffer
  nameWithType: GZipStream.UncompressBuffer
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer
