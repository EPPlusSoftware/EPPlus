### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  id: Operator
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators
  children:
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Apply(OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.ParsingContext)
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Colon
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Concat
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Divide
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Eq
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Exp
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThan
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThanOrEqual
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Intersect
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThan
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThanOrEqual
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Minus
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Multiply
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.NotEqualsTo
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Operator
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Precedence
  - OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Plus
  langs:
  - csharp
  - vb
  name: Operator
  nameWithType: Operator
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Operator
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 30
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  summary: "\nImplementation of operators in formula calculation.\n"
  example: []
  syntax:
    content: 'public class Operator : IOperator'
    content.vb: >-
      Public Class Operator
          Implements IOperator
  inheritance:
  - System.Object
  implements:
  - OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Precedence
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Precedence
  id: OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Precedence
  isEii: true
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: IOperator.Precedence
  nameWithType: Operator.IOperator.Precedence
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 59
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: int IOperator.Precedence { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly WriteOnly Property OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence As Integer Implements IOperator.Precedence
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Precedence*
  implements:
  - OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence
  nameWithType.vb: Operator.OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Operator
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Operator
  id: OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Operator
  isEii: true
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: IOperator.Operator
  nameWithType: Operator.IOperator.Operator
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 64
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: Operators IOperator.Operator { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.Operators
    content.vb: ReadOnly WriteOnly Property OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator As Operators Implements IOperator.Operator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Operator*
  implements:
  - OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator
  nameWithType.vb: Operator.OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Apply(OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.ParsingContext)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Apply(OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.ParsingContext)
  id: Apply(OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.ParsingContext)
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: Apply(CompileResult, CompileResult, ParsingContext)
  nameWithType: Operator.Apply(CompileResult, CompileResult, ParsingContext)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Apply(OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult, OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult, OfficeOpenXml.FormulaParsing.ParsingContext)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Apply
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 75
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: public CompileResult Apply(CompileResult left, CompileResult right, ParsingContext ctx)
    parameters:
    - id: left
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
    - id: right
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
    - id: ctx
      type: OfficeOpenXml.FormulaParsing.ParsingContext
    return:
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
    content.vb: Public Function Apply(left As CompileResult, right As CompileResult, ctx As ParsingContext) As CompileResult
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Apply*
  implements:
  - OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Apply(OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.ParsingContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Plus
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Plus
  id: Plus
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: Plus
  nameWithType: Operator.Plus
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Plus
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Plus
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 95
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: public static IOperator Plus { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property Plus As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Plus*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Minus
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Minus
  id: Minus
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: Minus
  nameWithType: Operator.Minus
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Minus
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Minus
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 126
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: public static IOperator Minus { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property Minus As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Minus*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Multiply
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Multiply
  id: Multiply
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: Multiply
  nameWithType: Operator.Multiply
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Multiply
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Multiply
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 153
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: public static IOperator Multiply { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property Multiply As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Multiply*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Divide
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Divide
  id: Divide
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: Divide
  nameWithType: Operator.Divide
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Divide
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Divide
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 179
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: public static IOperator Divide { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property Divide As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Divide*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Exp
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Exp
  id: Exp
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: Exp
  nameWithType: Operator.Exp
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Exp
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Exp
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 209
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: public static IOperator Exp { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property Exp As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Exp*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Concat
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Concat
  id: Concat
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: Concat
  nameWithType: Operator.Concat
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Concat
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Concat
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 246
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: public static IOperator Concat { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property Concat As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Concat*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Colon
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Colon
  id: Colon
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: Colon
  nameWithType: Operator.Colon
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Colon
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Colon
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 266
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: public static IOperator Colon { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property Colon As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Colon*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Intersect
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Intersect
  id: Intersect
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: Intersect
  nameWithType: Operator.Intersect
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Intersect
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Intersect
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 320
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  summary: "\nIntersect operator\n"
  example: []
  syntax:
    content: public static IOperator Intersect { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property Intersect As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Intersect*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThan
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThan
  id: GreaterThan
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: GreaterThan
  nameWithType: Operator.GreaterThan
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThan
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GreaterThan
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 378
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  summary: "\nGreater than operator\n"
  example: []
  syntax:
    content: public static IOperator GreaterThan { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property GreaterThan As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThan*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Eq
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Eq
  id: Eq
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: Eq
  nameWithType: Operator.Eq
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Eq
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Eq
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 399
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  summary: "\nEquals operator\n"
  example: []
  syntax:
    content: public static IOperator Eq { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property Eq As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Eq*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.NotEqualsTo
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.NotEqualsTo
  id: NotEqualsTo
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: NotEqualsTo
  nameWithType: Operator.NotEqualsTo
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.NotEqualsTo
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: NotEqualsTo
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 418
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: public static IOperator NotEqualsTo { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property NotEqualsTo As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.NotEqualsTo*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThanOrEqual
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThanOrEqual
  id: GreaterThanOrEqual
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual
  nameWithType: Operator.GreaterThanOrEqual
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThanOrEqual
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GreaterThanOrEqual
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 437
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: public static IOperator GreaterThanOrEqual { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property GreaterThanOrEqual As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThan
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThan
  id: LessThan
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: LessThan
  nameWithType: Operator.LessThan
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThan
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LessThan
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 455
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: public static IOperator LessThan { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property LessThan As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThan*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThanOrEqual
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThanOrEqual
  id: LessThanOrEqual
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator
  langs:
  - csharp
  - vb
  name: LessThanOrEqual
  nameWithType: Operator.LessThanOrEqual
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThanOrEqual
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LessThanOrEqual
    path: ../src/EPPlus/FormulaParsing/Excel/Operators/Operator.cs
    startLine: 473
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Operators
  syntax:
    content: public static IOperator LessThanOrEqual { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Shared ReadOnly Property LessThanOrEqual As IOperator
  overload: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators
  commentId: N:OfficeOpenXml.FormulaParsing.Excel.Operators
  name: OfficeOpenXml.FormulaParsing.Excel.Operators
  nameWithType: OfficeOpenXml.FormulaParsing.Excel.Operators
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators
  name: IOperator
  nameWithType: IOperator
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Precedence*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Precedence
  name: IOperator.Precedence
  nameWithType: Operator.IOperator.Precedence
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence
  nameWithType.vb: Operator.OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence
  name.vb: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
  name: Precedence
  nameWithType: IOperator.Precedence
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Operator*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml#FormulaParsing#Excel#Operators#IOperator#Operator
  name: IOperator.Operator
  nameWithType: Operator.IOperator.Operator
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator
  nameWithType.vb: Operator.OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator
  name.vb: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
  name: Operator
  nameWithType: IOperator.Operator
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operators
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Operators.Operators
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators
  name: Operators
  nameWithType: Operators
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operators
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Apply*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Apply
  name: Apply
  nameWithType: Operator.Apply
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Apply
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Apply(OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.ParsingContext)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Apply(OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.ParsingContext)
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
  name: Apply(CompileResult, CompileResult, ParsingContext)
  nameWithType: IOperator.Apply(CompileResult, CompileResult, ParsingContext)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Apply(OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult, OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult, OfficeOpenXml.FormulaParsing.ParsingContext)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Apply(OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.ParsingContext)
    name: Apply
    nameWithType: IOperator.Apply
    fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
    name: CompileResult
    nameWithType: CompileResult
    fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
    name: CompileResult
    nameWithType: CompileResult
    fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.ParsingContext
    name: ParsingContext
    nameWithType: ParsingContext
    fullName: OfficeOpenXml.FormulaParsing.ParsingContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Apply(OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult,OfficeOpenXml.FormulaParsing.ParsingContext)
    name: Apply
    nameWithType: IOperator.Apply
    fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
    name: CompileResult
    nameWithType: CompileResult
    fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
    name: CompileResult
    nameWithType: CompileResult
    fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.ParsingContext
    name: ParsingContext
    nameWithType: ParsingContext
    fullName: OfficeOpenXml.FormulaParsing.ParsingContext
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  commentId: T:OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  parent: OfficeOpenXml.FormulaParsing.FormulaExpressions
  name: CompileResult
  nameWithType: CompileResult
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
- uid: OfficeOpenXml.FormulaParsing.ParsingContext
  commentId: T:OfficeOpenXml.FormulaParsing.ParsingContext
  parent: OfficeOpenXml.FormulaParsing
  name: ParsingContext
  nameWithType: ParsingContext
  fullName: OfficeOpenXml.FormulaParsing.ParsingContext
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions
  commentId: N:OfficeOpenXml.FormulaParsing.FormulaExpressions
  name: OfficeOpenXml.FormulaParsing.FormulaExpressions
  nameWithType: OfficeOpenXml.FormulaParsing.FormulaExpressions
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions
- uid: OfficeOpenXml.FormulaParsing
  commentId: N:OfficeOpenXml.FormulaParsing
  name: OfficeOpenXml.FormulaParsing
  nameWithType: OfficeOpenXml.FormulaParsing
  fullName: OfficeOpenXml.FormulaParsing
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Plus*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Plus
  name: Plus
  nameWithType: Operator.Plus
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Plus
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Minus*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Minus
  name: Minus
  nameWithType: Operator.Minus
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Minus
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Multiply*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Multiply
  name: Multiply
  nameWithType: Operator.Multiply
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Multiply
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Divide*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Divide
  name: Divide
  nameWithType: Operator.Divide
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Divide
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Exp*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Exp
  name: Exp
  nameWithType: Operator.Exp
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Exp
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Concat*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Concat
  name: Concat
  nameWithType: Operator.Concat
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Concat
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Colon*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Colon
  name: Colon
  nameWithType: Operator.Colon
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Colon
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Intersect*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Intersect
  name: Intersect
  nameWithType: Operator.Intersect
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Intersect
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThan*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThan
  name: GreaterThan
  nameWithType: Operator.GreaterThan
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThan
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Eq*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Eq
  name: Eq
  nameWithType: Operator.Eq
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.Eq
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.NotEqualsTo*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.NotEqualsTo
  name: NotEqualsTo
  nameWithType: Operator.NotEqualsTo
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.NotEqualsTo
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThanOrEqual*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: Operator.GreaterThanOrEqual
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.GreaterThanOrEqual
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThan*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThan
  name: LessThan
  nameWithType: Operator.LessThan
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThan
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThanOrEqual*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: Operator.LessThanOrEqual
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.Operator.LessThanOrEqual
