### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings
  commentId: T:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings
  id: ExcelHtmlOverrideExportSettings
  parent: OfficeOpenXml.Export.HtmlExport
  children:
  - OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Accessibility
  - OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.AdditionalTableClassNames
  - OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows
  - OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Headers
  - OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.TableId
  langs:
  - csharp
  - vb
  name: ExcelHtmlOverrideExportSettings
  nameWithType: ExcelHtmlOverrideExportSettings
  fullName: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings
  type: Class
  source:
    remote:
      path: src/EPPlus/Export/HtmlExport/Settings/ExcelHtmlOverrideExportSettings.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelHtmlOverrideExportSettings
    path: ../src/EPPlus/Export/HtmlExport/Settings/ExcelHtmlOverrideExportSettings.cs
    startLine: 24
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.HtmlExport
  summary: "\nWhen exporting multiple ranges from the same workbook, this class can be used\nto override certain properties of the settings.\n"
  example: []
  syntax:
    content: public class ExcelHtmlOverrideExportSettings
    content.vb: Public Class ExcelHtmlOverrideExportSettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.TableId
  commentId: P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.TableId
  id: TableId
  parent: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings
  langs:
  - csharp
  - vb
  name: TableId
  nameWithType: ExcelHtmlOverrideExportSettings.TableId
  fullName: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.TableId
  type: Property
  source:
    remote:
      path: src/EPPlus/Export/HtmlExport/Settings/ExcelHtmlOverrideExportSettings.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: TableId
    path: ../src/EPPlus/Export/HtmlExport/Settings/ExcelHtmlOverrideExportSettings.cs
    startLine: 29
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.HtmlExport
  summary: "\nHtml id of the exported table.\n"
  example: []
  syntax:
    content: public string TableId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property TableId As String
  overload: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.TableId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.AdditionalTableClassNames
  commentId: P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.AdditionalTableClassNames
  id: AdditionalTableClassNames
  parent: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings
  langs:
  - csharp
  - vb
  name: AdditionalTableClassNames
  nameWithType: ExcelHtmlOverrideExportSettings.AdditionalTableClassNames
  fullName: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.AdditionalTableClassNames
  type: Property
  source:
    remote:
      path: src/EPPlus/Export/HtmlExport/Settings/ExcelHtmlOverrideExportSettings.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AdditionalTableClassNames
    path: ../src/EPPlus/Export/HtmlExport/Settings/ExcelHtmlOverrideExportSettings.cs
    startLine: 34
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.HtmlExport
  summary: "\nUse this property to set additional class names that will be set on the exported html-table.\n"
  example: []
  syntax:
    content: public List<string> AdditionalTableClassNames { get; protected set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Property AdditionalTableClassNames As List(Of String)
  overload: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.AdditionalTableClassNames*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Accessibility
  commentId: P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Accessibility
  id: Accessibility
  parent: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings
  langs:
  - csharp
  - vb
  name: Accessibility
  nameWithType: ExcelHtmlOverrideExportSettings.Accessibility
  fullName: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Accessibility
  type: Property
  source:
    remote:
      path: src/EPPlus/Export/HtmlExport/Settings/ExcelHtmlOverrideExportSettings.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Accessibility
    path: ../src/EPPlus/Export/HtmlExport/Settings/ExcelHtmlOverrideExportSettings.cs
    startLine: 43
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.HtmlExport
  summary: "\nSettings for usage of accessibility (aria, role) attributes of the table\n"
  example: []
  syntax:
    content: public AccessibilitySettings Accessibility { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Export.HtmlExport.Accessibility.AccessibilitySettings
    content.vb: Public ReadOnly Property Accessibility As AccessibilitySettings
  overload: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Accessibility*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows
  commentId: P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows
  id: HeaderRows
  parent: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings
  langs:
  - csharp
  - vb
  name: HeaderRows
  nameWithType: ExcelHtmlOverrideExportSettings.HeaderRows
  fullName: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows
  type: Property
  source:
    remote:
      path: src/EPPlus/Export/HtmlExport/Settings/ExcelHtmlOverrideExportSettings.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: HeaderRows
    path: ../src/EPPlus/Export/HtmlExport/Settings/ExcelHtmlOverrideExportSettings.cs
    startLine: 53
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.HtmlExport
  summary: "\nNumber of header rows before the actual data. Default is 1.\n"
  example: []
  syntax:
    content: public int HeaderRows { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property HeaderRows As Integer
  overload: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Headers
  commentId: P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Headers
  id: Headers
  parent: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings
  langs:
  - csharp
  - vb
  name: Headers
  nameWithType: ExcelHtmlOverrideExportSettings.Headers
  fullName: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Headers
  type: Property
  source:
    remote:
      path: src/EPPlus/Export/HtmlExport/Settings/ExcelHtmlOverrideExportSettings.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Headers
    path: ../src/EPPlus/Export/HtmlExport/Settings/ExcelHtmlOverrideExportSettings.cs
    startLine: 72
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.HtmlExport
  summary: "\nIf <xref href=\"OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows\" data-throw-if-not-resolved=\"false\"></xref> is 0, this collection contains the headers. \nIf this collection is empty the table will have no headers.\n"
  example: []
  syntax:
    content: public List<string> Headers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public ReadOnly Property Headers As List(Of String)
  overload: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Headers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: OfficeOpenXml.Export.HtmlExport
  commentId: N:OfficeOpenXml.Export.HtmlExport
  name: OfficeOpenXml.Export.HtmlExport
  nameWithType: OfficeOpenXml.Export.HtmlExport
  fullName: OfficeOpenXml.Export.HtmlExport
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.TableId*
  commentId: Overload:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.TableId
  name: TableId
  nameWithType: ExcelHtmlOverrideExportSettings.TableId
  fullName: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.TableId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.AdditionalTableClassNames*
  commentId: Overload:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.AdditionalTableClassNames
  name: AdditionalTableClassNames
  nameWithType: ExcelHtmlOverrideExportSettings.AdditionalTableClassNames
  fullName: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.AdditionalTableClassNames
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Accessibility*
  commentId: Overload:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Accessibility
  name: Accessibility
  nameWithType: ExcelHtmlOverrideExportSettings.Accessibility
  fullName: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Accessibility
- uid: OfficeOpenXml.Export.HtmlExport.Accessibility.AccessibilitySettings
  commentId: T:OfficeOpenXml.Export.HtmlExport.Accessibility.AccessibilitySettings
  parent: OfficeOpenXml.Export.HtmlExport.Accessibility
  name: AccessibilitySettings
  nameWithType: AccessibilitySettings
  fullName: OfficeOpenXml.Export.HtmlExport.Accessibility.AccessibilitySettings
- uid: OfficeOpenXml.Export.HtmlExport.Accessibility
  commentId: N:OfficeOpenXml.Export.HtmlExport.Accessibility
  name: OfficeOpenXml.Export.HtmlExport.Accessibility
  nameWithType: OfficeOpenXml.Export.HtmlExport.Accessibility
  fullName: OfficeOpenXml.Export.HtmlExport.Accessibility
- uid: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows*
  commentId: Overload:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows
  name: HeaderRows
  nameWithType: ExcelHtmlOverrideExportSettings.HeaderRows
  fullName: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows
  commentId: P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows
  isExternal: true
- uid: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Headers*
  commentId: Overload:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Headers
  name: Headers
  nameWithType: ExcelHtmlOverrideExportSettings.Headers
  fullName: OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Headers
