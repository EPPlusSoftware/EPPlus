### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.ICellInfo
  commentId: T:OfficeOpenXml.FormulaParsing.ICellInfo
  id: ICellInfo
  parent: OfficeOpenXml.FormulaParsing
  children:
  - OfficeOpenXml.FormulaParsing.ICellInfo.Address
  - OfficeOpenXml.FormulaParsing.ICellInfo.Column
  - OfficeOpenXml.FormulaParsing.ICellInfo.Formula
  - OfficeOpenXml.FormulaParsing.ICellInfo.Id
  - OfficeOpenXml.FormulaParsing.ICellInfo.IsExcelError
  - OfficeOpenXml.FormulaParsing.ICellInfo.IsHiddenRow
  - OfficeOpenXml.FormulaParsing.ICellInfo.Row
  - OfficeOpenXml.FormulaParsing.ICellInfo.Tokens
  - OfficeOpenXml.FormulaParsing.ICellInfo.Value
  - OfficeOpenXml.FormulaParsing.ICellInfo.ValueDouble
  - OfficeOpenXml.FormulaParsing.ICellInfo.ValueDoubleLogical
  - OfficeOpenXml.FormulaParsing.ICellInfo.WorksheetName
  langs:
  - csharp
  - vb
  name: ICellInfo
  nameWithType: ICellInfo
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo
  type: Interface
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ICellInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ICellInfo
    path: ../src/EPPlus/FormulaParsing/ICellInfo.cs
    startLine: 23
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nInformation and help methods about a cell\n"
  example: []
  syntax:
    content: public interface ICellInfo
    content.vb: Public Interface ICellInfo
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Address
  commentId: P:OfficeOpenXml.FormulaParsing.ICellInfo.Address
  id: Address
  parent: OfficeOpenXml.FormulaParsing.ICellInfo
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: ICellInfo.Address
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Address
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ICellInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Address
    path: ../src/EPPlus/FormulaParsing/ICellInfo.cs
    startLine: 28
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nAddress\n"
  example: []
  syntax:
    content: string Address { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Address As String
  overload: OfficeOpenXml.FormulaParsing.ICellInfo.Address*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.WorksheetName
  commentId: P:OfficeOpenXml.FormulaParsing.ICellInfo.WorksheetName
  id: WorksheetName
  parent: OfficeOpenXml.FormulaParsing.ICellInfo
  langs:
  - csharp
  - vb
  name: WorksheetName
  nameWithType: ICellInfo.WorksheetName
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.WorksheetName
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ICellInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: WorksheetName
    path: ../src/EPPlus/FormulaParsing/ICellInfo.cs
    startLine: 32
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nWorksheetName\n"
  example: []
  syntax:
    content: string WorksheetName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property WorksheetName As String
  overload: OfficeOpenXml.FormulaParsing.ICellInfo.WorksheetName*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Row
  commentId: P:OfficeOpenXml.FormulaParsing.ICellInfo.Row
  id: Row
  parent: OfficeOpenXml.FormulaParsing.ICellInfo
  langs:
  - csharp
  - vb
  name: Row
  nameWithType: ICellInfo.Row
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Row
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ICellInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Row
    path: ../src/EPPlus/FormulaParsing/ICellInfo.cs
    startLine: 36
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nRow\n"
  example: []
  syntax:
    content: int Row { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Row As Integer
  overload: OfficeOpenXml.FormulaParsing.ICellInfo.Row*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Column
  commentId: P:OfficeOpenXml.FormulaParsing.ICellInfo.Column
  id: Column
  parent: OfficeOpenXml.FormulaParsing.ICellInfo
  langs:
  - csharp
  - vb
  name: Column
  nameWithType: ICellInfo.Column
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Column
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ICellInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Column
    path: ../src/EPPlus/FormulaParsing/ICellInfo.cs
    startLine: 40
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nColumn\n"
  example: []
  syntax:
    content: int Column { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Column As Integer
  overload: OfficeOpenXml.FormulaParsing.ICellInfo.Column*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Id
  commentId: P:OfficeOpenXml.FormulaParsing.ICellInfo.Id
  id: Id
  parent: OfficeOpenXml.FormulaParsing.ICellInfo
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ICellInfo.Id
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Id
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ICellInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Id
    path: ../src/EPPlus/FormulaParsing/ICellInfo.cs
    startLine: 44
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nId\n"
  example: []
  syntax:
    content: ulong Id { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: ReadOnly Property Id As ULong
  overload: OfficeOpenXml.FormulaParsing.ICellInfo.Id*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Formula
  commentId: P:OfficeOpenXml.FormulaParsing.ICellInfo.Formula
  id: Formula
  parent: OfficeOpenXml.FormulaParsing.ICellInfo
  langs:
  - csharp
  - vb
  name: Formula
  nameWithType: ICellInfo.Formula
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Formula
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ICellInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Formula
    path: ../src/EPPlus/FormulaParsing/ICellInfo.cs
    startLine: 48
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nFormula\n"
  example: []
  syntax:
    content: string Formula { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Formula As String
  overload: OfficeOpenXml.FormulaParsing.ICellInfo.Formula*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Value
  commentId: P:OfficeOpenXml.FormulaParsing.ICellInfo.Value
  id: Value
  parent: OfficeOpenXml.FormulaParsing.ICellInfo
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ICellInfo.Value
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Value
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ICellInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Value
    path: ../src/EPPlus/FormulaParsing/ICellInfo.cs
    startLine: 52
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nValue\n"
  example: []
  syntax:
    content: object Value { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly Property Value As Object
  overload: OfficeOpenXml.FormulaParsing.ICellInfo.Value*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.ValueDouble
  commentId: P:OfficeOpenXml.FormulaParsing.ICellInfo.ValueDouble
  id: ValueDouble
  parent: OfficeOpenXml.FormulaParsing.ICellInfo
  langs:
  - csharp
  - vb
  name: ValueDouble
  nameWithType: ICellInfo.ValueDouble
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.ValueDouble
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ICellInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ValueDouble
    path: ../src/EPPlus/FormulaParsing/ICellInfo.cs
    startLine: 56
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nValue double\n"
  example: []
  syntax:
    content: double ValueDouble { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: ReadOnly Property ValueDouble As Double
  overload: OfficeOpenXml.FormulaParsing.ICellInfo.ValueDouble*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.ValueDoubleLogical
  commentId: P:OfficeOpenXml.FormulaParsing.ICellInfo.ValueDoubleLogical
  id: ValueDoubleLogical
  parent: OfficeOpenXml.FormulaParsing.ICellInfo
  langs:
  - csharp
  - vb
  name: ValueDoubleLogical
  nameWithType: ICellInfo.ValueDoubleLogical
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.ValueDoubleLogical
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ICellInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ValueDoubleLogical
    path: ../src/EPPlus/FormulaParsing/ICellInfo.cs
    startLine: 60
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nValue double logical\n"
  example: []
  syntax:
    content: double ValueDoubleLogical { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: ReadOnly Property ValueDoubleLogical As Double
  overload: OfficeOpenXml.FormulaParsing.ICellInfo.ValueDoubleLogical*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.IsHiddenRow
  commentId: P:OfficeOpenXml.FormulaParsing.ICellInfo.IsHiddenRow
  id: IsHiddenRow
  parent: OfficeOpenXml.FormulaParsing.ICellInfo
  langs:
  - csharp
  - vb
  name: IsHiddenRow
  nameWithType: ICellInfo.IsHiddenRow
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.IsHiddenRow
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ICellInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsHiddenRow
    path: ../src/EPPlus/FormulaParsing/ICellInfo.cs
    startLine: 64
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nIs hidden row\n"
  example: []
  syntax:
    content: bool IsHiddenRow { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsHiddenRow As Boolean
  overload: OfficeOpenXml.FormulaParsing.ICellInfo.IsHiddenRow*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.IsExcelError
  commentId: P:OfficeOpenXml.FormulaParsing.ICellInfo.IsExcelError
  id: IsExcelError
  parent: OfficeOpenXml.FormulaParsing.ICellInfo
  langs:
  - csharp
  - vb
  name: IsExcelError
  nameWithType: ICellInfo.IsExcelError
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.IsExcelError
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ICellInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsExcelError
    path: ../src/EPPlus/FormulaParsing/ICellInfo.cs
    startLine: 68
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nIs excel error\n"
  example: []
  syntax:
    content: bool IsExcelError { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsExcelError As Boolean
  overload: OfficeOpenXml.FormulaParsing.ICellInfo.IsExcelError*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Tokens
  commentId: P:OfficeOpenXml.FormulaParsing.ICellInfo.Tokens
  id: Tokens
  parent: OfficeOpenXml.FormulaParsing.ICellInfo
  langs:
  - csharp
  - vb
  name: Tokens
  nameWithType: ICellInfo.Tokens
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Tokens
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ICellInfo.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Tokens
    path: ../src/EPPlus/FormulaParsing/ICellInfo.cs
    startLine: 72
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nTokens\n"
  example: []
  syntax:
    content: IList<Token> Tokens { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
    content.vb: ReadOnly Property Tokens As IList(Of Token)
  overload: OfficeOpenXml.FormulaParsing.ICellInfo.Tokens*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: OfficeOpenXml.FormulaParsing
  commentId: N:OfficeOpenXml.FormulaParsing
  name: OfficeOpenXml.FormulaParsing
  nameWithType: OfficeOpenXml.FormulaParsing
  fullName: OfficeOpenXml.FormulaParsing
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Address*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ICellInfo.Address
  name: Address
  nameWithType: ICellInfo.Address
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Address
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.WorksheetName*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ICellInfo.WorksheetName
  name: WorksheetName
  nameWithType: ICellInfo.WorksheetName
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.WorksheetName
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Row*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ICellInfo.Row
  name: Row
  nameWithType: ICellInfo.Row
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Row
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Column*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ICellInfo.Column
  name: Column
  nameWithType: ICellInfo.Column
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Column
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Id*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ICellInfo.Id
  name: Id
  nameWithType: ICellInfo.Id
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Id
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Formula*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ICellInfo.Formula
  name: Formula
  nameWithType: ICellInfo.Formula
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Formula
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Value*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ICellInfo.Value
  name: Value
  nameWithType: ICellInfo.Value
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Value
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.ValueDouble*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ICellInfo.ValueDouble
  name: ValueDouble
  nameWithType: ICellInfo.ValueDouble
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.ValueDouble
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.ValueDoubleLogical*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ICellInfo.ValueDoubleLogical
  name: ValueDoubleLogical
  nameWithType: ICellInfo.ValueDoubleLogical
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.ValueDoubleLogical
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.IsHiddenRow*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ICellInfo.IsHiddenRow
  name: IsHiddenRow
  nameWithType: ICellInfo.IsHiddenRow
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.IsHiddenRow
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.IsExcelError*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ICellInfo.IsExcelError
  name: IsExcelError
  nameWithType: ICellInfo.IsExcelError
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.IsExcelError
- uid: OfficeOpenXml.FormulaParsing.ICellInfo.Tokens*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ICellInfo.Tokens
  name: Tokens
  nameWithType: ICellInfo.Tokens
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo.Tokens
- uid: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  commentId: T:System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Token>
  nameWithType: IList<Token>
  fullName: System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token>
  nameWithType.vb: IList(Of Token)
  fullName.vb: System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  name.vb: IList(Of Token)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
