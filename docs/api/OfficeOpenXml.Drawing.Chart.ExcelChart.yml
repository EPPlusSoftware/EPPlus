### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart
  commentId: T:OfficeOpenXml.Drawing.Chart.ExcelChart
  id: ExcelChart
  parent: OfficeOpenXml.Drawing.Chart
  children:
  - OfficeOpenXml.Drawing.Chart.ExcelChart._chartNode
  - OfficeOpenXml.Drawing.Chart.ExcelChart._chartXmlHelper
  - OfficeOpenXml.Drawing.Chart.ExcelChart.Axis
  - OfficeOpenXml.Drawing.Chart.ExcelChart.BackWall
  - OfficeOpenXml.Drawing.Chart.ExcelChart.Border
  - OfficeOpenXml.Drawing.Chart.ExcelChart.ChartType
  - OfficeOpenXml.Drawing.Chart.ExcelChart.ChartXml
  - OfficeOpenXml.Drawing.Chart.ExcelChart.DeleteTitle
  - OfficeOpenXml.Drawing.Chart.ExcelChart.DisplayBlanksAs
  - OfficeOpenXml.Drawing.Chart.ExcelChart.DrawingType
  - OfficeOpenXml.Drawing.Chart.ExcelChart.Effect
  - OfficeOpenXml.Drawing.Chart.ExcelChart.Fill
  - OfficeOpenXml.Drawing.Chart.ExcelChart.Floor
  - OfficeOpenXml.Drawing.Chart.ExcelChart.Font
  - OfficeOpenXml.Drawing.Chart.ExcelChart.HasLegend
  - OfficeOpenXml.Drawing.Chart.ExcelChart.HasThirdAxis
  - OfficeOpenXml.Drawing.Chart.ExcelChart.HasTitle
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsType3D
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeArea
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeBubble
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeClustered
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeDoughnut
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeLine
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePercentStacked
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePie
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePieDoughnut
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeRadar
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeScatter
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeShape
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStacked
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStock
  - OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeSurface
  - OfficeOpenXml.Drawing.Chart.ExcelChart.Legend
  - OfficeOpenXml.Drawing.Chart.ExcelChart.PivotTableSource
  - OfficeOpenXml.Drawing.Chart.ExcelChart.PlotArea
  - OfficeOpenXml.Drawing.Chart.ExcelChart.RoundedCorners
  - OfficeOpenXml.Drawing.Chart.ExcelChart.Series
  - OfficeOpenXml.Drawing.Chart.ExcelChart.ShowDataLabelsOverMaximum
  - OfficeOpenXml.Drawing.Chart.ExcelChart.ShowHiddenData
  - OfficeOpenXml.Drawing.Chart.ExcelChart.SideWall
  - OfficeOpenXml.Drawing.Chart.ExcelChart.Style
  - OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager
  - OfficeOpenXml.Drawing.Chart.ExcelChart.TextBody
  - OfficeOpenXml.Drawing.Chart.ExcelChart.ThreeD
  - OfficeOpenXml.Drawing.Chart.ExcelChart.Title
  - OfficeOpenXml.Drawing.Chart.ExcelChart.UseSecondaryAxis
  - OfficeOpenXml.Drawing.Chart.ExcelChart.VaryColors
  - OfficeOpenXml.Drawing.Chart.ExcelChart.View3D
  - OfficeOpenXml.Drawing.Chart.ExcelChart.WorkSheet
  - OfficeOpenXml.Drawing.Chart.ExcelChart.XAxis
  - OfficeOpenXml.Drawing.Chart.ExcelChart.YAxis
  langs:
  - csharp
  - vb
  name: ExcelChart
  nameWithType: ExcelChart
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart
  type: Class
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelChart
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 32
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nBase class for Chart object.\n"
  example: []
  syntax:
    content: 'public abstract class ExcelChart : ExcelDrawing, IDisposable'
    content.vb: >-
      Public MustInherit Class ExcelChart
          Inherits ExcelDrawing
          Implements IDisposable
  inheritance:
  - System.Object
  - OfficeOpenXml.XmlHelper
  - OfficeOpenXml.Drawing.ExcelDrawing
  derivedClasses:
  - OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx
  - OfficeOpenXml.Drawing.Chart.ExcelChartStandard
  implements:
  - System.IDisposable
  inheritedMembers:
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA
  - OfficeOpenXml.Drawing.ExcelDrawing.Name
  - OfficeOpenXml.Drawing.ExcelDrawing.Description
  - OfficeOpenXml.Drawing.ExcelDrawing.EditAs
  - OfficeOpenXml.Drawing.ExcelDrawing.Locked
  - OfficeOpenXml.Drawing.ExcelDrawing.Print
  - OfficeOpenXml.Drawing.ExcelDrawing.From
  - OfficeOpenXml.Drawing.ExcelDrawing.Position
  - OfficeOpenXml.Drawing.ExcelDrawing.Size
  - OfficeOpenXml.Drawing.ExcelDrawing.To
  - OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
  - OfficeOpenXml.Drawing.ExcelDrawing.As
  - OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
  - OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
  - OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  - OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  - OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
  - OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  - OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
  - OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  - OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart._chartXmlHelper
  commentId: F:OfficeOpenXml.Drawing.Chart.ExcelChart._chartXmlHelper
  id: _chartXmlHelper
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: _chartXmlHelper
  nameWithType: ExcelChart._chartXmlHelper
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart._chartXmlHelper
  type: Field
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: _chartXmlHelper
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 43
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nThe Xml helper for the chart xml\n"
  example: []
  syntax:
    content: protected XmlHelper _chartXmlHelper
    return:
      type: OfficeOpenXml.XmlHelper
    content.vb: Protected _chartXmlHelper As XmlHelper
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager
  id: StyleManager
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: StyleManager
  nameWithType: ExcelChart.StyleManager
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: StyleManager
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 75
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nManage style settings for the chart\n"
  example: []
  syntax:
    content: public ExcelChartStyleManager StyleManager { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager
    content.vb: Public ReadOnly Property StyleManager As ExcelChartStyleManager
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.UseSecondaryAxis
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.UseSecondaryAxis
  id: UseSecondaryAxis
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: UseSecondaryAxis
  nameWithType: ExcelChart.UseSecondaryAxis
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.UseSecondaryAxis
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: UseSecondaryAxis
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 110
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nIf true the charttype will use the secondary axis.\nThe chart must contain a least one other charttype that uses the primary axis.\n"
  example: []
  syntax:
    content: public bool UseSecondaryAxis { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property UseSecondaryAxis As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.UseSecondaryAxis*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.WorkSheet
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.WorkSheet
  id: WorkSheet
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: WorkSheet
  nameWithType: ExcelChart.WorkSheet
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.WorkSheet
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: WorkSheet
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 160
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReference to the worksheet\n"
  example: []
  syntax:
    content: public ExcelWorksheet WorkSheet { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelWorksheet
    content.vb: Public ReadOnly Property WorkSheet As ExcelWorksheet
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.WorkSheet*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.ChartXml
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.ChartXml
  id: ChartXml
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: ChartXml
  nameWithType: ExcelChart.ChartXml
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.ChartXml
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ChartXml
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 164
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nThe chart xml document\n"
  example: []
  syntax:
    content: public XmlDocument ChartXml { get; }
    parameters: []
    return:
      type: System.Xml.XmlDocument
    content.vb: Public ReadOnly Property ChartXml As XmlDocument
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.ChartXml*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.DrawingType
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.DrawingType
  id: DrawingType
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: DrawingType
  nameWithType: ExcelChart.DrawingType
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.DrawingType
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: DrawingType
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 168
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nThe type of drawing\n"
  example: []
  syntax:
    content: public override eDrawingType DrawingType { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.eDrawingType
    content.vb: Public Overrides ReadOnly Property DrawingType As eDrawingType
  overridden: OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.DrawingType*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.ChartType
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.ChartType
  id: ChartType
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: ChartType
  nameWithType: ExcelChart.ChartType
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.ChartType
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ChartType
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 179
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nType of chart\n"
  example: []
  syntax:
    content: public eChartType ChartType { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.eChartType
    content.vb: Public ReadOnly Property ChartType As eChartType
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.ChartType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart._chartNode
  commentId: F:OfficeOpenXml.Drawing.Chart.ExcelChart._chartNode
  id: _chartNode
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: _chartNode
  nameWithType: ExcelChart._chartNode
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart._chartNode
  type: Field
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: _chartNode
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 183
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nThe chart element\n"
  example: []
  syntax:
    content: protected XmlNode _chartNode
    return:
      type: System.Xml.XmlNode
    content.vb: Protected _chartNode As XmlNode
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Title
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.Title
  id: Title
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: Title
  nameWithType: ExcelChart.Title
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Title
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Title
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 195
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nThe titel of the chart\n"
  example: []
  syntax:
    content: public virtual ExcelChartTitle Title { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.ExcelChartTitle
    content.vb: Public Overridable ReadOnly Property Title As ExcelChartTitle
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.Title*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.HasTitle
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.HasTitle
  id: HasTitle
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: HasTitle
  nameWithType: ExcelChart.HasTitle
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.HasTitle
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: HasTitle
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 211
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nTrue if the chart has a title\n"
  example: []
  syntax:
    content: public abstract bool HasTitle { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride ReadOnly Property HasTitle As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.HasTitle*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.HasLegend
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.HasLegend
  id: HasLegend
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: HasLegend
  nameWithType: ExcelChart.HasLegend
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.HasLegend
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: HasLegend
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 218
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nIf the chart has a legend\n"
  example: []
  syntax:
    content: public abstract bool HasLegend { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride ReadOnly Property HasLegend As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.HasLegend*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.DeleteTitle
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.DeleteTitle
  id: DeleteTitle
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: DeleteTitle()
  nameWithType: ExcelChart.DeleteTitle()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.DeleteTitle()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: DeleteTitle
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 225
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nRemove the title from the chart\n"
  example: []
  syntax:
    content: public abstract void DeleteTitle()
    content.vb: Public MustOverride Sub DeleteTitle
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.DeleteTitle*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Series
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.Series
  id: Series
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: Series
  nameWithType: ExcelChart.Series
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Series
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Series
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 229
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nChart series\n"
  example: []
  syntax:
    content: public virtual ExcelChartSeries<ExcelChartSerie> Series { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.ExcelChartSeries{OfficeOpenXml.Drawing.Chart.ExcelChartSerie}
    content.vb: Public Overridable ReadOnly Property Series As ExcelChartSeries(Of ExcelChartSerie)
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.Series*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Axis
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.Axis
  id: Axis
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: Axis
  nameWithType: ExcelChart.Axis
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Axis
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Axis
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 233
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nAn array containg all axis of all Charttypes\n"
  example: []
  syntax:
    content: public virtual ExcelChartAxis[] Axis { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.ExcelChartAxis[]
    content.vb: Public Overridable ReadOnly Property Axis As ExcelChartAxis()
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.Axis*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.XAxis
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.XAxis
  id: XAxis
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: XAxis
  nameWithType: ExcelChart.XAxis
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.XAxis
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: XAxis
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 243
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nThe X Axis\n"
  example: []
  syntax:
    content: public virtual ExcelChartAxis XAxis { get; protected set; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.ExcelChartAxis
    content.vb: Public Overridable Property XAxis As ExcelChartAxis
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.XAxis*
  modifiers.csharp:
  - public
  - virtual
  - get
  - protected set
  modifiers.vb:
  - Public
  - Overridable
  - Get
  - Protected Set
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.YAxis
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.YAxis
  id: YAxis
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: YAxis
  nameWithType: ExcelChart.YAxis
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.YAxis
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: YAxis
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 251
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nThe Y Axis\n"
  example: []
  syntax:
    content: public virtual ExcelChartAxis YAxis { get; protected set; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.ExcelChartAxis
    content.vb: Public Overridable Property YAxis As ExcelChartAxis
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.YAxis*
  modifiers.csharp:
  - public
  - virtual
  - get
  - protected set
  modifiers.vb:
  - Public
  - Overridable
  - Get
  - Protected Set
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Style
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.Style
  id: Style
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: Style
  nameWithType: ExcelChart.Style
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Style
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Style
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 260
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nThe build-in chart styles. \nUse <xref href=\"OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager\" data-throw-if-not-resolved=\"false\"></xref> for the more modern styling.\n"
  example: []
  syntax:
    content: public abstract eChartStyle Style { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.eChartStyle
    content.vb: Public MustOverride Property Style As eChartStyle
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.Style*
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.PlotArea
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.PlotArea
  id: PlotArea
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: PlotArea
  nameWithType: ExcelChart.PlotArea
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.PlotArea
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: PlotArea
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 269
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nPlotarea\n"
  example: []
  syntax:
    content: public abstract ExcelChartPlotArea PlotArea { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea
    content.vb: Public MustOverride ReadOnly Property PlotArea As ExcelChartPlotArea
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.PlotArea*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Legend
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.Legend
  id: Legend
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: Legend
  nameWithType: ExcelChart.Legend
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Legend
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Legend
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 277
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nLegend\n"
  example: []
  syntax:
    content: public virtual ExcelChartLegend Legend { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.ExcelChartLegend
    content.vb: Public Overridable ReadOnly Property Legend As ExcelChartLegend
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.Legend*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Border
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.Border
  id: Border
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: Border
  nameWithType: ExcelChart.Border
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Border
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Border
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 298
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nBorder\n"
  example: []
  syntax:
    content: public abstract ExcelDrawingBorder Border { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.ExcelDrawingBorder
    content.vb: Public MustOverride ReadOnly Property Border As ExcelDrawingBorder
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.Border*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Fill
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.Fill
  id: Fill
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: Fill
  nameWithType: ExcelChart.Fill
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Fill
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Fill
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 305
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nAccess to Fill properties\n"
  example: []
  syntax:
    content: public abstract ExcelDrawingFill Fill { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.ExcelDrawingFill
    content.vb: Public MustOverride ReadOnly Property Fill As ExcelDrawingFill
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.Fill*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Effect
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.Effect
  id: Effect
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: Effect
  nameWithType: ExcelChart.Effect
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Effect
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Effect
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 312
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nEffects\n"
  example: []
  syntax:
    content: public abstract ExcelDrawingEffectStyle Effect { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle
    content.vb: Public MustOverride ReadOnly Property Effect As ExcelDrawingEffectStyle
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.Effect*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.ThreeD
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.ThreeD
  id: ThreeD
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: ThreeD
  nameWithType: ExcelChart.ThreeD
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.ThreeD
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ThreeD
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 319
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\n3D properties\n"
  example: []
  syntax:
    content: public abstract ExcelDrawing3D ThreeD { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D
    content.vb: Public MustOverride ReadOnly Property ThreeD As ExcelDrawing3D
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.ThreeD*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Font
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.Font
  id: Font
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: Font
  nameWithType: ExcelChart.Font
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Font
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Font
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 326
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nAccess to font properties\n"
  example: []
  syntax:
    content: public abstract ExcelTextFont Font { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Style.ExcelTextFont
    content.vb: Public MustOverride ReadOnly Property Font As ExcelTextFont
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.Font*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.TextBody
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.TextBody
  id: TextBody
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: TextBody
  nameWithType: ExcelChart.TextBody
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.TextBody
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: TextBody
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 333
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nAccess to text body properties\n"
  example: []
  syntax:
    content: public abstract ExcelTextBody TextBody { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.ExcelTextBody
    content.vb: Public MustOverride ReadOnly Property TextBody As ExcelTextBody
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.TextBody*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.PivotTableSource
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.PivotTableSource
  id: PivotTableSource
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: PivotTableSource
  nameWithType: ExcelChart.PivotTableSource
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.PivotTableSource
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: PivotTableSource
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 341
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nIf the chart is a pivochart this is the pivotable used as source.\n"
  example: []
  syntax:
    content: public ExcelPivotTable PivotTableSource { get; protected set; }
    parameters: []
    return:
      type: OfficeOpenXml.Table.PivotTable.ExcelPivotTable
    content.vb: Public Property PivotTableSource As ExcelPivotTable
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.PivotTableSource*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsType3D
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsType3D
  id: IsType3D
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsType3D()
  nameWithType: ExcelChart.IsType3D()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsType3D()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsType3D
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 418
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is a 3D chart\n"
  example: []
  syntax:
    content: protected bool IsType3D()
    return:
      type: System.Boolean
      description: True if the chart is a 3D chart
    content.vb: Protected Function IsType3D As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsType3D*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeLine
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeLine
  id: IsTypeLine
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypeLine()
  nameWithType: ExcelChart.IsTypeLine()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeLine()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypeLine
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 426
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is a line chart\n"
  example: []
  syntax:
    content: protected bool IsTypeLine()
    return:
      type: System.Boolean
      description: True if the chart is a line chart
    content.vb: Protected Function IsTypeLine As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeLine*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeRadar
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeRadar
  id: IsTypeRadar
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypeRadar()
  nameWithType: ExcelChart.IsTypeRadar()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeRadar()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypeRadar
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 439
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is a radar chart\n"
  example: []
  syntax:
    content: protected bool IsTypeRadar()
    return:
      type: System.Boolean
      description: True if the chart is a radar chart
    content.vb: Protected Function IsTypeRadar As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeRadar*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeScatter
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeScatter
  id: IsTypeScatter
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypeScatter()
  nameWithType: ExcelChart.IsTypeScatter()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeScatter()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypeScatter
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 450
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is a scatter chart\n"
  example: []
  syntax:
    content: protected bool IsTypeScatter()
    return:
      type: System.Boolean
      description: True if the chart is a scatter chart
    content.vb: Protected Function IsTypeScatter As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeScatter*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeBubble
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeBubble
  id: IsTypeBubble
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypeBubble()
  nameWithType: ExcelChart.IsTypeBubble()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeBubble()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypeBubble
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 462
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is a bubble chart\n"
  example: []
  syntax:
    content: protected bool IsTypeBubble()
    return:
      type: System.Boolean
      description: True if the chart is a bubble chart
    content.vb: Protected Function IsTypeBubble As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeBubble*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeArea
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeArea
  id: IsTypeArea
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypeArea()
  nameWithType: ExcelChart.IsTypeArea()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeArea()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypeArea
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 471
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is a scatter chart\n"
  example: []
  syntax:
    content: protected bool IsTypeArea()
    return:
      type: System.Boolean
      description: True if the chart is a scatter chart
    content.vb: Protected Function IsTypeArea As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeArea*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeSurface
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeSurface
  id: IsTypeSurface
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypeSurface()
  nameWithType: ExcelChart.IsTypeSurface()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeSurface()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypeSurface
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 484
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is a sureface chart\n"
  example: []
  syntax:
    content: protected bool IsTypeSurface()
    return:
      type: System.Boolean
      description: True if the chart is a sureface chart
    content.vb: Protected Function IsTypeSurface As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeSurface*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.HasThirdAxis
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.HasThirdAxis
  id: HasThirdAxis
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: HasThirdAxis()
  nameWithType: ExcelChart.HasThirdAxis()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.HasThirdAxis()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: HasThirdAxis
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 495
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is a sureface chart\n"
  example: []
  syntax:
    content: protected bool HasThirdAxis()
    return:
      type: System.Boolean
      description: True if the chart is a sureface chart
    content.vb: Protected Function HasThirdAxis As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.HasThirdAxis*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeShape
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeShape
  id: IsTypeShape
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypeShape()
  nameWithType: ExcelChart.IsTypeShape()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeShape()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypeShape
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 506
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart has shapes, like bars and columns\n"
  example: []
  syntax:
    content: protected bool IsTypeShape()
    return:
      type: System.Boolean
      description: True if the chart has shapes
    content.vb: Protected Function IsTypeShape As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeShape*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePercentStacked
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePercentStacked
  id: IsTypePercentStacked
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypePercentStacked()
  nameWithType: ExcelChart.IsTypePercentStacked()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePercentStacked()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypePercentStacked
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 549
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is of type stacked percentage\n"
  example: []
  syntax:
    content: protected bool IsTypePercentStacked()
    return:
      type: System.Boolean
      description: True if the chart is of type stacked percentage
    content.vb: Protected Function IsTypePercentStacked As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePercentStacked*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStacked
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStacked
  id: IsTypeStacked
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypeStacked()
  nameWithType: ExcelChart.IsTypeStacked()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStacked()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypeStacked
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 569
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is of type stacked \n"
  example: []
  syntax:
    content: protected bool IsTypeStacked()
    return:
      type: System.Boolean
      description: True if the chart is of type stacked
    content.vb: Protected Function IsTypeStacked As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStacked*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeClustered
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeClustered
  id: IsTypeClustered
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypeClustered()
  nameWithType: ExcelChart.IsTypeClustered()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeClustered()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypeClustered
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 590
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is of type clustered\n"
  example: []
  syntax:
    content: protected bool IsTypeClustered()
    return:
      type: System.Boolean
      description: True if the chart is of type clustered
    content.vb: Protected Function IsTypeClustered As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeClustered*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePieDoughnut
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePieDoughnut
  id: IsTypePieDoughnut
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypePieDoughnut()
  nameWithType: ExcelChart.IsTypePieDoughnut()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePieDoughnut()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypePieDoughnut
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 607
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is a pie or Doughnut chart\n"
  example: []
  syntax:
    content: protected bool IsTypePieDoughnut()
    return:
      type: System.Boolean
      description: True if the chart is a pie or Doughnut chart
    content.vb: Protected Function IsTypePieDoughnut As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePieDoughnut*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeDoughnut
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeDoughnut
  id: IsTypeDoughnut
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypeDoughnut()
  nameWithType: ExcelChart.IsTypeDoughnut()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeDoughnut()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypeDoughnut
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 615
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is a Doughnut chart\n"
  example: []
  syntax:
    content: protected bool IsTypeDoughnut()
    return:
      type: System.Boolean
      description: True if the chart is a Doughnut chart
    content.vb: Protected Function IsTypeDoughnut As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeDoughnut*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePie
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePie
  id: IsTypePie
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypePie()
  nameWithType: ExcelChart.IsTypePie()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePie()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypePie
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 624
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturns true if the chart is a pie chart\n"
  example: []
  syntax:
    content: protected bool IsTypePie()
    return:
      type: System.Boolean
      description: true if the chart is a pie chart
    content.vb: Protected Function IsTypePie As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePie*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStock
  commentId: M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStock
  id: IsTypeStock
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: IsTypeStock()
  nameWithType: ExcelChart.IsTypeStock()
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStock()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTypeStock
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 637
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nReturn true if the chart is a stock chart.\n"
  example: []
  syntax:
    content: protected bool IsTypeStock()
    return:
      type: System.Boolean
      description: true if the chart is a stock chart.
    content.vb: Protected Function IsTypeStock As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStock*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.VaryColors
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.VaryColors
  id: VaryColors
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: VaryColors
  nameWithType: ExcelChart.VaryColors
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.VaryColors
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: VaryColors
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 664
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nIf the chart has only one serie this varies the colors for each point.\nThis property does not apply to extention charts.\n"
  example: []
  syntax:
    content: public abstract bool VaryColors { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride Property VaryColors As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.VaryColors*
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Floor
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.Floor
  id: Floor
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: Floor
  nameWithType: ExcelChart.Floor
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Floor
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Floor
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 669
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nFormatting for the floor of a 3D chart. \n<div class=\"NOTE\"><h5>note</h5><p>This property is null for non 3D charts</p></div>\n"
  example: []
  syntax:
    content: public ExcelChartSurface Floor { get; protected set; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.ExcelChartSurface
    content.vb: Public Property Floor As ExcelChartSurface
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.Floor*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.SideWall
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.SideWall
  id: SideWall
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: SideWall
  nameWithType: ExcelChart.SideWall
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.SideWall
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SideWall
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 674
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nFormatting for the sidewall of a 3D chart. \n<div class=\"NOTE\"><h5>note</h5><p>This property is null for non 3D charts</p></div>\n"
  example: []
  syntax:
    content: public ExcelChartSurface SideWall { get; protected set; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.ExcelChartSurface
    content.vb: Public Property SideWall As ExcelChartSurface
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.SideWall*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.BackWall
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.BackWall
  id: BackWall
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: BackWall
  nameWithType: ExcelChart.BackWall
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.BackWall
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: BackWall
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 679
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nFormatting for the backwall of a 3D chart. \n<div class=\"NOTE\"><h5>note</h5><p>This property is null for non 3D charts</p></div>\n"
  example: []
  syntax:
    content: public ExcelChartSurface BackWall { get; protected set; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.ExcelChartSurface
    content.vb: Public Property BackWall As ExcelChartSurface
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.BackWall*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.RoundedCorners
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.RoundedCorners
  id: RoundedCorners
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: RoundedCorners
  nameWithType: ExcelChart.RoundedCorners
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.RoundedCorners
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: RoundedCorners
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 695
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nBorder rounded corners\n"
  example: []
  syntax:
    content: public abstract bool RoundedCorners { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride Property RoundedCorners As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.RoundedCorners*
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.ShowHiddenData
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.ShowHiddenData
  id: ShowHiddenData
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: ShowHiddenData
  nameWithType: ExcelChart.ShowHiddenData
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.ShowHiddenData
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ShowHiddenData
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 703
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nShow data in hidden rows and columns\n"
  example: []
  syntax:
    content: public abstract bool ShowHiddenData { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride Property ShowHiddenData As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.ShowHiddenData*
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.DisplayBlanksAs
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.DisplayBlanksAs
  id: DisplayBlanksAs
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: DisplayBlanksAs
  nameWithType: ExcelChart.DisplayBlanksAs
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.DisplayBlanksAs
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: DisplayBlanksAs
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 711
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nSpecifies the possible ways to display blanks\n"
  example: []
  syntax:
    content: public abstract eDisplayBlanksAs DisplayBlanksAs { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs
    content.vb: Public MustOverride Property DisplayBlanksAs As eDisplayBlanksAs
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.DisplayBlanksAs*
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.ShowDataLabelsOverMaximum
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.ShowDataLabelsOverMaximum
  id: ShowDataLabelsOverMaximum
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: ShowDataLabelsOverMaximum
  nameWithType: ExcelChart.ShowDataLabelsOverMaximum
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.ShowDataLabelsOverMaximum
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ShowDataLabelsOverMaximum
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 719
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\nSpecifies data labels over the maximum of the chart shall be shown\n"
  example: []
  syntax:
    content: public abstract bool ShowDataLabelsOverMaximum { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride Property ShowDataLabelsOverMaximum As Boolean
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.ShowDataLabelsOverMaximum*
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.View3D
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.View3D
  id: View3D
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  langs:
  - csharp
  - vb
  name: View3D
  nameWithType: ExcelChart.View3D
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.View3D
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Chart/ExcelChart.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: View3D
    path: ../src/EPPlus/Drawing/Chart/ExcelChart.cs
    startLine: 727
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Chart
  summary: "\n3D-settings\n"
  example: []
  syntax:
    content: public abstract ExcelView3D View3D { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.ExcelView3D
    content.vb: Public MustOverride ReadOnly Property View3D As ExcelView3D
  overload: OfficeOpenXml.Drawing.Chart.ExcelChart.View3D*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
references:
- uid: OfficeOpenXml.Drawing.Chart
  commentId: N:OfficeOpenXml.Drawing.Chart
  name: OfficeOpenXml.Drawing.Chart
  nameWithType: OfficeOpenXml.Drawing.Chart
  fullName: OfficeOpenXml.Drawing.Chart
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.XmlHelper
  commentId: T:OfficeOpenXml.XmlHelper
  parent: OfficeOpenXml
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: OfficeOpenXml.XmlHelper
- uid: OfficeOpenXml.Drawing.ExcelDrawing
  commentId: T:OfficeOpenXml.Drawing.ExcelDrawing
  parent: OfficeOpenXml.Drawing
  name: ExcelDrawing
  nameWithType: ExcelDrawing
  fullName: OfficeOpenXml.Drawing.ExcelDrawing
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EMU_PER_PIXEL
  nameWithType: ExcelDrawing.EMU_PER_PIXEL
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EMU_PER_POINT
  nameWithType: ExcelDrawing.EMU_PER_POINT
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EMU_PER_CM
  nameWithType: ExcelDrawing.EMU_PER_CM
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EMU_PER_MM
  nameWithType: ExcelDrawing.EMU_PER_MM
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EMU_PER_US_INCH
  nameWithType: ExcelDrawing.EMU_PER_US_INCH
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EMU_PER_PICA
  nameWithType: ExcelDrawing.EMU_PER_PICA
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Name
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Name
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Name
  nameWithType: ExcelDrawing.Name
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Name
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Description
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Description
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Description
  nameWithType: ExcelDrawing.Description
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Description
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EditAs
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.EditAs
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EditAs
  nameWithType: ExcelDrawing.EditAs
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EditAs
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Locked
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Locked
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Locked
  nameWithType: ExcelDrawing.Locked
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Locked
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Print
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Print
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Print
  nameWithType: ExcelDrawing.Print
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Print
- uid: OfficeOpenXml.Drawing.ExcelDrawing.From
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.From
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: From
  nameWithType: ExcelDrawing.From
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.From
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Position
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Position
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Position
  nameWithType: ExcelDrawing.Position
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Position
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Size
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Size
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Size
  nameWithType: ExcelDrawing.Size
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Size
- uid: OfficeOpenXml.Drawing.ExcelDrawing.To
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.To
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: To
  nameWithType: ExcelDrawing.To
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.To
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Hyperlink
  nameWithType: ExcelDrawing.Hyperlink
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
- uid: OfficeOpenXml.Drawing.ExcelDrawing.As
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.As
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: As
  nameWithType: ExcelDrawing.As
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.As
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: SetPosition(Int32, Int32)
  nameWithType: ExcelDrawing.SetPosition(Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)
    name: SetPosition
    nameWithType: ExcelDrawing.SetPosition
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)
    name: SetPosition
    nameWithType: ExcelDrawing.SetPosition
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: CellAnchor
  nameWithType: ExcelDrawing.CellAnchor
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
- uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: ChangeCellAnchor(eEditAs, Int32, Int32, Int32, Int32)
  nameWithType: ExcelDrawing.ChangeCellAnchor(eEditAs, Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs, System.Int32, System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
    name: ChangeCellAnchor
    nameWithType: ExcelDrawing.ChangeCellAnchor
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.eEditAs
    name: eEditAs
    nameWithType: eEditAs
    fullName: OfficeOpenXml.Drawing.eEditAs
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
    name: ChangeCellAnchor
    nameWithType: ExcelDrawing.ChangeCellAnchor
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.eEditAs
    name: eEditAs
    nameWithType: eEditAs
    fullName: OfficeOpenXml.Drawing.eEditAs
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: ChangeCellAnchor(eEditAs)
  nameWithType: ExcelDrawing.ChangeCellAnchor(eEditAs)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
    name: ChangeCellAnchor
    nameWithType: ExcelDrawing.ChangeCellAnchor
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.eEditAs
    name: eEditAs
    nameWithType: eEditAs
    fullName: OfficeOpenXml.Drawing.eEditAs
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
    name: ChangeCellAnchor
    nameWithType: ExcelDrawing.ChangeCellAnchor
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.eEditAs
    name: eEditAs
    nameWithType: eEditAs
    fullName: OfficeOpenXml.Drawing.eEditAs
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: SetPosition(Int32, Int32, Int32, Int32)
  nameWithType: ExcelDrawing.SetPosition(Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32, System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
    name: SetPosition
    nameWithType: ExcelDrawing.SetPosition
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
    name: SetPosition
    nameWithType: ExcelDrawing.SetPosition
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: SetSize(Int32)
  nameWithType: ExcelDrawing.SetSize(Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
    name: SetSize
    nameWithType: ExcelDrawing.SetSize
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
    name: SetSize
    nameWithType: ExcelDrawing.SetSize
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: SetSize(Int32, Int32)
  nameWithType: ExcelDrawing.SetSize(Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)
    name: SetSize
    nameWithType: ExcelDrawing.SetSize
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)
    name: SetSize
    nameWithType: ExcelDrawing.SetSize
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: SendToBack()
  nameWithType: ExcelDrawing.SendToBack()
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack()
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
    name: SendToBack
    nameWithType: ExcelDrawing.SendToBack
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
    name: SendToBack
    nameWithType: ExcelDrawing.SendToBack
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: BringToFront()
  nameWithType: ExcelDrawing.BringToFront()
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront()
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
    name: BringToFront
    nameWithType: ExcelDrawing.BringToFront
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
    name: BringToFront
    nameWithType: ExcelDrawing.BringToFront
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Group(ExcelDrawing[])
  nameWithType: ExcelDrawing.Group(ExcelDrawing[])
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
  nameWithType.vb: ExcelDrawing.Group(ExcelDrawing())
  fullName.vb: OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing())
  name.vb: Group(ExcelDrawing())
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
    name: Group
    nameWithType: ExcelDrawing.Group
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.Group
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.ExcelDrawing
    name: ExcelDrawing
    nameWithType: ExcelDrawing
    fullName: OfficeOpenXml.Drawing.ExcelDrawing
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
    name: Group
    nameWithType: ExcelDrawing.Group
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.Group
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.ExcelDrawing
    name: ExcelDrawing
    nameWithType: ExcelDrawing
    fullName: OfficeOpenXml.Drawing.ExcelDrawing
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: UnGroup(Boolean)
  nameWithType: ExcelDrawing.UnGroup(Boolean)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
    name: UnGroup
    nameWithType: ExcelDrawing.UnGroup
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
    name: UnGroup
    nameWithType: ExcelDrawing.UnGroup
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: ParentGroup
  nameWithType: ExcelDrawing.ParentGroup
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Dispose()
  nameWithType: ExcelDrawing.Dispose()
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Dispose()
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.Dispose
    name: Dispose
    nameWithType: ExcelDrawing.Dispose
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.Dispose
    name: Dispose
    nameWithType: ExcelDrawing.Dispose
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: AdjustPositionAndSize()
  nameWithType: ExcelDrawing.AdjustPositionAndSize()
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize()
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
    name: AdjustPositionAndSize
    nameWithType: ExcelDrawing.AdjustPositionAndSize
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
    name: AdjustPositionAndSize
    nameWithType: ExcelDrawing.AdjustPositionAndSize
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: OfficeOpenXml.Drawing
  commentId: N:OfficeOpenXml.Drawing
  name: OfficeOpenXml.Drawing
  nameWithType: OfficeOpenXml.Drawing
  fullName: OfficeOpenXml.Drawing
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager
  name: StyleManager
  nameWithType: ExcelChart.StyleManager
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager
- uid: OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager
  commentId: T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager
  parent: OfficeOpenXml.Drawing.Chart.Style
  name: ExcelChartStyleManager
  nameWithType: ExcelChartStyleManager
  fullName: OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager
- uid: OfficeOpenXml.Drawing.Chart.Style
  commentId: N:OfficeOpenXml.Drawing.Chart.Style
  name: OfficeOpenXml.Drawing.Chart.Style
  nameWithType: OfficeOpenXml.Drawing.Chart.Style
  fullName: OfficeOpenXml.Drawing.Chart.Style
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.UseSecondaryAxis*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.UseSecondaryAxis
  name: UseSecondaryAxis
  nameWithType: ExcelChart.UseSecondaryAxis
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.UseSecondaryAxis
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.WorkSheet*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.WorkSheet
  name: WorkSheet
  nameWithType: ExcelChart.WorkSheet
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.WorkSheet
- uid: OfficeOpenXml.ExcelWorksheet
  commentId: T:OfficeOpenXml.ExcelWorksheet
  parent: OfficeOpenXml
  name: ExcelWorksheet
  nameWithType: ExcelWorksheet
  fullName: OfficeOpenXml.ExcelWorksheet
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.ChartXml*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.ChartXml
  name: ChartXml
  nameWithType: ExcelChart.ChartXml
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.ChartXml
- uid: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  parent: System.Xml
  isExternal: true
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: DrawingType
  nameWithType: ExcelDrawing.DrawingType
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.DrawingType*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.DrawingType
  name: DrawingType
  nameWithType: ExcelChart.DrawingType
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.DrawingType
- uid: OfficeOpenXml.Drawing.eDrawingType
  commentId: T:OfficeOpenXml.Drawing.eDrawingType
  parent: OfficeOpenXml.Drawing
  name: eDrawingType
  nameWithType: eDrawingType
  fullName: OfficeOpenXml.Drawing.eDrawingType
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.ChartType*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.ChartType
  name: ChartType
  nameWithType: ExcelChart.ChartType
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.ChartType
- uid: OfficeOpenXml.Drawing.Chart.eChartType
  commentId: T:OfficeOpenXml.Drawing.Chart.eChartType
  parent: OfficeOpenXml.Drawing.Chart
  name: eChartType
  nameWithType: eChartType
  fullName: OfficeOpenXml.Drawing.Chart.eChartType
- uid: System.Xml.XmlNode
  commentId: T:System.Xml.XmlNode
  parent: System.Xml
  isExternal: true
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Title*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.Title
  name: Title
  nameWithType: ExcelChart.Title
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Title
- uid: OfficeOpenXml.Drawing.Chart.ExcelChartTitle
  commentId: T:OfficeOpenXml.Drawing.Chart.ExcelChartTitle
  parent: OfficeOpenXml.Drawing.Chart
  name: ExcelChartTitle
  nameWithType: ExcelChartTitle
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChartTitle
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.HasTitle*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.HasTitle
  name: HasTitle
  nameWithType: ExcelChart.HasTitle
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.HasTitle
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.HasLegend*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.HasLegend
  name: HasLegend
  nameWithType: ExcelChart.HasLegend
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.HasLegend
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.DeleteTitle*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.DeleteTitle
  name: DeleteTitle
  nameWithType: ExcelChart.DeleteTitle
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.DeleteTitle
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Series*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.Series
  name: Series
  nameWithType: ExcelChart.Series
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Series
- uid: OfficeOpenXml.Drawing.Chart.ExcelChartSeries{OfficeOpenXml.Drawing.Chart.ExcelChartSerie}
  commentId: T:OfficeOpenXml.Drawing.Chart.ExcelChartSeries{OfficeOpenXml.Drawing.Chart.ExcelChartSerie}
  parent: OfficeOpenXml.Drawing.Chart
  definition: OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1
  name: ExcelChartSeries<ExcelChartSerie>
  nameWithType: ExcelChartSeries<ExcelChartSerie>
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChartSeries<OfficeOpenXml.Drawing.Chart.ExcelChartSerie>
  nameWithType.vb: ExcelChartSeries(Of ExcelChartSerie)
  fullName.vb: OfficeOpenXml.Drawing.Chart.ExcelChartSeries(Of OfficeOpenXml.Drawing.Chart.ExcelChartSerie)
  name.vb: ExcelChartSeries(Of ExcelChartSerie)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1
    name: ExcelChartSeries
    nameWithType: ExcelChartSeries
    fullName: OfficeOpenXml.Drawing.Chart.ExcelChartSeries
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Drawing.Chart.ExcelChartSerie
    name: ExcelChartSerie
    nameWithType: ExcelChartSerie
    fullName: OfficeOpenXml.Drawing.Chart.ExcelChartSerie
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1
    name: ExcelChartSeries
    nameWithType: ExcelChartSeries
    fullName: OfficeOpenXml.Drawing.Chart.ExcelChartSeries
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Drawing.Chart.ExcelChartSerie
    name: ExcelChartSerie
    nameWithType: ExcelChartSerie
    fullName: OfficeOpenXml.Drawing.Chart.ExcelChartSerie
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1
  commentId: T:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1
  name: ExcelChartSeries<T>
  nameWithType: ExcelChartSeries<T>
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChartSeries<T>
  nameWithType.vb: ExcelChartSeries(Of T)
  fullName.vb: OfficeOpenXml.Drawing.Chart.ExcelChartSeries(Of T)
  name.vb: ExcelChartSeries(Of T)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1
    name: ExcelChartSeries
    nameWithType: ExcelChartSeries
    fullName: OfficeOpenXml.Drawing.Chart.ExcelChartSeries
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1
    name: ExcelChartSeries
    nameWithType: ExcelChartSeries
    fullName: OfficeOpenXml.Drawing.Chart.ExcelChartSeries
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Axis*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.Axis
  name: Axis
  nameWithType: ExcelChart.Axis
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Axis
- uid: OfficeOpenXml.Drawing.Chart.ExcelChartAxis[]
  isExternal: true
  name: ExcelChartAxis[]
  nameWithType: ExcelChartAxis[]
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChartAxis[]
  nameWithType.vb: ExcelChartAxis()
  fullName.vb: OfficeOpenXml.Drawing.Chart.ExcelChartAxis()
  name.vb: ExcelChartAxis()
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.Chart.ExcelChartAxis
    name: ExcelChartAxis
    nameWithType: ExcelChartAxis
    fullName: OfficeOpenXml.Drawing.Chart.ExcelChartAxis
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: OfficeOpenXml.Drawing.Chart.ExcelChartAxis
    name: ExcelChartAxis
    nameWithType: ExcelChartAxis
    fullName: OfficeOpenXml.Drawing.Chart.ExcelChartAxis
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.XAxis*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.XAxis
  name: XAxis
  nameWithType: ExcelChart.XAxis
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.XAxis
- uid: OfficeOpenXml.Drawing.Chart.ExcelChartAxis
  commentId: T:OfficeOpenXml.Drawing.Chart.ExcelChartAxis
  parent: OfficeOpenXml.Drawing.Chart
  name: ExcelChartAxis
  nameWithType: ExcelChartAxis
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChartAxis
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.YAxis*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.YAxis
  name: YAxis
  nameWithType: ExcelChart.YAxis
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.YAxis
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager
  commentId: P:OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager
  parent: OfficeOpenXml.Drawing.Chart.ExcelChart
  name: StyleManager
  nameWithType: ExcelChart.StyleManager
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Style*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.Style
  name: Style
  nameWithType: ExcelChart.Style
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Style
- uid: OfficeOpenXml.Drawing.Chart.eChartStyle
  commentId: T:OfficeOpenXml.Drawing.Chart.eChartStyle
  parent: OfficeOpenXml.Drawing.Chart
  name: eChartStyle
  nameWithType: eChartStyle
  fullName: OfficeOpenXml.Drawing.Chart.eChartStyle
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart
  commentId: T:OfficeOpenXml.Drawing.Chart.ExcelChart
  parent: OfficeOpenXml.Drawing.Chart
  name: ExcelChart
  nameWithType: ExcelChart
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.PlotArea*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.PlotArea
  name: PlotArea
  nameWithType: ExcelChart.PlotArea
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.PlotArea
- uid: OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea
  commentId: T:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea
  parent: OfficeOpenXml.Drawing.Chart
  name: ExcelChartPlotArea
  nameWithType: ExcelChartPlotArea
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Legend*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.Legend
  name: Legend
  nameWithType: ExcelChart.Legend
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Legend
- uid: OfficeOpenXml.Drawing.Chart.ExcelChartLegend
  commentId: T:OfficeOpenXml.Drawing.Chart.ExcelChartLegend
  parent: OfficeOpenXml.Drawing.Chart
  name: ExcelChartLegend
  nameWithType: ExcelChartLegend
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChartLegend
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Border*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.Border
  name: Border
  nameWithType: ExcelChart.Border
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Border
- uid: OfficeOpenXml.Drawing.ExcelDrawingBorder
  commentId: T:OfficeOpenXml.Drawing.ExcelDrawingBorder
  parent: OfficeOpenXml.Drawing
  name: ExcelDrawingBorder
  nameWithType: ExcelDrawingBorder
  fullName: OfficeOpenXml.Drawing.ExcelDrawingBorder
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Fill*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.Fill
  name: Fill
  nameWithType: ExcelChart.Fill
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Fill
- uid: OfficeOpenXml.Drawing.ExcelDrawingFill
  commentId: T:OfficeOpenXml.Drawing.ExcelDrawingFill
  parent: OfficeOpenXml.Drawing
  name: ExcelDrawingFill
  nameWithType: ExcelDrawingFill
  fullName: OfficeOpenXml.Drawing.ExcelDrawingFill
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Effect*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.Effect
  name: Effect
  nameWithType: ExcelChart.Effect
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Effect
- uid: OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle
  commentId: T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle
  parent: OfficeOpenXml.Drawing.Style.Effect
  name: ExcelDrawingEffectStyle
  nameWithType: ExcelDrawingEffectStyle
  fullName: OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle
- uid: OfficeOpenXml.Drawing.Style.Effect
  commentId: N:OfficeOpenXml.Drawing.Style.Effect
  name: OfficeOpenXml.Drawing.Style.Effect
  nameWithType: OfficeOpenXml.Drawing.Style.Effect
  fullName: OfficeOpenXml.Drawing.Style.Effect
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.ThreeD*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.ThreeD
  name: ThreeD
  nameWithType: ExcelChart.ThreeD
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.ThreeD
- uid: OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D
  commentId: T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D
  parent: OfficeOpenXml.Drawing.Style.ThreeD
  name: ExcelDrawing3D
  nameWithType: ExcelDrawing3D
  fullName: OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D
- uid: OfficeOpenXml.Drawing.Style.ThreeD
  commentId: N:OfficeOpenXml.Drawing.Style.ThreeD
  name: OfficeOpenXml.Drawing.Style.ThreeD
  nameWithType: OfficeOpenXml.Drawing.Style.ThreeD
  fullName: OfficeOpenXml.Drawing.Style.ThreeD
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Font*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.Font
  name: Font
  nameWithType: ExcelChart.Font
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Font
- uid: OfficeOpenXml.Style.ExcelTextFont
  commentId: T:OfficeOpenXml.Style.ExcelTextFont
  parent: OfficeOpenXml.Style
  name: ExcelTextFont
  nameWithType: ExcelTextFont
  fullName: OfficeOpenXml.Style.ExcelTextFont
- uid: OfficeOpenXml.Style
  commentId: N:OfficeOpenXml.Style
  name: OfficeOpenXml.Style
  nameWithType: OfficeOpenXml.Style
  fullName: OfficeOpenXml.Style
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.TextBody*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.TextBody
  name: TextBody
  nameWithType: ExcelChart.TextBody
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.TextBody
- uid: OfficeOpenXml.Drawing.ExcelTextBody
  commentId: T:OfficeOpenXml.Drawing.ExcelTextBody
  parent: OfficeOpenXml.Drawing
  name: ExcelTextBody
  nameWithType: ExcelTextBody
  fullName: OfficeOpenXml.Drawing.ExcelTextBody
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.PivotTableSource*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.PivotTableSource
  name: PivotTableSource
  nameWithType: ExcelChart.PivotTableSource
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.PivotTableSource
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTable
  commentId: T:OfficeOpenXml.Table.PivotTable.ExcelPivotTable
  parent: OfficeOpenXml.Table.PivotTable
  name: ExcelPivotTable
  nameWithType: ExcelPivotTable
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTable
- uid: OfficeOpenXml.Table.PivotTable
  commentId: N:OfficeOpenXml.Table.PivotTable
  name: OfficeOpenXml.Table.PivotTable
  nameWithType: OfficeOpenXml.Table.PivotTable
  fullName: OfficeOpenXml.Table.PivotTable
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsType3D*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsType3D
  name: IsType3D
  nameWithType: ExcelChart.IsType3D
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsType3D
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeLine*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeLine
  name: IsTypeLine
  nameWithType: ExcelChart.IsTypeLine
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeLine
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeRadar*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeRadar
  name: IsTypeRadar
  nameWithType: ExcelChart.IsTypeRadar
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeRadar
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeScatter*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeScatter
  name: IsTypeScatter
  nameWithType: ExcelChart.IsTypeScatter
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeScatter
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeBubble*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeBubble
  name: IsTypeBubble
  nameWithType: ExcelChart.IsTypeBubble
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeBubble
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeArea*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeArea
  name: IsTypeArea
  nameWithType: ExcelChart.IsTypeArea
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeArea
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeSurface*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeSurface
  name: IsTypeSurface
  nameWithType: ExcelChart.IsTypeSurface
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeSurface
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.HasThirdAxis*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.HasThirdAxis
  name: HasThirdAxis
  nameWithType: ExcelChart.HasThirdAxis
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.HasThirdAxis
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeShape*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeShape
  name: IsTypeShape
  nameWithType: ExcelChart.IsTypeShape
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeShape
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePercentStacked*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePercentStacked
  name: IsTypePercentStacked
  nameWithType: ExcelChart.IsTypePercentStacked
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePercentStacked
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStacked*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStacked
  name: IsTypeStacked
  nameWithType: ExcelChart.IsTypeStacked
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStacked
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeClustered*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeClustered
  name: IsTypeClustered
  nameWithType: ExcelChart.IsTypeClustered
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeClustered
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePieDoughnut*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePieDoughnut
  name: IsTypePieDoughnut
  nameWithType: ExcelChart.IsTypePieDoughnut
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePieDoughnut
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeDoughnut*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeDoughnut
  name: IsTypeDoughnut
  nameWithType: ExcelChart.IsTypeDoughnut
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeDoughnut
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePie*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePie
  name: IsTypePie
  nameWithType: ExcelChart.IsTypePie
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePie
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStock*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStock
  name: IsTypeStock
  nameWithType: ExcelChart.IsTypeStock
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStock
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.VaryColors*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.VaryColors
  name: VaryColors
  nameWithType: ExcelChart.VaryColors
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.VaryColors
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.Floor*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.Floor
  name: Floor
  nameWithType: ExcelChart.Floor
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.Floor
- uid: OfficeOpenXml.Drawing.Chart.ExcelChartSurface
  commentId: T:OfficeOpenXml.Drawing.Chart.ExcelChartSurface
  parent: OfficeOpenXml.Drawing.Chart
  name: ExcelChartSurface
  nameWithType: ExcelChartSurface
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChartSurface
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.SideWall*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.SideWall
  name: SideWall
  nameWithType: ExcelChart.SideWall
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.SideWall
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.BackWall*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.BackWall
  name: BackWall
  nameWithType: ExcelChart.BackWall
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.BackWall
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.RoundedCorners*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.RoundedCorners
  name: RoundedCorners
  nameWithType: ExcelChart.RoundedCorners
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.RoundedCorners
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.ShowHiddenData*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.ShowHiddenData
  name: ShowHiddenData
  nameWithType: ExcelChart.ShowHiddenData
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.ShowHiddenData
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.DisplayBlanksAs*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.DisplayBlanksAs
  name: DisplayBlanksAs
  nameWithType: ExcelChart.DisplayBlanksAs
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.DisplayBlanksAs
- uid: OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs
  commentId: T:OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs
  parent: OfficeOpenXml.Drawing.Chart
  name: eDisplayBlanksAs
  nameWithType: eDisplayBlanksAs
  fullName: OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.ShowDataLabelsOverMaximum*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.ShowDataLabelsOverMaximum
  name: ShowDataLabelsOverMaximum
  nameWithType: ExcelChart.ShowDataLabelsOverMaximum
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.ShowDataLabelsOverMaximum
- uid: OfficeOpenXml.Drawing.Chart.ExcelChart.View3D*
  commentId: Overload:OfficeOpenXml.Drawing.Chart.ExcelChart.View3D
  name: View3D
  nameWithType: ExcelChart.View3D
  fullName: OfficeOpenXml.Drawing.Chart.ExcelChart.View3D
- uid: OfficeOpenXml.Drawing.ExcelView3D
  commentId: T:OfficeOpenXml.Drawing.ExcelView3D
  parent: OfficeOpenXml.Drawing
  name: ExcelView3D
  nameWithType: ExcelView3D
  fullName: OfficeOpenXml.Drawing.ExcelView3D
