### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection
  commentId: T:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection
  id: ExcelExternalCellCollection
  parent: OfficeOpenXml.ExternalReferences
  children:
  - OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Current
  - OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Dispose
  - OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.GetEnumerator
  - OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item(System.Int32,System.Int32)
  - OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item(System.String)
  - OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.MoveNext
  - OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Reset
  - OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerable#GetEnumerator
  - OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerator#Current
  langs:
  - csharp
  - vb
  name: ExcelExternalCellCollection
  nameWithType: ExcelExternalCellCollection
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection
  type: Class
  source:
    remote:
      path: src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelExternalCellCollection
    path: ../src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
    startLine: 22
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ExternalReferences
  summary: "\nA collection of <xref href=\"OfficeOpenXml.ExternalReferences.ExcelExternalCellValue\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public class ExcelExternalCellCollection : IEnumerable<ExcelExternalCellValue>, IEnumerable, IEnumerator<ExcelExternalCellValue>, IEnumerator, IDisposable'
    content.vb: >-
      Public Class ExcelExternalCellCollection
          Implements IEnumerable(Of ExcelExternalCellValue), IEnumerable, IEnumerator(Of ExcelExternalCellValue), IEnumerator, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}
  - System.Collections.IEnumerable
  - System.Collections.Generic.IEnumerator{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item(System.String)
  commentId: P:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item(System.String)
  id: Item(System.String)
  parent: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: ExcelExternalCellCollection.Item[String]
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item[System.String]
  type: Property
  source:
    remote:
      path: src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: this[]
    path: ../src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
    startLine: 39
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ExternalReferences
  summary: "\nAn indexer to access the the external cell values \n"
  example: []
  syntax:
    content: public ExcelExternalCellValue this[string cellAddress] { get; }
    parameters:
    - id: cellAddress
      type: System.String
      description: The cell address
    return:
      type: OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
      description: The <xref href="OfficeOpenXml.ExternalReferences.ExcelExternalCellValue" data-throw-if-not-resolved="false"></xref>
    content.vb: Public ReadOnly Property Item(cellAddress As String) As ExcelExternalCellValue
  overload: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item*
  nameWithType.vb: ExcelExternalCellCollection.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item(System.String)
  name.vb: Item(String)
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item(System.Int32,System.Int32)
  commentId: P:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item(System.Int32,System.Int32)
  id: Item(System.Int32,System.Int32)
  parent: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection
  langs:
  - csharp
  - vb
  name: Item[Int32, Int32]
  nameWithType: ExcelExternalCellCollection.Item[Int32, Int32]
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item[System.Int32, System.Int32]
  type: Property
  source:
    remote:
      path: src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: this[]
    path: ../src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
    startLine: 56
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ExternalReferences
  summary: "\nAn indexer to access the the external cell values \n"
  example: []
  syntax:
    content: public ExcelExternalCellValue this[int row, int column] { get; }
    parameters:
    - id: row
      type: System.Int32
      description: The row of the cell to get the value from
    - id: column
      type: System.Int32
      description: The column of the cell to get the value from
    return:
      type: OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
      description: The <xref href="OfficeOpenXml.ExternalReferences.ExcelExternalCellValue" data-throw-if-not-resolved="false"></xref>
    content.vb: Public ReadOnly Property Item(row As Integer, column As Integer) As ExcelExternalCellValue
  overload: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item*
  nameWithType.vb: ExcelExternalCellCollection.Item(Int32, Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item(System.Int32, System.Int32)
  name.vb: Item(Int32, Int32)
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Current
  commentId: P:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Current
  id: Current
  parent: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: ExcelExternalCellCollection.Current
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Current
  type: Property
  source:
    remote:
      path: src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Current
    path: ../src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
    startLine: 77
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ExternalReferences
  summary: "\nThe current value of the <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public ExcelExternalCellValue Current { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
    content.vb: Public ReadOnly Property Current As ExcelExternalCellValue
  overload: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Current*
  implements:
  - System.Collections.Generic.IEnumerator{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}.Current
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerator#Current
  commentId: P:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection
  langs:
  - csharp
  - vb
  name: IEnumerator.Current
  nameWithType: ExcelExternalCellCollection.IEnumerator.Current
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System.Collections.IEnumerator.Current
  type: Property
  source:
    remote:
      path: src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: System.Collections.IEnumerator.Current
    path: ../src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
    startLine: 95
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ExternalReferences
  summary: "\nThe current value of the <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: object IEnumerator.Current { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property System.Collections.IEnumerator.Current As Object Implements IEnumerator.Current
  overload: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerator#Current*
  implements:
  - System.Collections.IEnumerator.Current
  nameWithType.vb: ExcelExternalCellCollection.System.Collections.IEnumerator.Current
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IEnumerator.Current
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Dispose
  commentId: M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Dispose
  id: Dispose
  parent: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ExcelExternalCellCollection.Dispose()
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Dispose()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Dispose
    path: ../src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
    startLine: 105
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ExternalReferences
  summary: "\nDisposed the object\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.GetEnumerator
  commentId: M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.GetEnumerator
  id: GetEnumerator
  parent: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ExcelExternalCellCollection.GetEnumerator()
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetEnumerator
    path: ../src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
    startLine: 113
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ExternalReferences
  summary: "\nGet the enumerator for this collection\n"
  example: []
  syntax:
    content: public IEnumerator<ExcelExternalCellValue> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}
      description: ''
    content.vb: Public Function GetEnumerator As IEnumerator(Of ExcelExternalCellValue)
  overload: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.MoveNext
  commentId: M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.MoveNext
  id: MoveNext
  parent: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: ExcelExternalCellCollection.MoveNext()
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.MoveNext()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: MoveNext
    path: ../src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
    startLine: 122
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ExternalReferences
  summary: "\nMove to the next item in the collection\n"
  example: []
  syntax:
    content: public bool MoveNext()
    return:
      type: System.Boolean
      description: true if more items exists
    content.vb: Public Function MoveNext As Boolean
  overload: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.MoveNext*
  implements:
  - System.Collections.IEnumerator.MoveNext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Reset
  commentId: M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Reset
  id: Reset
  parent: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: ExcelExternalCellCollection.Reset()
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Reset()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Reset
    path: ../src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
    startLine: 130
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ExternalReferences
  summary: "\nResets the enumeration\n"
  example: []
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Reset*
  implements:
  - System.Collections.IEnumerator.Reset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ExcelExternalCellCollection.IEnumerable.GetEnumerator()
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../src/EPPlus/ExternalReferences/ExcelExternalCellCollection.cs
    startLine: 139
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ExternalReferences
  summary: "\nGet the enumerator for this collection\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: ''
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExcelExternalCellCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
  commentId: T:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
  parent: OfficeOpenXml.ExternalReferences
  name: ExcelExternalCellValue
  nameWithType: ExcelExternalCellValue
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
- uid: OfficeOpenXml.ExternalReferences
  commentId: N:OfficeOpenXml.ExternalReferences
  name: OfficeOpenXml.ExternalReferences
  nameWithType: OfficeOpenXml.ExternalReferences
  fullName: OfficeOpenXml.ExternalReferences
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ExcelExternalCellValue>
  nameWithType: IEnumerable<ExcelExternalCellValue>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExternalReferences.ExcelExternalCellValue>
  nameWithType.vb: IEnumerable(Of ExcelExternalCellValue)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.ExternalReferences.ExcelExternalCellValue)
  name.vb: IEnumerable(Of ExcelExternalCellValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
    name: ExcelExternalCellValue
    nameWithType: ExcelExternalCellValue
    fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
    name: ExcelExternalCellValue
    nameWithType: ExcelExternalCellValue
    fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}
  commentId: T:System.Collections.Generic.IEnumerator{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<ExcelExternalCellValue>
  nameWithType: IEnumerator<ExcelExternalCellValue>
  fullName: System.Collections.Generic.IEnumerator<OfficeOpenXml.ExternalReferences.ExcelExternalCellValue>
  nameWithType.vb: IEnumerator(Of ExcelExternalCellValue)
  fullName.vb: System.Collections.Generic.IEnumerator(Of OfficeOpenXml.ExternalReferences.ExcelExternalCellValue)
  name.vb: IEnumerator(Of ExcelExternalCellValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
    name: ExcelExternalCellValue
    nameWithType: ExcelExternalCellValue
    fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
    name: ExcelExternalCellValue
    nameWithType: ExcelExternalCellValue
    fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item*
  commentId: Overload:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item
  name: Item
  nameWithType: ExcelExternalCellCollection.Item
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Current*
  commentId: Overload:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Current
  name: Current
  nameWithType: ExcelExternalCellCollection.Current
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Current
- uid: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}.Current
  commentId: P:System.Collections.Generic.IEnumerator{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}.Current
  parent: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}
  definition: System.Collections.Generic.IEnumerator`1.Current
  name: Current
  nameWithType: IEnumerator<ExcelExternalCellValue>.Current
  fullName: System.Collections.Generic.IEnumerator<OfficeOpenXml.ExternalReferences.ExcelExternalCellValue>.Current
  nameWithType.vb: IEnumerator(Of ExcelExternalCellValue).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of OfficeOpenXml.ExternalReferences.ExcelExternalCellValue).Current
- uid: System.Collections.Generic.IEnumerator`1.Current
  commentId: P:System.Collections.Generic.IEnumerator`1.Current
  isExternal: true
  name: Current
  nameWithType: IEnumerator<T>.Current
  fullName: System.Collections.Generic.IEnumerator<T>.Current
  nameWithType.vb: IEnumerator(Of T).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of T).Current
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerator#Current*
  commentId: Overload:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerator#Current
  name: IEnumerator.Current
  nameWithType: ExcelExternalCellCollection.IEnumerator.Current
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System.Collections.IEnumerator.Current
  nameWithType.vb: ExcelExternalCellCollection.System.Collections.IEnumerator.Current
  name.vb: System.Collections.IEnumerator.Current
- uid: System.Collections.IEnumerator.Current
  commentId: P:System.Collections.IEnumerator.Current
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Current
  nameWithType: IEnumerator.Current
  fullName: System.Collections.IEnumerator.Current
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Dispose*
  commentId: Overload:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Dispose
  name: Dispose
  nameWithType: ExcelExternalCellCollection.Dispose
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.GetEnumerator*
  commentId: Overload:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.GetEnumerator
  name: GetEnumerator
  nameWithType: ExcelExternalCellCollection.GetEnumerator
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{OfficeOpenXml.ExternalReferences.ExcelExternalCellValue}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<ExcelExternalCellValue>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExternalReferences.ExcelExternalCellValue>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of ExcelExternalCellValue).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.ExternalReferences.ExcelExternalCellValue).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<ExcelExternalCellValue>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExternalReferences.ExcelExternalCellValue>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of ExcelExternalCellValue).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.ExternalReferences.ExcelExternalCellValue).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.MoveNext*
  commentId: Overload:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.MoveNext
  name: MoveNext
  nameWithType: ExcelExternalCellCollection.MoveNext
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.MoveNext
- uid: System.Collections.IEnumerator.MoveNext
  commentId: M:System.Collections.IEnumerator.MoveNext
  parent: System.Collections.IEnumerator
  isExternal: true
  name: MoveNext()
  nameWithType: IEnumerator.MoveNext()
  fullName: System.Collections.IEnumerator.MoveNext()
  spec.csharp:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Reset*
  commentId: Overload:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Reset
  name: Reset
  nameWithType: ExcelExternalCellCollection.Reset
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Reset
- uid: System.Collections.IEnumerator.Reset
  commentId: M:System.Collections.IEnumerator.Reset
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Reset()
  nameWithType: IEnumerator.Reset()
  fullName: System.Collections.IEnumerator.Reset()
  spec.csharp:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: ExcelExternalCellCollection.IEnumerable.GetEnumerator
  fullName: OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExcelExternalCellCollection.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
