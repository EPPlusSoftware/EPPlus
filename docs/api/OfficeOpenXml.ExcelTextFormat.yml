### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.ExcelTextFormat
  commentId: T:OfficeOpenXml.ExcelTextFormat
  id: ExcelTextFormat
  parent: OfficeOpenXml
  children:
  - OfficeOpenXml.ExcelTextFormat.#ctor
  langs:
  - csharp
  - vb
  name: ExcelTextFormat
  nameWithType: ExcelTextFormat
  fullName: OfficeOpenXml.ExcelTextFormat
  type: Class
  source:
    remote:
      path: src/EPPlus/ExcelTextFormats/ExcelTextFormat.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelTextFormat
    path: ../src/EPPlus/ExcelTextFormats/ExcelTextFormat.cs
    startLine: 51
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nDescribes how to split a CSV text. Used by the ExcelRange.LoadFromText method\n"
  example: []
  syntax:
    content: 'public class ExcelTextFormat : ExcelTextFormatBase'
    content.vb: >-
      Public Class ExcelTextFormat
          Inherits ExcelTextFormatBase
  inheritance:
  - System.Object
  - OfficeOpenXml.ExcelTextFileFormat
  - OfficeOpenXml.ExcelTextFormatBase
  inheritedMembers:
  - OfficeOpenXml.ExcelTextFormatBase.Delimiter
  - OfficeOpenXml.ExcelTextFormatBase.TextQualifier
  - OfficeOpenXml.ExcelTextFormatBase.DataTypes
  - OfficeOpenXml.ExcelTextFileFormat.EOL
  - OfficeOpenXml.ExcelTextFileFormat.Culture
  - OfficeOpenXml.ExcelTextFileFormat.SkipLinesBeginning
  - OfficeOpenXml.ExcelTextFileFormat.SkipLinesEnd
  - OfficeOpenXml.ExcelTextFileFormat.Encoding
  - OfficeOpenXml.ExcelTextFileFormat.ShouldUseRow
  - OfficeOpenXml.ExcelTextFileFormat.Transpose
  - OfficeOpenXml.ExcelTextFileFormat.TableStyle
  - OfficeOpenXml.ExcelTextFileFormat.FirstRowIsHeader
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.ExcelTextFormat.#ctor
  commentId: M:OfficeOpenXml.ExcelTextFormat.#ctor
  id: '#ctor'
  parent: OfficeOpenXml.ExcelTextFormat
  langs:
  - csharp
  - vb
  name: ExcelTextFormat()
  nameWithType: ExcelTextFormat.ExcelTextFormat()
  fullName: OfficeOpenXml.ExcelTextFormat.ExcelTextFormat()
  type: Constructor
  source:
    remote:
      path: src/EPPlus/ExcelTextFormats/ExcelTextFormat.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/ExcelTextFormats/ExcelTextFormat.cs
    startLine: 69
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nDescribes how to split a CSV text\n\nDefault values\n<p><strong>Property-Value</strong></p>\n"
  example: []
  syntax:
    content: public ExcelTextFormat()
    content.vb: Public Sub New
  overload: OfficeOpenXml.ExcelTextFormat.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.ExcelTextFileFormat
  commentId: T:OfficeOpenXml.ExcelTextFileFormat
  parent: OfficeOpenXml
  name: ExcelTextFileFormat
  nameWithType: ExcelTextFileFormat
  fullName: OfficeOpenXml.ExcelTextFileFormat
- uid: OfficeOpenXml.ExcelTextFormatBase
  commentId: T:OfficeOpenXml.ExcelTextFormatBase
  parent: OfficeOpenXml
  name: ExcelTextFormatBase
  nameWithType: ExcelTextFormatBase
  fullName: OfficeOpenXml.ExcelTextFormatBase
- uid: OfficeOpenXml.ExcelTextFormatBase.Delimiter
  commentId: P:OfficeOpenXml.ExcelTextFormatBase.Delimiter
  parent: OfficeOpenXml.ExcelTextFormatBase
  name: Delimiter
  nameWithType: ExcelTextFormatBase.Delimiter
  fullName: OfficeOpenXml.ExcelTextFormatBase.Delimiter
- uid: OfficeOpenXml.ExcelTextFormatBase.TextQualifier
  commentId: P:OfficeOpenXml.ExcelTextFormatBase.TextQualifier
  parent: OfficeOpenXml.ExcelTextFormatBase
  name: TextQualifier
  nameWithType: ExcelTextFormatBase.TextQualifier
  fullName: OfficeOpenXml.ExcelTextFormatBase.TextQualifier
- uid: OfficeOpenXml.ExcelTextFormatBase.DataTypes
  commentId: P:OfficeOpenXml.ExcelTextFormatBase.DataTypes
  parent: OfficeOpenXml.ExcelTextFormatBase
  name: DataTypes
  nameWithType: ExcelTextFormatBase.DataTypes
  fullName: OfficeOpenXml.ExcelTextFormatBase.DataTypes
- uid: OfficeOpenXml.ExcelTextFileFormat.EOL
  commentId: P:OfficeOpenXml.ExcelTextFileFormat.EOL
  parent: OfficeOpenXml.ExcelTextFileFormat
  name: EOL
  nameWithType: ExcelTextFileFormat.EOL
  fullName: OfficeOpenXml.ExcelTextFileFormat.EOL
- uid: OfficeOpenXml.ExcelTextFileFormat.Culture
  commentId: P:OfficeOpenXml.ExcelTextFileFormat.Culture
  parent: OfficeOpenXml.ExcelTextFileFormat
  name: Culture
  nameWithType: ExcelTextFileFormat.Culture
  fullName: OfficeOpenXml.ExcelTextFileFormat.Culture
- uid: OfficeOpenXml.ExcelTextFileFormat.SkipLinesBeginning
  commentId: P:OfficeOpenXml.ExcelTextFileFormat.SkipLinesBeginning
  parent: OfficeOpenXml.ExcelTextFileFormat
  name: SkipLinesBeginning
  nameWithType: ExcelTextFileFormat.SkipLinesBeginning
  fullName: OfficeOpenXml.ExcelTextFileFormat.SkipLinesBeginning
- uid: OfficeOpenXml.ExcelTextFileFormat.SkipLinesEnd
  commentId: P:OfficeOpenXml.ExcelTextFileFormat.SkipLinesEnd
  parent: OfficeOpenXml.ExcelTextFileFormat
  name: SkipLinesEnd
  nameWithType: ExcelTextFileFormat.SkipLinesEnd
  fullName: OfficeOpenXml.ExcelTextFileFormat.SkipLinesEnd
- uid: OfficeOpenXml.ExcelTextFileFormat.Encoding
  commentId: P:OfficeOpenXml.ExcelTextFileFormat.Encoding
  parent: OfficeOpenXml.ExcelTextFileFormat
  name: Encoding
  nameWithType: ExcelTextFileFormat.Encoding
  fullName: OfficeOpenXml.ExcelTextFileFormat.Encoding
- uid: OfficeOpenXml.ExcelTextFileFormat.ShouldUseRow
  commentId: P:OfficeOpenXml.ExcelTextFileFormat.ShouldUseRow
  parent: OfficeOpenXml.ExcelTextFileFormat
  name: ShouldUseRow
  nameWithType: ExcelTextFileFormat.ShouldUseRow
  fullName: OfficeOpenXml.ExcelTextFileFormat.ShouldUseRow
- uid: OfficeOpenXml.ExcelTextFileFormat.Transpose
  commentId: P:OfficeOpenXml.ExcelTextFileFormat.Transpose
  parent: OfficeOpenXml.ExcelTextFileFormat
  name: Transpose
  nameWithType: ExcelTextFileFormat.Transpose
  fullName: OfficeOpenXml.ExcelTextFileFormat.Transpose
- uid: OfficeOpenXml.ExcelTextFileFormat.TableStyle
  commentId: P:OfficeOpenXml.ExcelTextFileFormat.TableStyle
  parent: OfficeOpenXml.ExcelTextFileFormat
  name: TableStyle
  nameWithType: ExcelTextFileFormat.TableStyle
  fullName: OfficeOpenXml.ExcelTextFileFormat.TableStyle
- uid: OfficeOpenXml.ExcelTextFileFormat.FirstRowIsHeader
  commentId: P:OfficeOpenXml.ExcelTextFileFormat.FirstRowIsHeader
  parent: OfficeOpenXml.ExcelTextFileFormat
  name: FirstRowIsHeader
  nameWithType: ExcelTextFileFormat.FirstRowIsHeader
  fullName: OfficeOpenXml.ExcelTextFileFormat.FirstRowIsHeader
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.ExcelTextFormat.#ctor*
  commentId: Overload:OfficeOpenXml.ExcelTextFormat.#ctor
  name: ExcelTextFormat
  nameWithType: ExcelTextFormat.ExcelTextFormat
  fullName: OfficeOpenXml.ExcelTextFormat.ExcelTextFormat
