### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  id: Token
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  children:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.#ctor(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.#ctor(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType,System.Boolean)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.AreEqualTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Equals(System.Object)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.GetHashCode
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.IsNegated
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Equality(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Inequality(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddress
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddressToken
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsSet(OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.ToString
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Value
  langs:
  - csharp
  - vb
  name: Token
  nameWithType: Token
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  type: Struct
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Token
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 22
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nRepresents a character in a formula\n"
  example: []
  syntax:
    content: public struct Token
    content.vb: Public Structure Token
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.#ctor(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.#ctor(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  id: '#ctor(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)'
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  langs:
  - csharp
  - vb
  name: Token(String, TokenType)
  nameWithType: Token.Token(String, TokenType)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Token(System.String, OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 36
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public Token(string token, TokenType tokenType)
    parameters:
    - id: token
      type: System.String
      description: The formula character
    - id: tokenType
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType
      description: The <xref href="OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(token As String, tokenType As TokenType)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.#ctor(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType,System.Boolean)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.#ctor(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType,System.Boolean)
  id: '#ctor(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType,System.Boolean)'
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  langs:
  - csharp
  - vb
  name: Token(String, TokenType, Boolean)
  nameWithType: Token.Token(String, TokenType, Boolean)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Token(System.String, OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 47
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public Token(string token, TokenType tokenType, bool isNegated)
    parameters:
    - id: token
      type: System.String
      description: The formula character
    - id: tokenType
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType
      description: The <xref href="OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType" data-throw-if-not-resolved="false"></xref>
    - id: isNegated
      type: System.Boolean
      description: ''
    content.vb: Public Sub New(token As String, tokenType As TokenType, isNegated As Boolean)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Value
  commentId: F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Value
  id: Value
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Token.Value
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Value
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Value
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 57
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nThe formula character\n"
  example: []
  syntax:
    content: public string Value
    return:
      type: System.String
    content.vb: Public Value As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.IsNegated
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.IsNegated
  id: IsNegated
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  langs:
  - csharp
  - vb
  name: IsNegated
  nameWithType: Token.IsNegated
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.IsNegated
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsNegated
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 64
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nIndicates whether a numeric value should be negated when compiled\n"
  example: []
  syntax:
    content: public readonly bool IsNegated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNegated As Boolean
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.IsNegated*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Equality(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Equality(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  id: op_Equality(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  langs:
  - csharp
  - vb
  name: Equality(Token, Token)
  nameWithType: Token.Equality(Token, Token)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Equality(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token, OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  type: Operator
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: op_Equality
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 78
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nOperator ==\n"
  example: []
  syntax:
    content: public static bool operator ==(Token t1, Token t2)
    parameters:
    - id: t1
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
      description: ''
    - id: t2
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Operator =(t1 As Token, t2 As Token) As Boolean
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Inequality(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Inequality(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  id: op_Inequality(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  langs:
  - csharp
  - vb
  name: Inequality(Token, Token)
  nameWithType: Token.Inequality(Token, Token)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Inequality(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token, OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  type: Operator
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: op_Inequality
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 89
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nOperator !=\n"
  example: []
  syntax:
    content: public static bool operator !=(Token t1, Token t2)
    parameters:
    - id: t1
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
      description: ''
    - id: t2
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Operator <>(t1 As Token, t2 As Token) As Boolean
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Equals(System.Object)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Equals(System.Object)
  id: Equals(System.Object)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Token.Equals(Object)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Equals
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 99
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nOverrides object.Equals with no behavioural change\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.GetHashCode
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.GetHashCode
  id: GetHashCode
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Token.GetHashCode()
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.GetHashCode()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetHashCode
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 108
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nOverrides object.GetHashCode with no behavioural change\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: ''
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsSet(OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsSet(OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  id: TokenTypeIsSet(OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  langs:
  - csharp
  - vb
  name: TokenTypeIsSet(TokenType)
  nameWithType: Token.TokenTypeIsSet(TokenType)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsSet(OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: TokenTypeIsSet
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 118
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nReturn if the supplied <code data-dev-comment-type=\"paramref\" class=\"paramref\">tokenType</code> is set on this token.\n"
  example: []
  syntax:
    content: public bool TokenTypeIsSet(TokenType tokenType)
    parameters:
    - id: tokenType
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType
      description: The <xref href="OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType" data-throw-if-not-resolved="false"></xref> to check
    return:
      type: System.Boolean
      description: True if the token is set, otherwirse false
    content.vb: Public Function TokenTypeIsSet(tokenType As TokenType) As Boolean
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsSet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddress
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddress
  id: TokenTypeIsAddress
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  langs:
  - csharp
  - vb
  name: TokenTypeIsAddress
  nameWithType: Token.TokenTypeIsAddress
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddress
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: TokenTypeIsAddress
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 125
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nReturns true if the token contains a address token that should be updated in insert/delete operations.\n"
  example: []
  syntax:
    content: public readonly bool TokenTypeIsAddress { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property TokenTypeIsAddress As Boolean
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddress*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddressToken
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddressToken
  id: TokenTypeIsAddressToken
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  langs:
  - csharp
  - vb
  name: TokenTypeIsAddressToken
  nameWithType: Token.TokenTypeIsAddressToken
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddressToken
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: TokenTypeIsAddressToken
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 139
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nReturns true if the token is a token building an address.\n"
  example: []
  syntax:
    content: public readonly bool TokenTypeIsAddressToken { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property TokenTypeIsAddressToken As Boolean
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddressToken*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.AreEqualTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.AreEqualTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  id: AreEqualTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  langs:
  - csharp
  - vb
  name: AreEqualTo(Token)
  nameWithType: Token.AreEqualTo(Token)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.AreEqualTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AreEqualTo
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 162
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public bool AreEqualTo(Token otherToken)
    parameters:
    - id: otherToken
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    return:
      type: System.Boolean
    content.vb: Public Function AreEqualTo(otherToken As Token) As Boolean
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.AreEqualTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.ToString
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.ToString
  id: ToString
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Token.ToString()
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.ToString()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToString
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Token.cs
    startLine: 215
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nOverrides object.ToString()\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: TokenType, followed by value
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: TokenType
  nameWithType: TokenType
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.#ctor
  name: Token
  nameWithType: Token.Token
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Token
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.IsNegated*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.IsNegated
  name: IsNegated
  nameWithType: Token.IsNegated
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.IsNegated
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Equality*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Equality
  name: Equality
  nameWithType: Token.Equality
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Equality
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: Token
  nameWithType: Token
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Inequality*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Inequality
  name: Inequality
  nameWithType: Token.Inequality
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Inequality
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Equals*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Equals
  name: Equals
  nameWithType: Token.Equals
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.GetHashCode*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.GetHashCode
  name: GetHashCode
  nameWithType: Token.GetHashCode
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsSet*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsSet
  name: TokenTypeIsSet
  nameWithType: Token.TokenTypeIsSet
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsSet
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddress*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddress
  name: TokenTypeIsAddress
  nameWithType: Token.TokenTypeIsAddress
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddress
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddressToken*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddressToken
  name: TokenTypeIsAddressToken
  nameWithType: Token.TokenTypeIsAddressToken
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsAddressToken
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.AreEqualTo*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.AreEqualTo
  name: AreEqualTo
  nameWithType: Token.AreEqualTo
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.AreEqualTo
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.ToString*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.ToString
  name: ToString
  nameWithType: Token.ToString
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.ToString
