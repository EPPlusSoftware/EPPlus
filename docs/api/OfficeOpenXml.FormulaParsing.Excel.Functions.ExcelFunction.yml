### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  id: ExcelFunction
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  children:
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.#ctor
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.AreEqual(System.Double,System.Double)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.FormulaParsing.ParsingContext,OfficeOpenXml.ExcelErrorValue@)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.FormulaParsing.ParsingContext,System.Action{OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions},OfficeOpenXml.ExcelErrorValue@)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext,OfficeOpenXml.ExcelErrorValue@)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext,System.Action{OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions},OfficeOpenXml.ExcelErrorValue@)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToObjectEnumerable(System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToAddress(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,System.Boolean)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.ExcelErrorValue@,OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,System.Double,OfficeOpenXml.ExcelErrorValue@)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Object,OfficeOpenXml.ExcelErrorValue@)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Object,OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy,OfficeOpenXml.ExcelErrorValue@)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.ExcelErrorValue@,System.Int32)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,System.Boolean,OfficeOpenXml.ExcelErrorValue@)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToRangeInfo(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToString(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgumentMinLength
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArrayBehaviour
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.ExcelErrorValue@)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.ICellInfo,OfficeOpenXml.ExcelErrorValue@)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ConfigureArrayBehaviour(OfficeOpenXml.FormulaParsing.Excel.Functions.ArrayBehaviourConfig)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateAddressResult(OfficeOpenXml.FormulaParsing.IRangeInfo,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateDynamicArrayResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateDynamicArrayResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult(OfficeOpenXml.eErrorType)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Divide(System.Double,System.Double)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetDecimalSingleArgument(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetFirstValue(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument})
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult},System.Int32,System.Collections.Generic.Queue{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}@)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetResultByObject(System.Object)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.HandlesVariables
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsAllowedInCalculatedPivotTableField
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsBool(System.Object)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsErrorHandlingFunction
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsInteger(System.Object)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumeric(System.Object)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumericString(System.Object)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsString(System.Object,System.Boolean)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsVolatile
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.NamespacePrefix
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.NumberOfSignificantFigures
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ParametersInfo
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ReturnsReference
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func{System.Boolean},System.String)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func{System.Boolean},System.String,System.Object[])
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException(OfficeOpenXml.eErrorType)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException(OfficeOpenXml.ExcelErrorValue)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueExceptionIf(System.Func{System.Boolean},OfficeOpenXml.eErrorType)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.eErrorType)
  langs:
  - csharp
  - vb
  name: ExcelFunction
  nameWithType: ExcelFunction
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelFunction
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 37
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nBase class for Excel function implementations.\n"
  example: []
  syntax:
    content: public abstract class ExcelFunction
    content.vb: Public MustInherit Class ExcelFunction
  inheritance:
  - System.Object
  derivedClasses:
  - OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ConvertFunction
  - OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Erf
  - OfficeOpenXml.FormulaParsing.Excel.Functions.HiddenValuesHandlingFunction
  - OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Text
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.#ctor
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.#ctor
  id: '#ctor'
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ExcelFunction()
  nameWithType: ExcelFunction.ExcelFunction()
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ExcelFunction()
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 42
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nDefault constructor\n"
  example: []
  syntax:
    content: public ExcelFunction()
    content.vb: Public Sub New
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.NumberOfSignificantFigures
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.NumberOfSignificantFigures
  id: NumberOfSignificantFigures
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: NumberOfSignificantFigures
  nameWithType: ExcelFunction.NumberOfSignificantFigures
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.NumberOfSignificantFigures
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: NumberOfSignificantFigures
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 72
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nNumber of significant figures used in roundings, etc.\n"
  example: []
  syntax:
    content: protected readonly int NumberOfSignificantFigures
    return:
      type: System.Int32
    content.vb: Protected ReadOnly NumberOfSignificantFigures As Integer
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  id: Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: Execute(IList<FunctionArgument>, ParsingContext)
  nameWithType: ExcelFunction.Execute(IList<FunctionArgument>, ParsingContext)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, OfficeOpenXml.FormulaParsing.ParsingContext)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Execute
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 87
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\n\n"
  example: []
  syntax:
    content: public abstract CompileResult Execute(IList<FunctionArgument> arguments, ParsingContext context)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: Arguments to the function, each argument can contain primitive types, lists or <xref href="OfficeOpenXml.FormulaParsing.IRangeInfo?text=Excel+ranges" data-throw-if-not-resolved="false"></xref>
    - id: context
      type: OfficeOpenXml.FormulaParsing.ParsingContext
      description: The <xref href="OfficeOpenXml.FormulaParsing.ParsingContext" data-throw-if-not-resolved="false"></xref> contains various data that can be useful in functions.
    return:
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
      description: A <xref href="OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult" data-throw-if-not-resolved="false"></xref> containing the calculated value
    content.vb: Public MustOverride Function Execute(arguments As IList(Of FunctionArgument), context As ParsingContext) As CompileResult
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute*
  nameWithType.vb: ExcelFunction.Execute(IList(Of FunctionArgument), ParsingContext)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), OfficeOpenXml.FormulaParsing.ParsingContext)
  name.vb: Execute(IList(Of FunctionArgument), ParsingContext)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgumentMinLength
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgumentMinLength
  id: ArgumentMinLength
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgumentMinLength
  nameWithType: ExcelFunction.ArgumentMinLength
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgumentMinLength
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgumentMinLength
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 123
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns the minimum arguments for the function. Number of arguments are validated before calling the execute. If lesser arguments are supplied a #VALUE! error will be returned.\n"
  example: []
  syntax:
    content: public abstract int ArgumentMinLength { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public MustOverride ReadOnly Property ArgumentMinLength As Integer
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgumentMinLength*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult},System.Int32,System.Collections.Generic.Queue{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}@)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult},System.Int32,System.Collections.Generic.Queue{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}@)
  id: GetNewParameterAddress(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult},System.Int32,System.Collections.Generic.Queue{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}@)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: GetNewParameterAddress(IList<CompileResult>, Int32, ref Queue<FormulaRangeAddress>)
  nameWithType: ExcelFunction.GetNewParameterAddress(IList<CompileResult>, Int32, ref Queue<FormulaRangeAddress>)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult>, System.Int32, ref System.Collections.Generic.Queue<OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress>)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetNewParameterAddress
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 133
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf overridden, this method will be called before the <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList%7bOfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument%7d%2cOfficeOpenXml.FormulaParsing.ParsingContext)\" data-throw-if-not-resolved=\"false\"></xref> method is called with the arguments for any parameter having \n<xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ParametersInfo\" data-throw-if-not-resolved=\"false\"></xref> set to <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.AdjustParameterAddress\" data-throw-if-not-resolved=\"false\"></xref> and that argument is a range with an address. \nIt can be used to narrow the dependency check for the function returning a queue with addresses to check dependency before executing.\n"
  example: []
  syntax:
    content: public virtual void GetNewParameterAddress(IList<CompileResult> args, int index, ref Queue<FormulaRangeAddress> addresses)
    parameters:
    - id: args
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult}
      description: The function arguments that will be supplied to the execute method.
    - id: index
      type: System.Int32
      description: The index of the argument that should be adjusted.
    - id: addresses
      type: System.Collections.Generic.Queue{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}
      description: A queue of addresses that will be calculated before calling the Execute function.
    content.vb: Public Overridable Sub GetNewParameterAddress(args As IList(Of CompileResult), index As Integer, ByRef addresses As Queue(Of FormulaRangeAddress))
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress*
  nameWithType.vb: ExcelFunction.GetNewParameterAddress(IList(Of CompileResult), Int32, ByRef Queue(Of FormulaRangeAddress))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult), System.Int32, ByRef System.Collections.Generic.Queue(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress))
  name.vb: GetNewParameterAddress(IList(Of CompileResult), Int32, ByRef Queue(Of FormulaRangeAddress))
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsErrorHandlingFunction
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsErrorHandlingFunction
  id: IsErrorHandlingFunction
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: IsErrorHandlingFunction
  nameWithType: ExcelFunction.IsErrorHandlingFunction
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsErrorHandlingFunction
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsErrorHandlingFunction
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 140
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIndicates that the function is an ErrorHandlingFunction.\n"
  example: []
  syntax:
    content: public virtual bool IsErrorHandlingFunction { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsErrorHandlingFunction As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsErrorHandlingFunction*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArrayBehaviour
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArrayBehaviour
  id: ArrayBehaviour
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArrayBehaviour
  nameWithType: ExcelFunction.ArrayBehaviour
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArrayBehaviour
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArrayBehaviour
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 151
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nDescribes how the function works with input ranges and returning arrays.\n"
  example: []
  syntax:
    content: public virtual ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunctionArrayBehaviour
    content.vb: Public Overridable ReadOnly Property ArrayBehaviour As ExcelFunctionArrayBehaviour
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArrayBehaviour*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ConfigureArrayBehaviour(OfficeOpenXml.FormulaParsing.Excel.Functions.ArrayBehaviourConfig)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ConfigureArrayBehaviour(OfficeOpenXml.FormulaParsing.Excel.Functions.ArrayBehaviourConfig)
  id: ConfigureArrayBehaviour(OfficeOpenXml.FormulaParsing.Excel.Functions.ArrayBehaviourConfig)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ConfigureArrayBehaviour(ArrayBehaviourConfig)
  nameWithType: ExcelFunction.ConfigureArrayBehaviour(ArrayBehaviourConfig)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ConfigureArrayBehaviour(OfficeOpenXml.FormulaParsing.Excel.Functions.ArrayBehaviourConfig)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ConfigureArrayBehaviour
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 164
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nConfigures parameters of a function that can be arrays (multi-cell ranges)\neven if the function itself treats them as single values.\n"
  example: []
  syntax:
    content: public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config)
    parameters:
    - id: config
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ArrayBehaviourConfig
      description: ''
    content.vb: Public Overridable Sub ConfigureArrayBehaviour(config As ArrayBehaviourConfig)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ConfigureArrayBehaviour*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.HandlesVariables
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.HandlesVariables
  id: HandlesVariables
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: HandlesVariables
  nameWithType: ExcelFunction.HandlesVariables
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.HandlesVariables
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: HandlesVariables
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 175
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIndicates whether the function handles variables (eg. LET, LAMBDA).\n"
  example: []
  syntax:
    content: public virtual bool HandlesVariables { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property HandlesVariables As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.HandlesVariables*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetFirstValue(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument})
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetFirstValue(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument})
  id: GetFirstValue(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument})
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: GetFirstValue(IEnumerable<FunctionArgument>)
  nameWithType: ExcelFunction.GetFirstValue(IEnumerable<FunctionArgument>)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetFirstValue(System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetFirstValue
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 182
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nUsed for some Lookupfunctions to indicate that function arguments should\nnot be compiled before the function is called.\n"
  example: []
  syntax:
    content: protected object GetFirstValue(IEnumerable<FunctionArgument> val)
    parameters:
    - id: val
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
    return:
      type: System.Object
    content.vb: Protected Function GetFirstValue(val As IEnumerable(Of FunctionArgument)) As Object
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetFirstValue*
  nameWithType.vb: ExcelFunction.GetFirstValue(IEnumerable(Of FunctionArgument))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetFirstValue(System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument))
  name.vb: GetFirstValue(IEnumerable(Of FunctionArgument))
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.eErrorType)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.eErrorType)
  id: ValidateArguments(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.eErrorType)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ValidateArguments(IEnumerable<FunctionArgument>, Int32, eErrorType)
  nameWithType: ExcelFunction.ValidateArguments(IEnumerable<FunctionArgument>, Int32, eErrorType)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments(System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, System.Int32, OfficeOpenXml.eErrorType)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ValidateArguments
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 205
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThis functions validates that the supplied <code data-dev-comment-type=\"paramref\" class=\"paramref\">arguments</code> contains at least\n(the value of) <code data-dev-comment-type=\"paramref\" class=\"paramref\">minLength</code> elements. If one of the arguments is an\n<xref href=\"OfficeOpenXml.FormulaParsing.IRangeInfo?text=Excel+range\" data-throw-if-not-resolved=\"false\"></xref> the number of cells in\nthat range will be counted as well.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Don't use this method from EPPlus 7.x and up. Use property ArgumentMinLength instead.")]

      protected void ValidateArguments(IEnumerable<FunctionArgument> arguments, int minLength, eErrorType errorTypeToThrow)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: minLength
      type: System.Int32
      description: ''
    - id: errorTypeToThrow
      type: OfficeOpenXml.eErrorType
      description: The <xref href="OfficeOpenXml.eErrorType" data-throw-if-not-resolved="false"></xref> of the <xref href="OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException" data-throw-if-not-resolved="false"></xref> that will be thrown if <code data-dev-comment-type="paramref" class="paramref">minLength</code> is not met.
    content.vb: >-
      <Obsolete("Don't use this method from EPPlus 7.x and up. Use property ArgumentMinLength instead.")>

      Protected Sub ValidateArguments(arguments As IEnumerable(Of FunctionArgument), minLength As Integer, errorTypeToThrow As eErrorType)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Don't use this method from EPPlus 7.x and up. Use property ArgumentMinLength instead.
  nameWithType.vb: ExcelFunction.ValidateArguments(IEnumerable(Of FunctionArgument), Int32, eErrorType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments(System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), System.Int32, OfficeOpenXml.eErrorType)
  name.vb: ValidateArguments(IEnumerable(Of FunctionArgument), Int32, eErrorType)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  id: ValidateArguments(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ValidateArguments(IEnumerable<FunctionArgument>, Int32)
  nameWithType: ExcelFunction.ValidateArguments(IEnumerable<FunctionArgument>, Int32)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments(System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ValidateArguments
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 239
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThis functions validates that the supplied <code data-dev-comment-type=\"paramref\" class=\"paramref\">arguments</code> contains at least\n(the value of) <code data-dev-comment-type=\"paramref\" class=\"paramref\">minLength</code> elements. If one of the arguments is an\n<xref href=\"OfficeOpenXml.FormulaParsing.IRangeInfo?text=Excel+range\" data-throw-if-not-resolved=\"false\"></xref> the number of cells in\nthat range will be counted as well.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Don't use this method from EPPlus 7.x and up. Use property ArgumentMinLength instead.")]

      protected void ValidateArguments(IEnumerable<FunctionArgument> arguments, int minLength)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: minLength
      type: System.Int32
      description: ''
    content.vb: >-
      <Obsolete("Don't use this method from EPPlus 7.x and up. Use property ArgumentMinLength instead.")>

      Protected Sub ValidateArguments(arguments As IEnumerable(Of FunctionArgument), minLength As Integer)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Don't use this method from EPPlus 7.x and up. Use property ArgumentMinLength instead.
  nameWithType.vb: ExcelFunction.ValidateArguments(IEnumerable(Of FunctionArgument), Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments(System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), System.Int32)
  name.vb: ValidateArguments(IEnumerable(Of FunctionArgument), Int32)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToAddress(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToAddress(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  id: ArgToAddress(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgToAddress(IList<FunctionArgument>, Int32)
  nameWithType: ExcelFunction.ArgToAddress(IList<FunctionArgument>, Int32)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToAddress(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgToAddress
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 268
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns a string representation of an arguments address.\n"
  example: []
  syntax:
    content: protected string ArgToAddress(IList<FunctionArgument> arguments, int index)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: index
      type: System.Int32
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Protected Function ArgToAddress(arguments As IList(Of FunctionArgument), index As Integer) As String
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToAddress*
  nameWithType.vb: ExcelFunction.ArgToAddress(IList(Of FunctionArgument), Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToAddress(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), System.Int32)
  name.vb: ArgToAddress(IList(Of FunctionArgument), Int32)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.ExcelErrorValue@,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.ExcelErrorValue@,System.Int32)
  id: ArgToInt(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.ExcelErrorValue@,System.Int32)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgToInt(IList<FunctionArgument>, Int32, out ExcelErrorValue, Int32)
  nameWithType: ExcelFunction.ArgToInt(IList<FunctionArgument>, Int32, out ExcelErrorValue, Int32)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, System.Int32, out OfficeOpenXml.ExcelErrorValue, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgToInt
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 290
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns the value of the argument att the position of the 0-based index\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> as an integer.\n"
  example: []
  syntax:
    content: protected int ArgToInt(IList<FunctionArgument> arguments, int index, out ExcelErrorValue error, int emptyValue = 0)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: index
      type: System.Int32
      description: ''
    - id: error
      type: OfficeOpenXml.ExcelErrorValue
      description: If an error occurs during the conversion it will be returned via this parameter
    - id: emptyValue
      type: System.Int32
      description: Value returned if datatype is empty
    return:
      type: System.Int32
      description: Value of the argument as an integer.
    content.vb: Protected Function ArgToInt(arguments As IList(Of FunctionArgument), index As Integer, ByRef error As ExcelErrorValue, emptyValue As Integer = 0) As Integer
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt*
  exceptions:
  - type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
    commentId: T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
  nameWithType.vb: ExcelFunction.ArgToInt(IList(Of FunctionArgument), Int32, ByRef ExcelErrorValue, Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), System.Int32, ByRef OfficeOpenXml.ExcelErrorValue, System.Int32)
  name.vb: ArgToInt(IList(Of FunctionArgument), Int32, ByRef ExcelErrorValue, Int32)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,System.Boolean,OfficeOpenXml.ExcelErrorValue@)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,System.Boolean,OfficeOpenXml.ExcelErrorValue@)
  id: ArgToInt(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,System.Boolean,OfficeOpenXml.ExcelErrorValue@)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgToInt(IList<FunctionArgument>, Int32, Boolean, out ExcelErrorValue)
  nameWithType: ExcelFunction.ArgToInt(IList<FunctionArgument>, Int32, Boolean, out ExcelErrorValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, System.Int32, System.Boolean, out OfficeOpenXml.ExcelErrorValue)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgToInt
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 316
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns the value of the argument att the position of the 0-based index\n"
  example: []
  syntax:
    content: protected int ArgToInt(IList<FunctionArgument> arguments, int index, bool ignoreErrors, out ExcelErrorValue error)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: index
      type: System.Int32
      description: ''
    - id: ignoreErrors
      type: System.Boolean
      description: If true an Excel error in the cell will be ignored
    - id: error
      type: OfficeOpenXml.ExcelErrorValue
      description: If an error occurs during the conversion it will be returned via this parameter
    return:
      type: System.Int32
      description: Value of the argument as an integer.
    content.vb: Protected Function ArgToInt(arguments As IList(Of FunctionArgument), index As Integer, ignoreErrors As Boolean, ByRef error As ExcelErrorValue) As Integer
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt*
  exceptions:
  - type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
    commentId: T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
  nameWithType.vb: ExcelFunction.ArgToInt(IList(Of FunctionArgument), Int32, Boolean, ByRef ExcelErrorValue)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), System.Int32, System.Boolean, ByRef OfficeOpenXml.ExcelErrorValue)
  name.vb: ArgToInt(IList(Of FunctionArgument), Int32, Boolean, ByRef ExcelErrorValue)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod)
  id: ArgToInt(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgToInt(IList<FunctionArgument>, Int32, RoundingMethod)
  nameWithType: ExcelFunction.ArgToInt(IList<FunctionArgument>, Int32, RoundingMethod)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, System.Int32, OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgToInt
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 340
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns the value of the argument att the position of the 0-based\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> as an integer.\n"
  example: []
  syntax:
    content: protected int ArgToInt(IList<FunctionArgument> arguments, int index, RoundingMethod roundingMethod)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: index
      type: System.Int32
      description: ''
    - id: roundingMethod
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod
      description: ''
    return:
      type: System.Int32
      description: Value of the argument as an integer.
    content.vb: Protected Function ArgToInt(arguments As IList(Of FunctionArgument), index As Integer, roundingMethod As RoundingMethod) As Integer
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt*
  exceptions:
  - type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
    commentId: T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
  nameWithType.vb: ExcelFunction.ArgToInt(IList(Of FunctionArgument), Int32, RoundingMethod)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), System.Int32, OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod)
  name.vb: ArgToInt(IList(Of FunctionArgument), Int32, RoundingMethod)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToString(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToString(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  id: ArgToString(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgToString(IList<FunctionArgument>, Int32)
  nameWithType: ExcelFunction.ArgToString(IList<FunctionArgument>, Int32)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToString(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgToString
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 362
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns the value of the argument att the position of the 0-based\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> as a string.\n"
  example: []
  syntax:
    content: protected string ArgToString(IList<FunctionArgument> arguments, int index)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: index
      type: System.Int32
      description: ''
    return:
      type: System.String
      description: Value of the argument as a string.
    content.vb: Protected Function ArgToString(arguments As IList(Of FunctionArgument), index As Integer) As String
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToString*
  nameWithType.vb: ExcelFunction.ArgToString(IList(Of FunctionArgument), Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToString(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), System.Int32)
  name.vb: ArgToString(IList(Of FunctionArgument), Int32)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Object,OfficeOpenXml.ExcelErrorValue@)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Object,OfficeOpenXml.ExcelErrorValue@)
  id: ArgToDecimal(System.Object,OfficeOpenXml.ExcelErrorValue@)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgToDecimal(Object, out ExcelErrorValue)
  nameWithType: ExcelFunction.ArgToDecimal(Object, out ExcelErrorValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Object, out OfficeOpenXml.ExcelErrorValue)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgToDecimal
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 375
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns the value of the argument att the position of the 0-based\n"
  example: []
  syntax:
    content: protected double ArgToDecimal(object obj, out ExcelErrorValue error)
    parameters:
    - id: obj
      type: System.Object
      description: ''
    - id: error
      type: OfficeOpenXml.ExcelErrorValue
      description: Will be set if the conversion generated an error
    return:
      type: System.Double
      description: Value of the argument as a double.
    content.vb: Protected Function ArgToDecimal(obj As Object, ByRef error As ExcelErrorValue) As Double
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal*
  exceptions:
  - type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
    commentId: T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
  nameWithType.vb: ExcelFunction.ArgToDecimal(Object, ByRef ExcelErrorValue)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Object, ByRef OfficeOpenXml.ExcelErrorValue)
  name.vb: ArgToDecimal(Object, ByRef ExcelErrorValue)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Object,OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy,OfficeOpenXml.ExcelErrorValue@)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Object,OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy,OfficeOpenXml.ExcelErrorValue@)
  id: ArgToDecimal(System.Object,OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy,OfficeOpenXml.ExcelErrorValue@)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgToDecimal(Object, PrecisionAndRoundingStrategy, out ExcelErrorValue)
  nameWithType: ExcelFunction.ArgToDecimal(Object, PrecisionAndRoundingStrategy, out ExcelErrorValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Object, OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy, out OfficeOpenXml.ExcelErrorValue)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgToDecimal
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 388
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns the value of the argument att the position of the 0-based\n"
  example: []
  syntax:
    content: protected double ArgToDecimal(object obj, PrecisionAndRoundingStrategy precisionAndRoundingStrategy, out ExcelErrorValue error)
    parameters:
    - id: obj
      type: System.Object
      description: ''
    - id: precisionAndRoundingStrategy
      type: OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy
      description: strategy for handling precision and rounding of double values
    - id: error
      type: OfficeOpenXml.ExcelErrorValue
      description: An error type if the operation returns an error.
    return:
      type: System.Double
      description: Value of the argument as a double.
    content.vb: Protected Function ArgToDecimal(obj As Object, precisionAndRoundingStrategy As PrecisionAndRoundingStrategy, ByRef error As ExcelErrorValue) As Double
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal*
  exceptions:
  - type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
    commentId: T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
  nameWithType.vb: ExcelFunction.ArgToDecimal(Object, PrecisionAndRoundingStrategy, ByRef ExcelErrorValue)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Object, OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy, ByRef OfficeOpenXml.ExcelErrorValue)
  name.vb: ArgToDecimal(Object, PrecisionAndRoundingStrategy, ByRef ExcelErrorValue)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.ExcelErrorValue@,OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.ExcelErrorValue@,OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy)
  id: ArgToDecimal(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.ExcelErrorValue@,OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgToDecimal(IList<FunctionArgument>, Int32, out ExcelErrorValue, PrecisionAndRoundingStrategy)
  nameWithType: ExcelFunction.ArgToDecimal(IList<FunctionArgument>, Int32, out ExcelErrorValue, PrecisionAndRoundingStrategy)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, System.Int32, out OfficeOpenXml.ExcelErrorValue, OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgToDecimal
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 411
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns the value of the argument att the position of the 0-based\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected double ArgToDecimal(IList<FunctionArgument> arguments, int index, out ExcelErrorValue error, PrecisionAndRoundingStrategy precisionAndRoundingStrategy = PrecisionAndRoundingStrategy.DotNet)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: index
      type: System.Int32
      description: ''
    - id: error
      type: OfficeOpenXml.ExcelErrorValue
      description: Will be set if an error occurs during conversion
    - id: precisionAndRoundingStrategy
      type: OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy
      description: strategy for handling precision and rounding of double values
    return:
      type: System.Double
      description: Value of the argument as an integer.
    content.vb: Protected Function ArgToDecimal(arguments As IList(Of FunctionArgument), index As Integer, ByRef error As ExcelErrorValue, precisionAndRoundingStrategy As PrecisionAndRoundingStrategy = PrecisionAndRoundingStrategy.DotNet) As Double
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal*
  exceptions:
  - type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
    commentId: T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
  nameWithType.vb: ExcelFunction.ArgToDecimal(IList(Of FunctionArgument), Int32, ByRef ExcelErrorValue, PrecisionAndRoundingStrategy)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), System.Int32, ByRef OfficeOpenXml.ExcelErrorValue, OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy)
  name.vb: ArgToDecimal(IList(Of FunctionArgument), Int32, ByRef ExcelErrorValue, PrecisionAndRoundingStrategy)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,System.Double,OfficeOpenXml.ExcelErrorValue@)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,System.Double,OfficeOpenXml.ExcelErrorValue@)
  id: ArgToDecimal(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,System.Double,OfficeOpenXml.ExcelErrorValue@)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgToDecimal(IList<FunctionArgument>, Int32, Double, out ExcelErrorValue)
  nameWithType: ExcelFunction.ArgToDecimal(IList<FunctionArgument>, Int32, Double, out ExcelErrorValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, System.Int32, System.Double, out OfficeOpenXml.ExcelErrorValue)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgToDecimal
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 445
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns the value of the argument att the position of the 0-based\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.\nIf the the value is null, zero will be returned.\n"
  example: []
  syntax:
    content: protected double ArgToDecimal(IList<FunctionArgument> arguments, int index, double valueIfNull, out ExcelErrorValue error)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: index
      type: System.Int32
      description: ''
    - id: valueIfNull
      type: System.Double
      description: ''
    - id: error
      type: OfficeOpenXml.ExcelErrorValue
      description: Will be set if an error occurs during conversion
    return:
      type: System.Double
      description: Value of the argument as an integer.
    content.vb: Protected Function ArgToDecimal(arguments As IList(Of FunctionArgument), index As Integer, valueIfNull As Double, ByRef error As ExcelErrorValue) As Double
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal*
  exceptions:
  - type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
    commentId: T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
  nameWithType.vb: ExcelFunction.ArgToDecimal(IList(Of FunctionArgument), Int32, Double, ByRef ExcelErrorValue)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), System.Int32, System.Double, ByRef OfficeOpenXml.ExcelErrorValue)
  name.vb: ArgToDecimal(IList(Of FunctionArgument), Int32, Double, ByRef ExcelErrorValue)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetDecimalSingleArgument(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetDecimalSingleArgument(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument)
  id: GetDecimalSingleArgument(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: GetDecimalSingleArgument(FunctionArgument)
  nameWithType: ExcelFunction.GetDecimalSingleArgument(FunctionArgument)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetDecimalSingleArgument(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetDecimalSingleArgument
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 465
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns the value as if the \n"
  example: []
  syntax:
    content: protected double? GetDecimalSingleArgument(FunctionArgument arg)
    parameters:
    - id: arg
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
      description: ''
    return:
      type: System.Nullable{System.Double}
      description: ''
    content.vb: Protected Function GetDecimalSingleArgument(arg As FunctionArgument) As Double?
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetDecimalSingleArgument*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToRangeInfo(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToRangeInfo(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  id: ArgToRangeInfo(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgToRangeInfo(IList<FunctionArgument>, Int32)
  nameWithType: ExcelFunction.ArgToRangeInfo(IList<FunctionArgument>, Int32)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToRangeInfo(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgToRangeInfo
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 498
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\n\n"
  example: []
  syntax:
    content: protected IRangeInfo ArgToRangeInfo(IList<FunctionArgument> arguments, int index)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: index
      type: System.Int32
      description: ''
    return:
      type: OfficeOpenXml.FormulaParsing.IRangeInfo
      description: ''
    content.vb: Protected Function ArgToRangeInfo(arguments As IList(Of FunctionArgument), index As Integer) As IRangeInfo
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToRangeInfo*
  nameWithType.vb: ExcelFunction.ArgToRangeInfo(IList(Of FunctionArgument), Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToRangeInfo(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), System.Int32)
  name.vb: ArgToRangeInfo(IList(Of FunctionArgument), Int32)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Divide(System.Double,System.Double)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Divide(System.Double,System.Double)
  id: Divide(System.Double,System.Double)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: Divide(Double, Double)
  nameWithType: ExcelFunction.Divide(Double, Double)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Divide(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Divide
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 513
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nDivides two numbers. If <code data-dev-comment-type=\"paramref\" class=\"paramref\">right</code> is zero double.PositiveInfinity will be returned.\n"
  example: []
  syntax:
    content: protected static double Divide(double left, double right)
    parameters:
    - id: left
      type: System.Double
      description: Numerator
    - id: right
      type: System.Double
      description: Denominator
    return:
      type: System.Double
      description: ''
    content.vb: Protected Shared Function Divide(left As Double, right As Double) As Double
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Divide*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumericString(System.Object)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumericString(System.Object)
  id: IsNumericString(System.Object)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: IsNumericString(Object)
  nameWithType: ExcelFunction.IsNumericString(Object)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumericString(System.Object)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsNumericString
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 527
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns true if the parameter <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is a numeric string, otherwise false.\n"
  example: []
  syntax:
    content: protected bool IsNumericString(object value)
    parameters:
    - id: value
      type: System.Object
      description: The value to test
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Function IsNumericString(value As Object) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumericString*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsInteger(System.Object)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsInteger(System.Object)
  id: IsInteger(System.Object)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: IsInteger(Object)
  nameWithType: ExcelFunction.IsInteger(Object)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsInteger(System.Object)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsInteger
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 538
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns true if the parameter <code data-dev-comment-type=\"paramref\" class=\"paramref\">n</code> is an integer, otherwise false.\n"
  example: []
  syntax:
    content: protected bool IsInteger(object n)
    parameters:
    - id: n
      type: System.Object
      description: The value to test
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Function IsInteger(n As Object) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsInteger*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  id: ArgToBool(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgToBool(IList<FunctionArgument>, Int32)
  nameWithType: ExcelFunction.ArgToBool(IList<FunctionArgument>, Int32)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgToBool
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 552
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf the argument is a boolean value its value will be returned.\nIf the argument is an integer value, true will be returned if its\nvalue is not 0, otherwise false.\n"
  example: []
  syntax:
    content: protected bool ArgToBool(IList<FunctionArgument> arguments, int index)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: index
      type: System.Int32
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Function ArgToBool(arguments As IList(Of FunctionArgument), index As Integer) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool*
  nameWithType.vb: ExcelFunction.ArgToBool(IList(Of FunctionArgument), Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), System.Int32)
  name.vb: ArgToBool(IList(Of FunctionArgument), Int32)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,System.Boolean)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,System.Boolean)
  id: ArgToBool(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,System.Boolean)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgToBool(IList<FunctionArgument>, Int32, Boolean)
  nameWithType: ExcelFunction.ArgToBool(IList<FunctionArgument>, Int32, Boolean)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgToBool
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 567
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf the argument is a boolean value its value will be returned.\nIf the argument is an integer value, true will be returned if its\nvalue is not 0, otherwise false.\nfallback to ValueIfEmpty if datatype is empty\n"
  example: []
  syntax:
    content: protected bool ArgToBool(IList<FunctionArgument> arguments, int index, bool valueIfEmpty)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: index
      type: System.Int32
      description: ''
    - id: valueIfEmpty
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Function ArgToBool(arguments As IList(Of FunctionArgument), index As Integer, valueIfEmpty As Boolean) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool*
  nameWithType.vb: ExcelFunction.ArgToBool(IList(Of FunctionArgument), Int32, Boolean)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), System.Int32, System.Boolean)
  name.vb: ArgToBool(IList(Of FunctionArgument), Int32, Boolean)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func{System.Boolean},System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func{System.Boolean},System.String)
  id: ThrowArgumentExceptionIf(System.Func{System.Boolean},System.String)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ThrowArgumentExceptionIf(Func<Boolean>, String)
  nameWithType: ExcelFunction.ThrowArgumentExceptionIf(Func<Boolean>, String)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func<System.Boolean>, System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ThrowArgumentExceptionIf
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 580
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThrows an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">condition</code> evaluates to true.\n"
  example: []
  syntax:
    content: protected void ThrowArgumentExceptionIf(Func<bool> condition, string message)
    parameters:
    - id: condition
      type: System.Func{System.Boolean}
      description: ''
    - id: message
      type: System.String
      description: ''
    content.vb: Protected Sub ThrowArgumentExceptionIf(condition As Func(Of Boolean), message As String)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
  nameWithType.vb: ExcelFunction.ThrowArgumentExceptionIf(Func(Of Boolean), String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func(Of System.Boolean), System.String)
  name.vb: ThrowArgumentExceptionIf(Func(Of Boolean), String)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func{System.Boolean},System.String,System.Object[])
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func{System.Boolean},System.String,System.Object[])
  id: ThrowArgumentExceptionIf(System.Func{System.Boolean},System.String,System.Object[])
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ThrowArgumentExceptionIf(Func<Boolean>, String, Object[])
  nameWithType: ExcelFunction.ThrowArgumentExceptionIf(Func<Boolean>, String, Object[])
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func<System.Boolean>, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ThrowArgumentExceptionIf
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 594
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThrows an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">condition</code> evaluates to true.\n"
  example: []
  syntax:
    content: protected void ThrowArgumentExceptionIf(Func<bool> condition, string message, params object[] formats)
    parameters:
    - id: condition
      type: System.Func{System.Boolean}
      description: ''
    - id: message
      type: System.String
      description: ''
    - id: formats
      type: System.Object[]
      description: Formats to the message string.
    content.vb: Protected Sub ThrowArgumentExceptionIf(condition As Func(Of Boolean), message As String, ParamArray formats As Object())
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf*
  nameWithType.vb: ExcelFunction.ThrowArgumentExceptionIf(Func(Of Boolean), String, Object())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func(Of System.Boolean), System.String, System.Object())
  name.vb: ThrowArgumentExceptionIf(Func(Of Boolean), String, Object())
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException(OfficeOpenXml.eErrorType)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException(OfficeOpenXml.eErrorType)
  id: ThrowExcelErrorValueException(OfficeOpenXml.eErrorType)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ThrowExcelErrorValueException(eErrorType)
  nameWithType: ExcelFunction.ThrowExcelErrorValueException(eErrorType)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException(OfficeOpenXml.eErrorType)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ThrowExcelErrorValueException
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 604
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThrows an <xref href=\"OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException\" data-throw-if-not-resolved=\"false\"></xref> with the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">errorType</code> set.\n"
  example: []
  syntax:
    content: protected void ThrowExcelErrorValueException(eErrorType errorType)
    parameters:
    - id: errorType
      type: OfficeOpenXml.eErrorType
      description: ''
    content.vb: Protected Sub ThrowExcelErrorValueException(errorType As eErrorType)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException(OfficeOpenXml.ExcelErrorValue)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException(OfficeOpenXml.ExcelErrorValue)
  id: ThrowExcelErrorValueException(OfficeOpenXml.ExcelErrorValue)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ThrowExcelErrorValueException(ExcelErrorValue)
  nameWithType: ExcelFunction.ThrowExcelErrorValueException(ExcelErrorValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException(OfficeOpenXml.ExcelErrorValue)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ThrowExcelErrorValueException
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 612
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThrows an <xref href=\"OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException\" data-throw-if-not-resolved=\"false\"></xref> with the type of given <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> set.\n"
  example: []
  syntax:
    content: protected void ThrowExcelErrorValueException(ExcelErrorValue value)
    parameters:
    - id: value
      type: OfficeOpenXml.ExcelErrorValue
      description: ''
    content.vb: Protected Sub ThrowExcelErrorValueException(value As ExcelErrorValue)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueExceptionIf(System.Func{System.Boolean},OfficeOpenXml.eErrorType)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueExceptionIf(System.Func{System.Boolean},OfficeOpenXml.eErrorType)
  id: ThrowExcelErrorValueExceptionIf(System.Func{System.Boolean},OfficeOpenXml.eErrorType)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ThrowExcelErrorValueExceptionIf(Func<Boolean>, eErrorType)
  nameWithType: ExcelFunction.ThrowExcelErrorValueExceptionIf(Func<Boolean>, eErrorType)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueExceptionIf(System.Func<System.Boolean>, OfficeOpenXml.eErrorType)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ThrowExcelErrorValueExceptionIf
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 623
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThrows an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">condition</code> evaluates to true.\n"
  example: []
  syntax:
    content: protected void ThrowExcelErrorValueExceptionIf(Func<bool> condition, eErrorType errorType)
    parameters:
    - id: condition
      type: System.Func{System.Boolean}
      description: ''
    - id: errorType
      type: OfficeOpenXml.eErrorType
      description: ''
    content.vb: Protected Sub ThrowExcelErrorValueExceptionIf(condition As Func(Of Boolean), errorType As eErrorType)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueExceptionIf*
  exceptions:
  - type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
    commentId: T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
  nameWithType.vb: ExcelFunction.ThrowExcelErrorValueExceptionIf(Func(Of Boolean), eErrorType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueExceptionIf(System.Func(Of System.Boolean), OfficeOpenXml.eErrorType)
  name.vb: ThrowExcelErrorValueExceptionIf(Func(Of Boolean), eErrorType)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumeric(System.Object)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumeric(System.Object)
  id: IsNumeric(System.Object)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: IsNumeric(Object)
  nameWithType: ExcelFunction.IsNumeric(Object)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumeric(System.Object)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsNumeric
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 636
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIs numeric\n"
  example: []
  syntax:
    content: protected bool IsNumeric(object val)
    parameters:
    - id: val
      type: System.Object
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Function IsNumeric(val As Object) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumeric*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsBool(System.Object)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsBool(System.Object)
  id: IsBool(System.Object)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: IsBool(Object)
  nameWithType: ExcelFunction.IsBool(Object)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsBool(System.Object)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsBool
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 648
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIs bool\n"
  example: []
  syntax:
    content: protected bool IsBool(object val)
    parameters:
    - id: val
      type: System.Object
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Function IsBool(val As Object) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsBool*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsString(System.Object,System.Boolean)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsString(System.Object,System.Boolean)
  id: IsString(System.Object,System.Boolean)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: IsString(Object, Boolean)
  nameWithType: ExcelFunction.IsString(Object, Boolean)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsString(System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsString
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 658
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIs string\n"
  example: []
  syntax:
    content: protected bool IsString(object val, bool allowNullOrEmpty = true)
    parameters:
    - id: val
      type: System.Object
      description: ''
    - id: allowNullOrEmpty
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Function IsString(val As Object, allowNullOrEmpty As Boolean = True) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsString*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.AreEqual(System.Double,System.Double)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.AreEqual(System.Double,System.Double)
  id: AreEqual(System.Double,System.Double)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: AreEqual(Double, Double)
  nameWithType: ExcelFunction.AreEqual(Double, Double)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.AreEqual(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AreEqual
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 677
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nHelper method for comparison of two doubles.\n"
  example: []
  syntax:
    content: protected bool AreEqual(double d1, double d2)
    parameters:
    - id: d1
      type: System.Double
      description: ''
    - id: d2
      type: System.Double
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Function AreEqual(d1 As Double, d2 As Double) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.AreEqual*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext,OfficeOpenXml.ExcelErrorValue@)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext,OfficeOpenXml.ExcelErrorValue@)
  id: ArgsToDoubleEnumerable(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext,OfficeOpenXml.ExcelErrorValue@)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgsToDoubleEnumerable(IEnumerable<FunctionArgument>, ParsingContext, out ExcelErrorValue)
  nameWithType: ExcelFunction.ArgsToDoubleEnumerable(IEnumerable<FunctionArgument>, ParsingContext, out ExcelErrorValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, OfficeOpenXml.FormulaParsing.ParsingContext, out OfficeOpenXml.ExcelErrorValue)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgsToDoubleEnumerable
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 689
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nWill return the arguments as an enumerable of doubles.\n"
  example: []
  syntax:
    content: protected virtual IList<double> ArgsToDoubleEnumerable(IEnumerable<FunctionArgument> arguments, ParsingContext context, out ExcelErrorValue error)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: context
      type: OfficeOpenXml.FormulaParsing.ParsingContext
      description: ''
    - id: error
      type: OfficeOpenXml.ExcelErrorValue
      description: ''
    return:
      type: System.Collections.Generic.IList{System.Double}
      description: ''
    content.vb: Protected Overridable Function ArgsToDoubleEnumerable(arguments As IEnumerable(Of FunctionArgument), context As ParsingContext, ByRef error As ExcelErrorValue) As IList(Of Double)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable*
  nameWithType.vb: ExcelFunction.ArgsToDoubleEnumerable(IEnumerable(Of FunctionArgument), ParsingContext, ByRef ExcelErrorValue)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), OfficeOpenXml.FormulaParsing.ParsingContext, ByRef OfficeOpenXml.ExcelErrorValue)
  name.vb: ArgsToDoubleEnumerable(IEnumerable(Of FunctionArgument), ParsingContext, ByRef ExcelErrorValue)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext,System.Action{OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions},OfficeOpenXml.ExcelErrorValue@)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext,System.Action{OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions},OfficeOpenXml.ExcelErrorValue@)
  id: ArgsToDoubleEnumerable(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext,System.Action{OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions},OfficeOpenXml.ExcelErrorValue@)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgsToDoubleEnumerable(IEnumerable<FunctionArgument>, ParsingContext, Action<DoubleEnumerableParseOptions>, out ExcelErrorValue)
  nameWithType: ExcelFunction.ArgsToDoubleEnumerable(IEnumerable<FunctionArgument>, ParsingContext, Action<DoubleEnumerableParseOptions>, out ExcelErrorValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, OfficeOpenXml.FormulaParsing.ParsingContext, System.Action<OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions>, out OfficeOpenXml.ExcelErrorValue)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgsToDoubleEnumerable
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 706
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nWill return the arguments as an enumerable of doubles.\n"
  example: []
  syntax:
    content: protected virtual IList<double> ArgsToDoubleEnumerable(IEnumerable<FunctionArgument> arguments, ParsingContext context, Action<DoubleEnumerableParseOptions> configHandler, out ExcelErrorValue error)
    parameters:
    - id: arguments
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: context
      type: OfficeOpenXml.FormulaParsing.ParsingContext
      description: ''
    - id: configHandler
      type: System.Action{OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions}
      description: ''
    - id: error
      type: OfficeOpenXml.ExcelErrorValue
      description: ''
    return:
      type: System.Collections.Generic.IList{System.Double}
      description: ''
    content.vb: Protected Overridable Function ArgsToDoubleEnumerable(arguments As IEnumerable(Of FunctionArgument), context As ParsingContext, configHandler As Action(Of DoubleEnumerableParseOptions), ByRef error As ExcelErrorValue) As IList(Of Double)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable*
  exceptions:
  - type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
    commentId: T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
  nameWithType.vb: ExcelFunction.ArgsToDoubleEnumerable(IEnumerable(Of FunctionArgument), ParsingContext, Action(Of DoubleEnumerableParseOptions), ByRef ExcelErrorValue)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), OfficeOpenXml.FormulaParsing.ParsingContext, System.Action(Of OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions), ByRef OfficeOpenXml.ExcelErrorValue)
  name.vb: ArgsToDoubleEnumerable(IEnumerable(Of FunctionArgument), ParsingContext, Action(Of DoubleEnumerableParseOptions), ByRef ExcelErrorValue)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.FormulaParsing.ParsingContext,System.Action{OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions},OfficeOpenXml.ExcelErrorValue@)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.FormulaParsing.ParsingContext,System.Action{OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions},OfficeOpenXml.ExcelErrorValue@)
  id: ArgsToDoubleEnumerable(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.FormulaParsing.ParsingContext,System.Action{OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions},OfficeOpenXml.ExcelErrorValue@)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgsToDoubleEnumerable(FunctionArgument, ParsingContext, Action<DoubleEnumerableParseOptions>, out ExcelErrorValue)
  nameWithType: ExcelFunction.ArgsToDoubleEnumerable(FunctionArgument, ParsingContext, Action<DoubleEnumerableParseOptions>, out ExcelErrorValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument, OfficeOpenXml.FormulaParsing.ParsingContext, System.Action<OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions>, out OfficeOpenXml.ExcelErrorValue)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgsToDoubleEnumerable
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 732
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nWill return the arguments as an enumerable of doubles.\n"
  example: []
  syntax:
    content: protected virtual IList<double> ArgsToDoubleEnumerable(FunctionArgument argument, ParsingContext context, Action<DoubleEnumerableParseOptions> configHandler, out ExcelErrorValue error)
    parameters:
    - id: argument
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
      description: ''
    - id: context
      type: OfficeOpenXml.FormulaParsing.ParsingContext
      description: ''
    - id: configHandler
      type: System.Action{OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions}
      description: ''
    - id: error
      type: OfficeOpenXml.ExcelErrorValue
      description: ''
    return:
      type: System.Collections.Generic.IList{System.Double}
      description: ''
    content.vb: Protected Overridable Function ArgsToDoubleEnumerable(argument As FunctionArgument, context As ParsingContext, configHandler As Action(Of DoubleEnumerableParseOptions), ByRef error As ExcelErrorValue) As IList(Of Double)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable*
  nameWithType.vb: ExcelFunction.ArgsToDoubleEnumerable(FunctionArgument, ParsingContext, Action(Of DoubleEnumerableParseOptions), ByRef ExcelErrorValue)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument, OfficeOpenXml.FormulaParsing.ParsingContext, System.Action(Of OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions), ByRef OfficeOpenXml.ExcelErrorValue)
  name.vb: ArgsToDoubleEnumerable(FunctionArgument, ParsingContext, Action(Of DoubleEnumerableParseOptions), ByRef ExcelErrorValue)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.FormulaParsing.ParsingContext,OfficeOpenXml.ExcelErrorValue@)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.FormulaParsing.ParsingContext,OfficeOpenXml.ExcelErrorValue@)
  id: ArgsToDoubleEnumerable(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.FormulaParsing.ParsingContext,OfficeOpenXml.ExcelErrorValue@)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgsToDoubleEnumerable(FunctionArgument, ParsingContext, out ExcelErrorValue)
  nameWithType: ExcelFunction.ArgsToDoubleEnumerable(FunctionArgument, ParsingContext, out ExcelErrorValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument, OfficeOpenXml.FormulaParsing.ParsingContext, out OfficeOpenXml.ExcelErrorValue)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgsToDoubleEnumerable
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 744
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nWill return the arguments as an enumerable of doubles using default parameters\n"
  example: []
  syntax:
    content: protected virtual IList<double> ArgsToDoubleEnumerable(FunctionArgument argument, ParsingContext context, out ExcelErrorValue error)
    parameters:
    - id: argument
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
      description: ''
    - id: context
      type: OfficeOpenXml.FormulaParsing.ParsingContext
      description: ''
    - id: error
      type: OfficeOpenXml.ExcelErrorValue
      description: ''
    return:
      type: System.Collections.Generic.IList{System.Double}
      description: ''
    content.vb: Protected Overridable Function ArgsToDoubleEnumerable(argument As FunctionArgument, context As ParsingContext, ByRef error As ExcelErrorValue) As IList(Of Double)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable*
  nameWithType.vb: ExcelFunction.ArgsToDoubleEnumerable(FunctionArgument, ParsingContext, ByRef ExcelErrorValue)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument, OfficeOpenXml.FormulaParsing.ParsingContext, ByRef OfficeOpenXml.ExcelErrorValue)
  name.vb: ArgsToDoubleEnumerable(FunctionArgument, ParsingContext, ByRef ExcelErrorValue)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToObjectEnumerable(System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToObjectEnumerable(System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  id: ArgsToObjectEnumerable(System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ArgsToObjectEnumerable(Boolean, Boolean, Boolean, IEnumerable<FunctionArgument>, ParsingContext)
  nameWithType: ExcelFunction.ArgsToObjectEnumerable(Boolean, Boolean, Boolean, IEnumerable<FunctionArgument>, ParsingContext)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToObjectEnumerable(System.Boolean, System.Boolean, System.Boolean, System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, OfficeOpenXml.FormulaParsing.ParsingContext)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ArgsToObjectEnumerable
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 758
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nWill return the arguments as an enumerable of objects.\n"
  example: []
  syntax:
    content: protected virtual IEnumerable<object> ArgsToObjectEnumerable(bool ignoreHiddenCells, bool ignoreErrors, bool ignoreNestedSubtotalAggregate, IEnumerable<FunctionArgument> arguments, ParsingContext context)
    parameters:
    - id: ignoreHiddenCells
      type: System.Boolean
      description: If a cell is hidden and this value is true the value of that cell will be ignored
    - id: ignoreErrors
      type: System.Boolean
      description: ''
    - id: ignoreNestedSubtotalAggregate
      type: System.Boolean
      description: ''
    - id: arguments
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
      description: ''
    - id: context
      type: OfficeOpenXml.FormulaParsing.ParsingContext
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: ''
    content.vb: Protected Overridable Function ArgsToObjectEnumerable(ignoreHiddenCells As Boolean, ignoreErrors As Boolean, ignoreNestedSubtotalAggregate As Boolean, arguments As IEnumerable(Of FunctionArgument), context As ParsingContext) As IEnumerable(Of Object)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToObjectEnumerable*
  nameWithType.vb: ExcelFunction.ArgsToObjectEnumerable(Boolean, Boolean, Boolean, IEnumerable(Of FunctionArgument), ParsingContext)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToObjectEnumerable(System.Boolean, System.Boolean, System.Boolean, System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), OfficeOpenXml.FormulaParsing.ParsingContext)
  name.vb: ArgsToObjectEnumerable(Boolean, Boolean, Boolean, IEnumerable(Of FunctionArgument), ParsingContext)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  id: CreateResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: CreateResult(Object, DataType)
  nameWithType: ExcelFunction.CreateResult(Object, DataType)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult(System.Object, OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CreateResult
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 769
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nUse this method to create a result to return from Excel functions. \n"
  example: []
  syntax:
    content: protected CompileResult CreateResult(object result, DataType dataType)
    parameters:
    - id: result
      type: System.Object
      description: ''
    - id: dataType
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType
      description: ''
    return:
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
      description: ''
    content.vb: Protected Function CreateResult(result As Object, dataType As DataType) As CompileResult
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  id: CreateResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: CreateResult(Object, DataType, FormulaRangeAddress)
  nameWithType: ExcelFunction.CreateResult(Object, DataType, FormulaRangeAddress)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult(System.Object, OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType, OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CreateResult
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 782
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nUse this method to create a result to return from Excel functions.\n"
  example: []
  syntax:
    content: protected CompileResult CreateResult(object result, DataType dataType, FormulaRangeAddress address)
    parameters:
    - id: result
      type: System.Object
      description: ''
    - id: dataType
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType
      description: ''
    - id: address
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
      description: ''
    return:
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
      description: ''
    content.vb: Protected Function CreateResult(result As Object, dataType As DataType, address As FormulaRangeAddress) As CompileResult
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateDynamicArrayResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateDynamicArrayResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  id: CreateDynamicArrayResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: CreateDynamicArrayResult(Object, DataType)
  nameWithType: ExcelFunction.CreateDynamicArrayResult(Object, DataType)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateDynamicArrayResult(System.Object, OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CreateDynamicArrayResult
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 794
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nUse this method to create a result to return from Excel functions. \n"
  example: []
  syntax:
    content: protected CompileResult CreateDynamicArrayResult(object result, DataType dataType)
    parameters:
    - id: result
      type: System.Object
      description: ''
    - id: dataType
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType
      description: ''
    return:
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
      description: ''
    content.vb: Protected Function CreateDynamicArrayResult(result As Object, dataType As DataType) As CompileResult
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateDynamicArrayResult*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateDynamicArrayResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateDynamicArrayResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  id: CreateDynamicArrayResult(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: CreateDynamicArrayResult(Object, DataType, FormulaRangeAddress)
  nameWithType: ExcelFunction.CreateDynamicArrayResult(Object, DataType, FormulaRangeAddress)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateDynamicArrayResult(System.Object, OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType, OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CreateDynamicArrayResult
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 807
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nUse this method to create a result to return from Excel functions.\n"
  example: []
  syntax:
    content: protected CompileResult CreateDynamicArrayResult(object result, DataType dataType, FormulaRangeAddress address)
    parameters:
    - id: result
      type: System.Object
      description: ''
    - id: dataType
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType
      description: ''
    - id: address
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
      description: ''
    return:
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
      description: ''
    content.vb: Protected Function CreateDynamicArrayResult(result As Object, dataType As DataType, address As FormulaRangeAddress) As CompileResult
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateDynamicArrayResult*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateAddressResult(OfficeOpenXml.FormulaParsing.IRangeInfo,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateAddressResult(OfficeOpenXml.FormulaParsing.IRangeInfo,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  id: CreateAddressResult(OfficeOpenXml.FormulaParsing.IRangeInfo,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: CreateAddressResult(IRangeInfo, DataType)
  nameWithType: ExcelFunction.CreateAddressResult(IRangeInfo, DataType)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateAddressResult(OfficeOpenXml.FormulaParsing.IRangeInfo, OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CreateAddressResult
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 819
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nUse this method to create a result to return from Excel functions. \n"
  example: []
  syntax:
    content: protected CompileResult CreateAddressResult(IRangeInfo result, DataType dataType)
    parameters:
    - id: result
      type: OfficeOpenXml.FormulaParsing.IRangeInfo
      description: ''
    - id: dataType
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType
      description: ''
    return:
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
      description: ''
    content.vb: Protected Function CreateAddressResult(result As IRangeInfo, dataType As DataType) As CompileResult
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateAddressResult*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult(OfficeOpenXml.eErrorType)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult(OfficeOpenXml.eErrorType)
  id: CreateResult(OfficeOpenXml.eErrorType)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: CreateResult(eErrorType)
  nameWithType: ExcelFunction.CreateResult(eErrorType)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult(OfficeOpenXml.eErrorType)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CreateResult
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 830
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nUse this method to create a result to return from Excel functions. \n"
  example: []
  syntax:
    content: protected CompileResult CreateResult(eErrorType errorType)
    parameters:
    - id: errorType
      type: OfficeOpenXml.eErrorType
      description: ''
    return:
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
      description: ''
    content.vb: Protected Function CreateResult(errorType As eErrorType) As CompileResult
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.ExcelErrorValue@)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.ExcelErrorValue@)
  id: CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.ExcelErrorValue@)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: CheckForAndHandleExcelError(FunctionArgument, out ExcelErrorValue)
  nameWithType: ExcelFunction.CheckForAndHandleExcelError(FunctionArgument, out ExcelErrorValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument, out OfficeOpenXml.ExcelErrorValue)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CheckForAndHandleExcelError
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 841
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nif the supplied <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg</code> contains an Excel error\nan <xref href=\"OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException\" data-throw-if-not-resolved=\"false\"></xref> with that errorcode will be thrown\n"
  example: []
  syntax:
    content: protected void CheckForAndHandleExcelError(FunctionArgument arg, out ExcelErrorValue err)
    parameters:
    - id: arg
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
      description: ''
    - id: err
      type: OfficeOpenXml.ExcelErrorValue
      description: If the cell contains an error the error will be assigned to this variable
    content.vb: Protected Sub CheckForAndHandleExcelError(arg As FunctionArgument, ByRef err As ExcelErrorValue)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError*
  nameWithType.vb: ExcelFunction.CheckForAndHandleExcelError(FunctionArgument, ByRef ExcelErrorValue)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument, ByRef OfficeOpenXml.ExcelErrorValue)
  name.vb: CheckForAndHandleExcelError(FunctionArgument, ByRef ExcelErrorValue)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.ICellInfo,OfficeOpenXml.ExcelErrorValue@)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.ICellInfo,OfficeOpenXml.ExcelErrorValue@)
  id: CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.ICellInfo,OfficeOpenXml.ExcelErrorValue@)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: CheckForAndHandleExcelError(ICellInfo, out ExcelErrorValue)
  nameWithType: ExcelFunction.CheckForAndHandleExcelError(ICellInfo, out ExcelErrorValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.ICellInfo, out OfficeOpenXml.ExcelErrorValue)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CheckForAndHandleExcelError
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 856
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf the supplied <code data-dev-comment-type=\"paramref\" class=\"paramref\">cell</code> contains an Excel error\nan <xref href=\"OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException\" data-throw-if-not-resolved=\"false\"></xref> with that errorcode will be thrown\n"
  example: []
  syntax:
    content: protected void CheckForAndHandleExcelError(ICellInfo cell, out ExcelErrorValue err)
    parameters:
    - id: cell
      type: OfficeOpenXml.FormulaParsing.ICellInfo
      description: ''
    - id: err
      type: OfficeOpenXml.ExcelErrorValue
      description: If the cell contains an error the error will be assigned to this variable
    content.vb: Protected Sub CheckForAndHandleExcelError(cell As ICellInfo, ByRef err As ExcelErrorValue)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError*
  nameWithType.vb: ExcelFunction.CheckForAndHandleExcelError(ICellInfo, ByRef ExcelErrorValue)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.ICellInfo, ByRef OfficeOpenXml.ExcelErrorValue)
  name.vb: CheckForAndHandleExcelError(ICellInfo, ByRef ExcelErrorValue)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetResultByObject(System.Object)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetResultByObject(System.Object)
  id: GetResultByObject(System.Object)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: GetResultByObject(Object)
  nameWithType: ExcelFunction.GetResultByObject(Object)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetResultByObject(System.Object)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetResultByObject
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 869
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nGet result by object\n"
  example: []
  syntax:
    content: protected CompileResult GetResultByObject(object result)
    parameters:
    - id: result
      type: System.Object
      description: ''
    return:
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
      description: ''
    content.vb: Protected Function GetResultByObject(result As Object) As CompileResult
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetResultByObject*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsVolatile
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsVolatile
  id: IsVolatile
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: IsVolatile
  nameWithType: ExcelFunction.IsVolatile
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsVolatile
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsVolatile
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 892
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf the function returns a different value with the same parameters.\n"
  example: []
  syntax:
    content: public virtual bool IsVolatile { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsVolatile As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsVolatile*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ReturnsReference
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ReturnsReference
  id: ReturnsReference
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ReturnsReference
  nameWithType: ExcelFunction.ReturnsReference
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ReturnsReference
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ReturnsReference
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 902
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf the function returns a range reference\n"
  example: []
  syntax:
    content: public virtual bool ReturnsReference { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property ReturnsReference As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ReturnsReference*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsAllowedInCalculatedPivotTableField
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsAllowedInCalculatedPivotTableField
  id: IsAllowedInCalculatedPivotTableField
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: IsAllowedInCalculatedPivotTableField
  nameWithType: ExcelFunction.IsAllowedInCalculatedPivotTableField
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsAllowedInCalculatedPivotTableField
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsAllowedInCalculatedPivotTableField
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 912
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf the function is allowed in a pivot table calculated field. Default is true, if not overridden.\n"
  example: []
  syntax:
    content: public virtual bool IsAllowedInCalculatedPivotTableField { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsAllowedInCalculatedPivotTableField As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsAllowedInCalculatedPivotTableField*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ParametersInfo
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ParametersInfo
  id: ParametersInfo
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: ParametersInfo
  nameWithType: ExcelFunction.ParametersInfo
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ParametersInfo
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ParametersInfo
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 922
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nProvides information about the functions parameters.\n"
  example: []
  syntax:
    content: public virtual ExcelFunctionParametersInfo ParametersInfo { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunctionParametersInfo
    content.vb: Public Overridable ReadOnly Property ParametersInfo As ExcelFunctionParametersInfo
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ParametersInfo*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.NamespacePrefix
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.NamespacePrefix
  id: NamespacePrefix
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  langs:
  - csharp
  - vb
  name: NamespacePrefix
  nameWithType: ExcelFunction.NamespacePrefix
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.NamespacePrefix
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: NamespacePrefix
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelFunction.cs
    startLine: 931
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nInformation of individual arguments of the function used internally by the formula parser .\n"
  example: []
  syntax:
    content: public virtual string NamespacePrefix { get; }
    parameters: []
    return:
      type: System.String
      description: Function argument information
    content.vb: Public Overridable ReadOnly Property NamespacePrefix As String
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.NamespacePrefix*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
references:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions
  commentId: N:OfficeOpenXml.FormulaParsing.Excel.Functions
  name: OfficeOpenXml.FormulaParsing.Excel.Functions
  nameWithType: OfficeOpenXml.FormulaParsing.Excel.Functions
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.#ctor
  name: ExcelFunction
  nameWithType: ExcelFunction.ExcelFunction
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ExcelFunction
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo
  commentId: T:OfficeOpenXml.FormulaParsing.IRangeInfo
  parent: OfficeOpenXml.FormulaParsing
  name: IRangeInfo
  nameWithType: IRangeInfo
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo
- uid: OfficeOpenXml.FormulaParsing.ParsingContext
  commentId: T:OfficeOpenXml.FormulaParsing.ParsingContext
  parent: OfficeOpenXml.FormulaParsing
  name: ParsingContext
  nameWithType: ParsingContext
  fullName: OfficeOpenXml.FormulaParsing.ParsingContext
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  commentId: T:OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  parent: OfficeOpenXml.FormulaParsing.FormulaExpressions
  name: CompileResult
  nameWithType: CompileResult
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute
  name: Execute
  nameWithType: ExcelFunction.Execute
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute
- uid: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
  commentId: T:System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<FunctionArgument>
  nameWithType: IList<FunctionArgument>
  fullName: System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>
  nameWithType.vb: IList(Of FunctionArgument)
  fullName.vb: System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument)
  name.vb: IList(Of FunctionArgument)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
    name: FunctionArgument
    nameWithType: FunctionArgument
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
    name: FunctionArgument
    nameWithType: FunctionArgument
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing
  commentId: N:OfficeOpenXml.FormulaParsing
  name: OfficeOpenXml.FormulaParsing
  nameWithType: OfficeOpenXml.FormulaParsing
  fullName: OfficeOpenXml.FormulaParsing
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions
  commentId: N:OfficeOpenXml.FormulaParsing.FormulaExpressions
  name: OfficeOpenXml.FormulaParsing.FormulaExpressions
  nameWithType: OfficeOpenXml.FormulaParsing.FormulaExpressions
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgumentMinLength*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgumentMinLength
  name: ArgumentMinLength
  nameWithType: ExcelFunction.ArgumentMinLength
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgumentMinLength
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  isExternal: true
  name: Execute(IList<FunctionArgument>, ParsingContext)
  nameWithType: ExcelFunction.Execute(IList<FunctionArgument>, ParsingContext)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, OfficeOpenXml.FormulaParsing.ParsingContext)
  nameWithType.vb: ExcelFunction.Execute(IList(Of FunctionArgument), ParsingContext)
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), OfficeOpenXml.FormulaParsing.ParsingContext)
  name.vb: Execute(IList(Of FunctionArgument), ParsingContext)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
    name: Execute
    nameWithType: ExcelFunction.Execute
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
    name: FunctionArgument
    nameWithType: FunctionArgument
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.ParsingContext
    name: ParsingContext
    nameWithType: ParsingContext
    fullName: OfficeOpenXml.FormulaParsing.ParsingContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
    name: Execute
    nameWithType: ExcelFunction.Execute
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
    name: FunctionArgument
    nameWithType: FunctionArgument
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.ParsingContext
    name: ParsingContext
    nameWithType: ParsingContext
    fullName: OfficeOpenXml.FormulaParsing.ParsingContext
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ParametersInfo
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ParametersInfo
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  name: ParametersInfo
  nameWithType: ExcelFunction.ParametersInfo
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ParametersInfo
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.AdjustParameterAddress
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.AdjustParameterAddress
  isExternal: true
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress
  name: GetNewParameterAddress
  nameWithType: ExcelFunction.GetNewParameterAddress
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress
- uid: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult}
  commentId: T:System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<CompileResult>
  nameWithType: IList<CompileResult>
  fullName: System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult>
  nameWithType.vb: IList(Of CompileResult)
  fullName.vb: System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult)
  name.vb: IList(Of CompileResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
    name: CompileResult
    nameWithType: CompileResult
    fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
    name: CompileResult
    nameWithType: CompileResult
    fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Queue{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}
  commentId: T:System.Collections.Generic.Queue{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Queue`1
  name: Queue<FormulaRangeAddress>
  nameWithType: Queue<FormulaRangeAddress>
  fullName: System.Collections.Generic.Queue<OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress>
  nameWithType.vb: Queue(Of FormulaRangeAddress)
  fullName.vb: System.Collections.Generic.Queue(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  name.vb: Queue(Of FormulaRangeAddress)
  spec.csharp:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    name: FormulaRangeAddress
    nameWithType: FormulaRangeAddress
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    name: FormulaRangeAddress
    nameWithType: FormulaRangeAddress
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: ExcelFunction
  nameWithType: ExcelFunction
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
- uid: System.Collections.Generic.Queue`1
  commentId: T:System.Collections.Generic.Queue`1
  isExternal: true
  name: Queue<T>
  nameWithType: Queue<T>
  fullName: System.Collections.Generic.Queue<T>
  nameWithType.vb: Queue(Of T)
  fullName.vb: System.Collections.Generic.Queue(Of T)
  name.vb: Queue(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsErrorHandlingFunction*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsErrorHandlingFunction
  name: IsErrorHandlingFunction
  nameWithType: ExcelFunction.IsErrorHandlingFunction
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsErrorHandlingFunction
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArrayBehaviour*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArrayBehaviour
  name: ArrayBehaviour
  nameWithType: ExcelFunction.ArrayBehaviour
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArrayBehaviour
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunctionArrayBehaviour
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunctionArrayBehaviour
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: ExcelFunctionArrayBehaviour
  nameWithType: ExcelFunctionArrayBehaviour
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunctionArrayBehaviour
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ConfigureArrayBehaviour*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ConfigureArrayBehaviour
  name: ConfigureArrayBehaviour
  nameWithType: ExcelFunction.ConfigureArrayBehaviour
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ConfigureArrayBehaviour
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ArrayBehaviourConfig
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.ArrayBehaviourConfig
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: ArrayBehaviourConfig
  nameWithType: ArrayBehaviourConfig
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ArrayBehaviourConfig
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.HandlesVariables*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.HandlesVariables
  name: HandlesVariables
  nameWithType: ExcelFunction.HandlesVariables
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.HandlesVariables
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetFirstValue*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetFirstValue
  name: GetFirstValue
  nameWithType: ExcelFunction.GetFirstValue
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetFirstValue
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<FunctionArgument>
  nameWithType: IEnumerable<FunctionArgument>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>
  nameWithType.vb: IEnumerable(Of FunctionArgument)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument)
  name.vb: IEnumerable(Of FunctionArgument)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
    name: FunctionArgument
    nameWithType: FunctionArgument
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
    name: FunctionArgument
    nameWithType: FunctionArgument
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.eErrorType
  commentId: T:OfficeOpenXml.eErrorType
  parent: OfficeOpenXml
  name: eErrorType
  nameWithType: eErrorType
  fullName: OfficeOpenXml.eErrorType
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
  commentId: T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
  name: ExcelErrorValueException
  nameWithType: ExcelErrorValueException
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments
  name: ValidateArguments
  nameWithType: ExcelFunction.ValidateArguments
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToAddress*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToAddress
  name: ArgToAddress
  nameWithType: ExcelFunction.ArgToAddress
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToAddress
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt
  name: ArgToInt
  nameWithType: ExcelFunction.ArgToInt
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt
- uid: OfficeOpenXml.ExcelErrorValue
  commentId: T:OfficeOpenXml.ExcelErrorValue
  parent: OfficeOpenXml
  name: ExcelErrorValue
  nameWithType: ExcelErrorValue
  fullName: OfficeOpenXml.ExcelErrorValue
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: RoundingMethod
  nameWithType: RoundingMethod
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToString*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToString
  name: ArgToString
  nameWithType: ExcelFunction.ArgToString
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToString
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal
  name: ArgToDecimal
  nameWithType: ExcelFunction.ArgToDecimal
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy
  commentId: T:OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy
  parent: OfficeOpenXml.FormulaParsing
  name: PrecisionAndRoundingStrategy
  nameWithType: PrecisionAndRoundingStrategy
  fullName: OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetDecimalSingleArgument*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetDecimalSingleArgument
  name: GetDecimalSingleArgument
  nameWithType: ExcelFunction.GetDecimalSingleArgument
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetDecimalSingleArgument
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: FunctionArgument
  nameWithType: FunctionArgument
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToRangeInfo*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToRangeInfo
  name: ArgToRangeInfo
  nameWithType: ExcelFunction.ArgToRangeInfo
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToRangeInfo
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Divide*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Divide
  name: Divide
  nameWithType: ExcelFunction.Divide
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Divide
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumericString*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumericString
  name: IsNumericString
  nameWithType: ExcelFunction.IsNumericString
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumericString
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsInteger*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsInteger
  name: IsInteger
  nameWithType: ExcelFunction.IsInteger
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsInteger
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool
  name: ArgToBool
  nameWithType: ExcelFunction.ArgToBool
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf
  name: ThrowArgumentExceptionIf
  nameWithType: ExcelFunction.ThrowArgumentExceptionIf
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf
- uid: System.Func{System.Boolean}
  commentId: T:System.Func{System.Boolean}
  parent: System
  definition: System.Func`1
  name: Func<Boolean>
  nameWithType: Func<Boolean>
  fullName: System.Func<System.Boolean>
  nameWithType.vb: Func(Of Boolean)
  fullName.vb: System.Func(Of System.Boolean)
  name.vb: Func(Of Boolean)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException
  name: ThrowExcelErrorValueException
  nameWithType: ExcelFunction.ThrowExcelErrorValueException
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueExceptionIf*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueExceptionIf
  name: ThrowExcelErrorValueExceptionIf
  nameWithType: ExcelFunction.ThrowExcelErrorValueExceptionIf
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueExceptionIf
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumeric*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumeric
  name: IsNumeric
  nameWithType: ExcelFunction.IsNumeric
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsNumeric
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsBool*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsBool
  name: IsBool
  nameWithType: ExcelFunction.IsBool
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsBool
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsString*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsString
  name: IsString
  nameWithType: ExcelFunction.IsString
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsString
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.AreEqual*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.AreEqual
  name: AreEqual
  nameWithType: ExcelFunction.AreEqual
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.AreEqual
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable
  name: ArgsToDoubleEnumerable
  nameWithType: ExcelFunction.ArgsToDoubleEnumerable
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable
- uid: System.Collections.Generic.IList{System.Double}
  commentId: T:System.Collections.Generic.IList{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Double>
  nameWithType: IList<Double>
  fullName: System.Collections.Generic.IList<System.Double>
  nameWithType.vb: IList(Of Double)
  fullName.vb: System.Collections.Generic.IList(Of System.Double)
  name.vb: IList(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions}
  commentId: T:System.Action{OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions}
  parent: System
  definition: System.Action`1
  name: Action<DoubleEnumerableParseOptions>
  nameWithType: Action<DoubleEnumerableParseOptions>
  fullName: System.Action<OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions>
  nameWithType.vb: Action(Of DoubleEnumerableParseOptions)
  fullName.vb: System.Action(Of OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions)
  name.vb: Action(Of DoubleEnumerableParseOptions)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions
    name: DoubleEnumerableParseOptions
    nameWithType: DoubleEnumerableParseOptions
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions
    name: DoubleEnumerableParseOptions
    nameWithType: DoubleEnumerableParseOptions
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToObjectEnumerable*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToObjectEnumerable
  name: ArgsToObjectEnumerable
  nameWithType: ExcelFunction.ArgsToObjectEnumerable
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToObjectEnumerable
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult
  name: CreateResult
  nameWithType: ExcelFunction.CreateResult
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType
  commentId: T:OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType
  parent: OfficeOpenXml.FormulaParsing.FormulaExpressions
  name: DataType
  nameWithType: DataType
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: FormulaRangeAddress
  nameWithType: FormulaRangeAddress
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateDynamicArrayResult*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateDynamicArrayResult
  name: CreateDynamicArrayResult
  nameWithType: ExcelFunction.CreateDynamicArrayResult
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateDynamicArrayResult
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateAddressResult*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateAddressResult
  name: CreateAddressResult
  nameWithType: ExcelFunction.CreateAddressResult
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateAddressResult
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError
  name: CheckForAndHandleExcelError
  nameWithType: ExcelFunction.CheckForAndHandleExcelError
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError
- uid: OfficeOpenXml.FormulaParsing.ICellInfo
  commentId: T:OfficeOpenXml.FormulaParsing.ICellInfo
  parent: OfficeOpenXml.FormulaParsing
  name: ICellInfo
  nameWithType: ICellInfo
  fullName: OfficeOpenXml.FormulaParsing.ICellInfo
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetResultByObject*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetResultByObject
  name: GetResultByObject
  nameWithType: ExcelFunction.GetResultByObject
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetResultByObject
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsVolatile*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsVolatile
  name: IsVolatile
  nameWithType: ExcelFunction.IsVolatile
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsVolatile
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ReturnsReference*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ReturnsReference
  name: ReturnsReference
  nameWithType: ExcelFunction.ReturnsReference
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ReturnsReference
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsAllowedInCalculatedPivotTableField*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsAllowedInCalculatedPivotTableField
  name: IsAllowedInCalculatedPivotTableField
  nameWithType: ExcelFunction.IsAllowedInCalculatedPivotTableField
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.IsAllowedInCalculatedPivotTableField
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ParametersInfo*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ParametersInfo
  name: ParametersInfo
  nameWithType: ExcelFunction.ParametersInfo
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ParametersInfo
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunctionParametersInfo
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunctionParametersInfo
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: ExcelFunctionParametersInfo
  nameWithType: ExcelFunctionParametersInfo
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunctionParametersInfo
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.NamespacePrefix*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.NamespacePrefix
  name: NamespacePrefix
  nameWithType: ExcelFunction.NamespacePrefix
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.NamespacePrefix
