### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  commentId: T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  id: IExcelConditionalFormattingDataBarGroup
  parent: OfficeOpenXml.ConditionalFormatting.Contracts
  children:
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisColor
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisPosition
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Border
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.BorderColor
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Color
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Direction
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.FillColor
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Gradient
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.HighValue
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.LowValue
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarBorderColorSameAsPositive
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarColorSameAsPositive
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBorderColor
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeFillColor
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.ShowValue
  langs:
  - csharp
  - vb
  name: IExcelConditionalFormattingDataBarGroup
  nameWithType: IExcelConditionalFormattingDataBarGroup
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  type: Interface
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IExcelConditionalFormattingDataBarGroup
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 21
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nIExcelConditionalFormattingDataBar\n"
  example: []
  syntax:
    content: 'public interface IExcelConditionalFormattingDataBarGroup : IExcelConditionalFormattingRule'
    content.vb: >-
      Public Interface IExcelConditionalFormattingDataBarGroup
          Inherits IExcelConditionalFormattingRule
  inheritedMembers:
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Type
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Address
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Priority
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.StopIfTrue
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Style
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.PivotTable
  - OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.As
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.ShowValue
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.ShowValue
  id: ShowValue
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: ShowValue
  nameWithType: IExcelConditionalFormattingDataBarGroup.ShowValue
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.ShowValue
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ShowValue
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 28
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nShowValue\n"
  example: []
  syntax:
    content: bool ShowValue { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property ShowValue As Boolean
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.ShowValue*
  modifiers.csharp:
  - get
  - set
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Gradient
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Gradient
  id: Gradient
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: Gradient
  nameWithType: IExcelConditionalFormattingDataBarGroup.Gradient
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Gradient
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Gradient
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 33
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nIf the databar should be a gradient. True by default\n"
  example: []
  syntax:
    content: bool Gradient { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property Gradient As Boolean
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Gradient*
  modifiers.csharp:
  - get
  - set
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Border
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Border
  id: Border
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: Border
  nameWithType: IExcelConditionalFormattingDataBarGroup.Border
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Border
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Border
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 39
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nWheter there is a border color or not. \nFalse by default. Is set to true if BorderColor or NegativeBorderColor is set\n"
  example: []
  syntax:
    content: bool Border { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property Border As Boolean
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Border*
  modifiers.csharp:
  - get
  - set
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarColorSameAsPositive
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarColorSameAsPositive
  id: NegativeBarColorSameAsPositive
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: NegativeBarColorSameAsPositive
  nameWithType: IExcelConditionalFormattingDataBarGroup.NegativeBarColorSameAsPositive
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarColorSameAsPositive
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: NegativeBarColorSameAsPositive
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 45
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nWheter negative and positive values should have the same colour. \nFalse by default. Is set to true if NegativeFillColor is set.\n"
  example: []
  syntax:
    content: bool NegativeBarColorSameAsPositive { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property NegativeBarColorSameAsPositive As Boolean
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarColorSameAsPositive*
  modifiers.csharp:
  - get
  - set
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarBorderColorSameAsPositive
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarBorderColorSameAsPositive
  id: NegativeBarBorderColorSameAsPositive
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: NegativeBarBorderColorSameAsPositive
  nameWithType: IExcelConditionalFormattingDataBarGroup.NegativeBarBorderColorSameAsPositive
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarBorderColorSameAsPositive
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: NegativeBarBorderColorSameAsPositive
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 51
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nWheter negative and positive values should have the same border colour. \nFalse by default. Is set to true if NegativeBorderColor is set.\n"
  example: []
  syntax:
    content: bool NegativeBarBorderColorSameAsPositive { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property NegativeBarBorderColorSameAsPositive As Boolean
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarBorderColorSameAsPositive*
  modifiers.csharp:
  - get
  - set
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisPosition
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisPosition
  id: AxisPosition
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: AxisPosition
  nameWithType: IExcelConditionalFormattingDataBarGroup.AxisPosition
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisPosition
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AxisPosition
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 56
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nWhat position the axis between positive and negative values is to be put at.\n"
  example: []
  syntax:
    content: eExcelDatabarAxisPosition AxisPosition { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.ConditionalFormatting.eExcelDatabarAxisPosition
    content.vb: Property AxisPosition As eExcelDatabarAxisPosition
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisPosition*
  modifiers.csharp:
  - get
  - set
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.LowValue
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.LowValue
  id: LowValue
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: LowValue
  nameWithType: IExcelConditionalFormattingDataBarGroup.LowValue
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.LowValue
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LowValue
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 61
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nDatabar Low Value\n"
  example: []
  syntax:
    content: ExcelConditionalFormattingIconDataBarValue LowValue { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue
    content.vb: ReadOnly Property LowValue As ExcelConditionalFormattingIconDataBarValue
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.LowValue*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.HighValue
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.HighValue
  id: HighValue
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: HighValue
  nameWithType: IExcelConditionalFormattingDataBarGroup.HighValue
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.HighValue
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: HighValue
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 66
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nDatabar High Value\n"
  example: []
  syntax:
    content: ExcelConditionalFormattingIconDataBarValue HighValue { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue
    content.vb: ReadOnly Property HighValue As ExcelConditionalFormattingIconDataBarValue
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.HighValue*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Color
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Color
  id: Color
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: Color
  nameWithType: IExcelConditionalFormattingDataBarGroup.Color
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Color
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Color
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 70
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nThe color of the databar. ShortHand for FillColor.Color\n"
  example: []
  syntax:
    content: Color Color { get; set; }
    parameters: []
    return:
      type: System.Drawing.Color
    content.vb: Property Color As Color
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Color*
  modifiers.csharp:
  - get
  - set
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.FillColor
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.FillColor
  id: FillColor
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: FillColor
  nameWithType: IExcelConditionalFormattingDataBarGroup.FillColor
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.FillColor
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FillColor
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 75
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nFill color of Databar\n"
  example: []
  syntax:
    content: ExcelDxfColor FillColor { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Style.Dxf.ExcelDxfColor
    content.vb: ReadOnly Property FillColor As ExcelDxfColor
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.FillColor*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.BorderColor
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.BorderColor
  id: BorderColor
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: BorderColor
  nameWithType: IExcelConditionalFormattingDataBarGroup.BorderColor
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.BorderColor
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: BorderColor
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 80
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nBorder color of databar. \nSetting any property sets Border to true\n"
  example: []
  syntax:
    content: ExcelDxfColor BorderColor { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Style.Dxf.ExcelDxfColor
    content.vb: ReadOnly Property BorderColor As ExcelDxfColor
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.BorderColor*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeFillColor
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeFillColor
  id: NegativeFillColor
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: NegativeFillColor
  nameWithType: IExcelConditionalFormattingDataBarGroup.NegativeFillColor
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeFillColor
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: NegativeFillColor
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 85
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nFill color for negative values\nSetting any property sets NegativeBarColorSameAsPositive to false\n"
  example: []
  syntax:
    content: ExcelDxfColor NegativeFillColor { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Style.Dxf.ExcelDxfColor
    content.vb: ReadOnly Property NegativeFillColor As ExcelDxfColor
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeFillColor*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBorderColor
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBorderColor
  id: NegativeBorderColor
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: NegativeBorderColor
  nameWithType: IExcelConditionalFormattingDataBarGroup.NegativeBorderColor
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBorderColor
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: NegativeBorderColor
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 90
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nBorder color for negative values\nSetting any property sets NegativeBarBorderColorSameAsPositive to false\n"
  example: []
  syntax:
    content: ExcelDxfColor NegativeBorderColor { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Style.Dxf.ExcelDxfColor
    content.vb: ReadOnly Property NegativeBorderColor As ExcelDxfColor
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBorderColor*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisColor
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisColor
  id: AxisColor
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: AxisColor
  nameWithType: IExcelConditionalFormattingDataBarGroup.AxisColor
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisColor
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AxisColor
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 94
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nColor of the axis between negative and positive values\n"
  example: []
  syntax:
    content: ExcelDxfColor AxisColor { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Style.Dxf.ExcelDxfColor
    content.vb: ReadOnly Property AxisColor As ExcelDxfColor
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisColor*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Direction
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Direction
  id: Direction
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup
  langs:
  - csharp
  - vb
  name: Direction
  nameWithType: IExcelConditionalFormattingDataBarGroup.Direction
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Direction
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Direction
    path: ../src/EPPlus/ConditionalFormatting/Contracts/IExcelConditionalFormattingDataBarGroup.cs
    startLine: 99
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting.Contracts
  summary: "\nDirection of the Databar\n"
  example: []
  syntax:
    content: eDatabarDirection Direction { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.ConditionalFormatting.eDatabarDirection
    content.vb: Property Direction As eDatabarDirection
  overload: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Direction*
  modifiers.csharp:
  - get
  - set
references:
- uid: OfficeOpenXml.ConditionalFormatting.Contracts
  commentId: N:OfficeOpenXml.ConditionalFormatting.Contracts
  name: OfficeOpenXml.ConditionalFormatting.Contracts
  nameWithType: OfficeOpenXml.ConditionalFormatting.Contracts
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Type
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Type
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: Type
  nameWithType: IExcelConditionalFormattingRule.Type
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Type
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Address
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Address
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: Address
  nameWithType: IExcelConditionalFormattingRule.Address
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Address
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Priority
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Priority
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: Priority
  nameWithType: IExcelConditionalFormattingRule.Priority
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Priority
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.StopIfTrue
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.StopIfTrue
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: StopIfTrue
  nameWithType: IExcelConditionalFormattingRule.StopIfTrue
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.StopIfTrue
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Style
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Style
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: Style
  nameWithType: IExcelConditionalFormattingRule.Style
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Style
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.PivotTable
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.PivotTable
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: PivotTable
  nameWithType: IExcelConditionalFormattingRule.PivotTable
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.PivotTable
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.As
  commentId: P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.As
  parent: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  name: As
  nameWithType: IExcelConditionalFormattingRule.As
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.As
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  commentId: T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  parent: OfficeOpenXml.ConditionalFormatting.Contracts
  name: IExcelConditionalFormattingRule
  nameWithType: IExcelConditionalFormattingRule
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.ShowValue*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.ShowValue
  name: ShowValue
  nameWithType: IExcelConditionalFormattingDataBarGroup.ShowValue
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.ShowValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Gradient*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Gradient
  name: Gradient
  nameWithType: IExcelConditionalFormattingDataBarGroup.Gradient
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Gradient
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Border*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Border
  name: Border
  nameWithType: IExcelConditionalFormattingDataBarGroup.Border
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Border
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarColorSameAsPositive*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarColorSameAsPositive
  name: NegativeBarColorSameAsPositive
  nameWithType: IExcelConditionalFormattingDataBarGroup.NegativeBarColorSameAsPositive
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarColorSameAsPositive
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarBorderColorSameAsPositive*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarBorderColorSameAsPositive
  name: NegativeBarBorderColorSameAsPositive
  nameWithType: IExcelConditionalFormattingDataBarGroup.NegativeBarBorderColorSameAsPositive
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBarBorderColorSameAsPositive
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisPosition*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisPosition
  name: AxisPosition
  nameWithType: IExcelConditionalFormattingDataBarGroup.AxisPosition
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisPosition
- uid: OfficeOpenXml.ConditionalFormatting.eExcelDatabarAxisPosition
  commentId: T:OfficeOpenXml.ConditionalFormatting.eExcelDatabarAxisPosition
  parent: OfficeOpenXml.ConditionalFormatting
  name: eExcelDatabarAxisPosition
  nameWithType: eExcelDatabarAxisPosition
  fullName: OfficeOpenXml.ConditionalFormatting.eExcelDatabarAxisPosition
- uid: OfficeOpenXml.ConditionalFormatting
  commentId: N:OfficeOpenXml.ConditionalFormatting
  name: OfficeOpenXml.ConditionalFormatting
  nameWithType: OfficeOpenXml.ConditionalFormatting
  fullName: OfficeOpenXml.ConditionalFormatting
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.LowValue*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.LowValue
  name: LowValue
  nameWithType: IExcelConditionalFormattingDataBarGroup.LowValue
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.LowValue
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue
  commentId: T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue
  parent: OfficeOpenXml.ConditionalFormatting
  name: ExcelConditionalFormattingIconDataBarValue
  nameWithType: ExcelConditionalFormattingIconDataBarValue
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.HighValue*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.HighValue
  name: HighValue
  nameWithType: IExcelConditionalFormattingDataBarGroup.HighValue
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.HighValue
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Color*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Color
  name: Color
  nameWithType: IExcelConditionalFormattingDataBarGroup.Color
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Color
- uid: System.Drawing.Color
  commentId: T:System.Drawing.Color
  parent: System.Drawing
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.FillColor*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.FillColor
  name: FillColor
  nameWithType: IExcelConditionalFormattingDataBarGroup.FillColor
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.FillColor
- uid: OfficeOpenXml.Style.Dxf.ExcelDxfColor
  commentId: T:OfficeOpenXml.Style.Dxf.ExcelDxfColor
  parent: OfficeOpenXml.Style.Dxf
  name: ExcelDxfColor
  nameWithType: ExcelDxfColor
  fullName: OfficeOpenXml.Style.Dxf.ExcelDxfColor
- uid: OfficeOpenXml.Style.Dxf
  commentId: N:OfficeOpenXml.Style.Dxf
  name: OfficeOpenXml.Style.Dxf
  nameWithType: OfficeOpenXml.Style.Dxf
  fullName: OfficeOpenXml.Style.Dxf
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.BorderColor*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.BorderColor
  name: BorderColor
  nameWithType: IExcelConditionalFormattingDataBarGroup.BorderColor
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.BorderColor
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeFillColor*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeFillColor
  name: NegativeFillColor
  nameWithType: IExcelConditionalFormattingDataBarGroup.NegativeFillColor
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeFillColor
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBorderColor*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBorderColor
  name: NegativeBorderColor
  nameWithType: IExcelConditionalFormattingDataBarGroup.NegativeBorderColor
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.NegativeBorderColor
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisColor*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisColor
  name: AxisColor
  nameWithType: IExcelConditionalFormattingDataBarGroup.AxisColor
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.AxisColor
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Direction*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Direction
  name: Direction
  nameWithType: IExcelConditionalFormattingDataBarGroup.Direction
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Direction
- uid: OfficeOpenXml.ConditionalFormatting.eDatabarDirection
  commentId: T:OfficeOpenXml.ConditionalFormatting.eDatabarDirection
  parent: OfficeOpenXml.ConditionalFormatting
  name: eDatabarDirection
  nameWithType: eDatabarDirection
  fullName: OfficeOpenXml.ConditionalFormatting.eDatabarDirection
