### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  commentId: T:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  id: ParallelDeflateOutputStream
  parent: OfficeOpenXml.Packaging.Ionic.Zlib
  children:
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy,System.Boolean)
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,System.Boolean)
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BytesProcessed
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanRead
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanSeek
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanWrite
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Close
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Crc32
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose(System.Boolean)
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Flush
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Length
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.MaxBufferPairs
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Position
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Reset(System.IO.Stream)
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.SetLength(System.Int64)
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Strategy
  - OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: ParallelDeflateOutputStream
  nameWithType: ParallelDeflateOutputStream
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  type: Class
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ParallelDeflateOutputStream
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 99
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nA class for compressing streams using the\nDeflate algorithm with multiple threads.\n"
  remarks: "\n<p>\n  This class performs DEFLATE compression through writing.  For\n  more information on the Deflate algorithm, see IETF RFC 1951,\n  &quot;DEFLATE Compressed Data Format Specification version 1.3.&quot;\n</p>\n\n<p>\n  This class is similar to <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream\" data-throw-if-not-resolved=\"false\"></xref>, except\n  that this class is for compression only, and this implementation uses an\n  approach that employs multiple worker threads to perform the DEFLATE.  On\n  a multi-cpu or multi-core computer, the performance of this class can be\n  significantly higher than the single-threaded DeflateStream, particularly\n  for larger streams.  How large?  Anything over 10mb is a good candidate\n  for parallel compression.\n</p>\n\n<p>\n  The tradeoff is that this class uses more memory and more CPU than the\n  vanilla DeflateStream, and also is less efficient as a compressor. For\n  large files the size of the compressed data stream can be less than 1%\n  larger than the size of a compressed data stream from the vanialla\n  DeflateStream.  For smaller files the difference can be larger.  The\n  difference will also be larger if you set the BufferSize to be lower than\n  the default value.  Your mileage may vary. Finally, for small files, the\n  ParallelDeflateOutputStream can be much slower than the vanilla\n  DeflateStream, because of the overhead associated to using the thread\n  pool.\n</p>\n\n"
  example: []
  syntax:
    content: 'public class ParallelDeflateOutputStream : Stream, IAsyncDisposable, IDisposable'
    content.vb: >-
      Public Class ParallelDeflateOutputStream
          Inherits Stream
          Implements IAsyncDisposable, IDisposable
  seealso:
  - linkId: OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream
    commentId: T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.IO.Stream
  implements:
  - System.IAsyncDisposable
  - System.IDisposable
  inheritedMembers:
  - System.IO.Stream.Null
  - System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Stream.CopyTo(System.IO.Stream)
  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)
  - System.IO.Stream.CreateWaitHandle
  - System.IO.Stream.DisposeAsync
  - System.IO.Stream.EndRead(System.IAsyncResult)
  - System.IO.Stream.EndWrite(System.IAsyncResult)
  - System.IO.Stream.FlushAsync
  - System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.Stream.ObjectInvariant
  - System.IO.Stream.Read(System.Span{System.Byte})
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
  - System.IO.Stream.ReadAtLeast(System.Span{System.Byte},System.Int32,System.Boolean)
  - System.IO.Stream.ReadAtLeastAsync(System.Memory{System.Byte},System.Int32,System.Boolean,System.Threading.CancellationToken)
  - System.IO.Stream.ReadByte
  - System.IO.Stream.ReadExactly(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.ReadExactly(System.Span{System.Byte})
  - System.IO.Stream.ReadExactlyAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.ReadExactlyAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
  - System.IO.Stream.Synchronized(System.IO.Stream)
  - System.IO.Stream.ValidateBufferArguments(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.ValidateCopyToArguments(System.IO.Stream,System.Int32)
  - System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
  - System.IO.Stream.WriteByte(System.Byte)
  - System.IO.Stream.CanTimeout
  - System.IO.Stream.ReadTimeout
  - System.IO.Stream.WriteTimeout
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: ParallelDeflateOutputStream(Stream)
  nameWithType: ParallelDeflateOutputStream.ParallelDeflateOutputStream(Stream)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.ParallelDeflateOutputStream(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 221
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nCreate a ParallelDeflateOutputStream.\n"
  remarks: "\n\n<p>\n  This stream compresses data written into it via the DEFLATE\n  algorithm (see RFC 1951), and writes out the compressed byte stream.\n</p>\n\n<p>\n  The instance will use the default compression level, the default\n  buffer sizes and the default number of threads and buffers per\n  thread.\n</p>\n\n<p>\n  This class is similar to <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream\" data-throw-if-not-resolved=\"false\"></xref>,\n  except that this implementation uses an approach that employs\n  multiple worker threads to perform the DEFLATE.  On a multi-cpu or\n  multi-core computer, the performance of this class can be\n  significantly higher than the single-threaded DeflateStream,\n  particularly for larger streams.  How large?  Anything over 10mb is\n  a good candidate for parallel compression.\n</p>\n\n"
  example:
  - "\n\nThis example shows how to use a ParallelDeflateOutputStream to compress\ndata.  It reads a file, compresses it, and writes the compressed data to\na second, output file.\n\n<pre><code>byte[] buffer = new byte[WORKING_BUFFER_SIZE];\nint n= -1;\nString outputFile = fileToCompress + &quot;.compressed&quot;;\nusing (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))\n{\n    using (var raw = System.IO.File.Create(outputFile))\n    {\n        using (Stream compressor = new ParallelDeflateOutputStream(raw))\n        {\n            while ((n= input.Read(buffer, 0, buffer.Length)) != 0)\n            {\n                compressor.Write(buffer, 0, n);\n            }\n        }\n    }\n}</code></pre>\n<pre><code>Dim buffer As Byte() = New Byte(4096) {}\nDim n As Integer = -1\nDim outputFile As String = (fileToCompress &amp; &quot;.compressed&quot;)\nUsing input As Stream = File.OpenRead(fileToCompress)\n    Using raw As FileStream = File.Create(outputFile)\n        Using compressor As Stream = New ParallelDeflateOutputStream(raw)\n            Do While (n &lt;> 0)\n                If (n > 0) Then\n                    compressor.Write(buffer, 0, n)\n                End If\n                n = input.Read(buffer, 0, buffer.Length)\n            Loop\n        End Using\n    End Using\nEnd Using</code></pre>\n"
  syntax:
    content: public ParallelDeflateOutputStream(Stream stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream to which compressed data will be written.
    content.vb: Public Sub New(stream As Stream)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)
  id: '#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)'
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: ParallelDeflateOutputStream(Stream, CompressionLevel)
  nameWithType: ParallelDeflateOutputStream.ParallelDeflateOutputStream(Stream, CompressionLevel)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.ParallelDeflateOutputStream(System.IO.Stream, OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 235
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nCreate a ParallelDeflateOutputStream using the specified CompressionLevel.\n"
  remarks: "\nSee the <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.%23ctor(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nconstructor for example code.\n"
  example: []
  syntax:
    content: public ParallelDeflateOutputStream(Stream stream, CompressionLevel level)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream to which compressed data will be written.
    - id: level
      type: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel
      description: A tuning knob to trade speed for effectiveness.
    content.vb: Public Sub New(stream As Stream, level As CompressionLevel)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,System.Boolean)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: ParallelDeflateOutputStream(Stream, Boolean)
  nameWithType: ParallelDeflateOutputStream.ParallelDeflateOutputStream(Stream, Boolean)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.ParallelDeflateOutputStream(System.IO.Stream, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 252
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nCreate a ParallelDeflateOutputStream and specify whether to leave the captive stream open\nwhen the ParallelDeflateOutputStream is closed.\n"
  remarks: "\nSee the <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.%23ctor(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nconstructor for example code.\n"
  example: []
  syntax:
    content: public ParallelDeflateOutputStream(Stream stream, bool leaveOpen)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream to which compressed data will be written.
    - id: leaveOpen
      type: System.Boolean
      description: "\ntrue if the application would like the stream to remain open after inflation/deflation.\n"
    content.vb: Public Sub New(stream As Stream, leaveOpen As Boolean)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)
  id: '#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)'
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: ParallelDeflateOutputStream(Stream, CompressionLevel, Boolean)
  nameWithType: ParallelDeflateOutputStream.ParallelDeflateOutputStream(Stream, CompressionLevel, Boolean)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.ParallelDeflateOutputStream(System.IO.Stream, OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 270
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nCreate a ParallelDeflateOutputStream and specify whether to leave the captive stream open\nwhen the ParallelDeflateOutputStream is closed.\n"
  remarks: "\nSee the <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.%23ctor(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nconstructor for example code.\n"
  example: []
  syntax:
    content: public ParallelDeflateOutputStream(Stream stream, CompressionLevel level, bool leaveOpen)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream to which compressed data will be written.
    - id: level
      type: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel
      description: A tuning knob to trade speed for effectiveness.
    - id: leaveOpen
      type: System.Boolean
      description: "\ntrue if the application would like the stream to remain open after inflation/deflation.\n"
    content.vb: Public Sub New(stream As Stream, level As CompressionLevel, leaveOpen As Boolean)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy,System.Boolean)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy,System.Boolean)
  id: '#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy,System.Boolean)'
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: ParallelDeflateOutputStream(Stream, CompressionLevel, CompressionStrategy, Boolean)
  nameWithType: ParallelDeflateOutputStream.ParallelDeflateOutputStream(Stream, CompressionLevel, CompressionStrategy, Boolean)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.ParallelDeflateOutputStream(System.IO.Stream, OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel, OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 294
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nCreate a ParallelDeflateOutputStream using the specified\nCompressionLevel and CompressionStrategy, and specifying whether to\nleave the captive stream open when the ParallelDeflateOutputStream is\nclosed.\n"
  remarks: "\nSee the <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.%23ctor(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nconstructor for example code.\n"
  example: []
  syntax:
    content: public ParallelDeflateOutputStream(Stream stream, CompressionLevel level, CompressionStrategy strategy, bool leaveOpen)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream to which compressed data will be written.
    - id: level
      type: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel
      description: A tuning knob to trade speed for effectiveness.
    - id: strategy
      type: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy
      description: "\nBy tweaking this parameter, you may be able to optimize the compression for\ndata with particular characteristics.\n"
    - id: leaveOpen
      type: System.Boolean
      description: "\ntrue if the application would like the stream to remain open after inflation/deflation.\n"
    content.vb: Public Sub New(stream As Stream, level As CompressionLevel, strategy As CompressionStrategy, leaveOpen As Boolean)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Strategy
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Strategy
  id: Strategy
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: Strategy
  nameWithType: ParallelDeflateOutputStream.Strategy
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Strategy
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Strategy
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 313
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThe ZLIB strategy to be used during compression.\n"
  example: []
  syntax:
    content: public CompressionStrategy Strategy { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy
    content.vb: Public ReadOnly Property Strategy As CompressionStrategy
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Strategy*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.MaxBufferPairs
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.MaxBufferPairs
  id: MaxBufferPairs
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: MaxBufferPairs
  nameWithType: ParallelDeflateOutputStream.MaxBufferPairs
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.MaxBufferPairs
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: MaxBufferPairs
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 390
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThe maximum number of buffer pairs to use.\n"
  remarks: "\n<p>\n  This property sets an upper limit on the number of memory buffer\n  pairs to create.  The implementation of this stream allocates\n  multiple buffers to facilitate parallel compression.  As each buffer\n  fills up, this stream uses <xref href=\"System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)?text=%0a+++++++ThreadPool.QueueUserWorkItem()\" data-throw-if-not-resolved=\"false\"></xref>\n  to compress those buffers in a background threadpool thread. After a\n  buffer is compressed, it is re-ordered and written to the output\n  stream.\n</p>\n\n<p>\n  A higher number of buffer pairs enables a higher degree of\n  parallelism, which tends to increase the speed of compression on\n  multi-cpu computers.  On the other hand, a higher number of buffer\n  pairs also implies a larger memory consumption, more active worker\n  threads, and a higher cpu utilization for any compression. This\n  property enables the application to limit its memory consumption and\n  CPU utilization behavior depending on requirements.\n</p>\n\n<p>\n  For each compression &quot;task&quot; that occurs in parallel, there are 2\n  buffers allocated: one for input and one for output.  This property\n  sets a limit for the number of pairs.  The total amount of storage\n  space allocated for buffering will then be (N*S*2), where N is the\n  number of buffer pairs, S is the size of each buffer (<xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize\" data-throw-if-not-resolved=\"false\"></xref>).  By default, DotNetZip allocates 4 buffer\n  pairs per CPU core, so if your machine has 4 cores, and you retain\n  the default buffer size of 128k, then the\n  ParallelDeflateOutputStream will use 4 * 4 * 2 * 128kb of buffer\n  memory in total, or 4mb, in blocks of 128kb.  If you then set this\n  property to 8, then the number will be 8 * 2 * 128kb of buffer\n  memory, or 2mb.\n</p>\n\n<p>\n  CPU utilization will also go up with additional buffers, because a\n  larger number of buffer pairs allows a larger number of background\n  threads to compress in parallel. If you find that parallel\n  compression is consuming too much memory or CPU, you can adjust this\n  value downward.\n</p>\n\n<p>\n  The default value is 16. Different values may deliver better or\n  worse results, depending on your priorities and the dynamic\n  performance characteristics of your storage and compute resources.\n</p>\n\n<p>\n  This property is not the number of buffer pairs to use; it is an\n  upper limit. An illustration: Suppose you have an application that\n  uses the default value of this property (which is 16), and it runs\n  on a machine with 2 CPU cores. In that case, DotNetZip will allocate\n  4 buffer pairs per CPU core, for a total of 8 pairs.  The upper\n  limit specified by this property has no effect.\n</p>\n\n<p>\n  The application can set this value at any time, but it is effective\n  only before the first call to Write(), which is when the buffers are\n  allocated.\n</p>\n"
  example: []
  syntax:
    content: public int MaxBufferPairs { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property MaxBufferPairs As Integer
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.MaxBufferPairs*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize
  id: BufferSize
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: BufferSize
  nameWithType: ParallelDeflateOutputStream.BufferSize
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: BufferSize
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 445
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThe size of the buffers used by the compressor threads.\n"
  remarks: "\n\n<p>\n  The default buffer size is 128k. The application can set this value\n  at any time, but it is effective only before the first Write().\n</p>\n\n<p>\n  Larger buffer sizes implies larger memory consumption but allows\n  more efficient compression. Using smaller buffer sizes consumes less\n  memory but may result in less effective compression.  For example,\n  using the default buffer size of 128k, the compression delivered is\n  within 1% of the compression delivered by the single-threaded <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream\" data-throw-if-not-resolved=\"false\"></xref>.  On the other hand, using a\n  BufferSize of 8k can result in a compressed data stream that is 5%\n  larger than that delivered by the single-threaded\n<code>DeflateStream</code>.  Excessively small buffer sizes can also cause\nthe speed of the ParallelDeflateOutputStream to drop, because of\nlarger thread scheduling overhead dealing with many many small\nbuffers.\n</p>\n\n<p>\n  The total amount of storage space allocated for buffering will be\n  (N*S*2), where N is the number of buffer pairs, and S is the size of\n  each buffer (this property). There are 2 buffers used by the\n  compressor, one for input and one for output.  By default, DotNetZip\n  allocates 4 buffer pairs per CPU core, so if your machine has 4\n  cores, then the number of buffer pairs used will be 16. If you\n  accept the default value of this property, 128k, then the\n  ParallelDeflateOutputStream will use 16 * 2 * 128kb of buffer memory\n  in total, or 4mb, in blocks of 128kb.  If you set this property to\n  64kb, then the number will be 16 * 2 * 64kb of buffer memory, or\n  2mb.\n</p>\n\n"
  example: []
  syntax:
    content: public int BufferSize { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property BufferSize As Integer
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Crc32
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Crc32
  id: Crc32
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: Crc32
  nameWithType: ParallelDeflateOutputStream.Crc32
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Crc32
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Crc32
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 463
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThe CRC32 for the data that was written out, prior to compression.\n"
  remarks: "\nThis value is meaningful only after a call to Close().\n"
  example: []
  syntax:
    content: public int Crc32 { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Crc32 As Integer
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Crc32*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BytesProcessed
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BytesProcessed
  id: BytesProcessed
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: BytesProcessed
  nameWithType: ParallelDeflateOutputStream.BytesProcessed
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BytesProcessed
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: BytesProcessed
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 472
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThe total number of uncompressed bytes processed by the ParallelDeflateOutputStream.\n"
  remarks: "\nThis value is meaningful only after a call to Close().\n"
  example: []
  syntax:
    content: public long BytesProcessed { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property BytesProcessed As Long
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BytesProcessed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  nameWithType: ParallelDeflateOutputStream.Write(Byte[], Int32, Int32)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Write
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 522
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nWrite data to the stream.\n"
  remarks: "\n\n<p>\n  To use the ParallelDeflateOutputStream to compress data, create a\n  ParallelDeflateOutputStream with CompressionMode.Compress, passing a\n  writable output stream.  Then call Write() on that\n  ParallelDeflateOutputStream, providing uncompressed data as input.  The\n  data sent to the output stream will be the compressed form of the data\n  written.\n</p>\n\n<p>\n  To decompress data, use the <xref href=\"OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream\" data-throw-if-not-resolved=\"false\"></xref> class.\n</p>\n\n"
  example: []
  syntax:
    content: public override void Write(byte[] buffer, int offset, int count)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer holding data to write to the stream.
    - id: offset
      type: System.Int32
      description: the offset within that data array to find the first byte to write.
    - id: count
      type: System.Int32
      description: the number of bytes to write.
    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)
  overridden: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Write*
  nameWithType.vb: ParallelDeflateOutputStream.Write(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Flush
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Flush
  id: Flush
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: Flush()
  nameWithType: ParallelDeflateOutputStream.Flush()
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Flush()
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Flush
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 716
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nFlush the stream.\n"
  example: []
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  overridden: System.IO.Stream.Flush
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Flush*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Close
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Close
  id: Close
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: ParallelDeflateOutputStream.Close()
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Close()
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Close
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 739
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nClose the stream.\n"
  remarks: "\nYou must call Close on the stream to guarantee that all of the data written in has\nbeen compressed, and the compressed data has been written out.\n"
  example: []
  syntax:
    content: public override void Close()
    content.vb: Public Overrides Sub Close
  overridden: System.IO.Stream.Close
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Close*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose
  id: Dispose
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ParallelDeflateOutputStream.Dispose()
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose()
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Dispose
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 781
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: Dispose the object
  remarks: "\n<p>\n  Because ParallelDeflateOutputStream is IDisposable, the\n  application must call this method when finished using the instance.\n</p>\n<p>\n  This method is generally called implicitly upon exit from\n  a <code>using</code> scope in C# (<code>Using</code> in VB).\n</p>\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose(System.Boolean)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: ParallelDeflateOutputStream.Dispose(Boolean)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Dispose
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 795
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: The Dispose method
  example: []
  syntax:
    content: protected override void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\nindicates whether the Dispose method was invoked by user code.\n"
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
  overridden: System.IO.Stream.Dispose(System.Boolean)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Reset(System.IO.Stream)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Reset(System.IO.Stream)
  id: Reset(System.IO.Stream)
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: Reset(Stream)
  nameWithType: ParallelDeflateOutputStream.Reset(Stream)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Reset(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Reset
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 841
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nResets the stream for use with another stream.\n"
  remarks: "\nBecause the ParallelDeflateOutputStream is expensive to create, it\nhas been designed so that it can be recycled and re-used.  You have\nto call Close() on the stream first, then you can call Reset() on\nit, to use it again on another stream.\n"
  example:
  - "\n<pre><code>ParallelDeflateOutputStream deflater = null;\nforeach (var inputFile in listOfFiles)\n{\n    string outputFile = inputFile + &quot;.compressed&quot;;\n    using (System.IO.Stream input = System.IO.File.OpenRead(inputFile))\n    {\n        using (var outStream = System.IO.File.Create(outputFile))\n        {\n            if (deflater == null)\n                deflater = new ParallelDeflateOutputStream(outStream,\n                                                           CompressionLevel.Best,\n                                                           CompressionStrategy.Default,\n                                                           true);\n            deflater.Reset(outStream);\n\n            while ((n= input.Read(buffer, 0, buffer.Length)) != 0)\n            {\n                deflater.Write(buffer, 0, n);\n            }\n        }\n    }\n}</code></pre>\n"
  syntax:
    content: public void Reset(Stream stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\nThe new output stream for this era.\n"
    content.vb: Public Sub Reset(stream As Stream)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Reset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanSeek
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanSeek
  id: CanSeek
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: CanSeek
  nameWithType: ParallelDeflateOutputStream.CanSeek
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanSeek
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CanSeek
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 1280
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nIndicates whether the stream supports Seek operations.\n"
  remarks: "\nAlways returns false.\n"
  example: []
  syntax:
    content: public override bool CanSeek { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
  overridden: System.IO.Stream.CanSeek
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanSeek*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanRead
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanRead
  id: CanRead
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: CanRead
  nameWithType: ParallelDeflateOutputStream.CanRead
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanRead
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CanRead
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 1292
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nIndicates whether the stream supports Read operations.\n"
  remarks: "\nAlways returns false.\n"
  example: []
  syntax:
    content: public override bool CanRead { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
  overridden: System.IO.Stream.CanRead
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanRead*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanWrite
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanWrite
  id: CanWrite
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: CanWrite
  nameWithType: ParallelDeflateOutputStream.CanWrite
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanWrite
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CanWrite
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 1303
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nIndicates whether the stream supports Write operations.\n"
  remarks: "\nReturns true if the provided stream is writable.\n"
  example: []
  syntax:
    content: public override bool CanWrite { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
  overridden: System.IO.Stream.CanWrite
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanWrite*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Length
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Length
  id: Length
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: ParallelDeflateOutputStream.Length
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Length
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Length
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 1311
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nReading this property always throws a NotSupportedException.\n"
  example: []
  syntax:
    content: public override long Length { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Overrides ReadOnly Property Length As Long
  overridden: System.IO.Stream.Length
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Length*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Position
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Position
  id: Position
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: ParallelDeflateOutputStream.Position
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Position
  type: Property
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Position
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 1326
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nReturns the current position of the output stream.\n"
  remarks: "\n<p>\n  Because the output gets written by a background thread,\n  the value may change asynchronously.  Setting this\n  property always throws a NotSupportedException.\n</p>\n"
  example: []
  syntax:
    content: public override long Position { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Overrides Property Position As Long
  overridden: System.IO.Stream.Position
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Position*
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  nameWithType: ParallelDeflateOutputStream.Read(Byte[], Int32, Int32)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Read
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 1349
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThis method always throws a NotSupportedException.\n"
  example: []
  syntax:
    content: public override int Read(byte[] buffer, int offset, int count)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\nThe buffer into which data would be read, IF THIS METHOD\nACTUALLY DID ANYTHING.\n"
    - id: offset
      type: System.Int32
      description: "\nThe offset within that data array at which to insert the\ndata that is read, IF THIS METHOD ACTUALLY DID\nANYTHING.\n"
    - id: count
      type: System.Int32
      description: "\nThe number of bytes to write, IF THIS METHOD ACTUALLY DID\nANYTHING.\n"
    return:
      type: System.Int32
      description: nothing.
    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer
  overridden: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Read*
  nameWithType.vb: ParallelDeflateOutputStream.Read(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, SeekOrigin)
  nameWithType: ParallelDeflateOutputStream.Seek(Int64, SeekOrigin)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Seek
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 1366
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThis method always throws a NotSupportedException.\n"
  example: []
  syntax:
    content: public override long Seek(long offset, SeekOrigin origin)
    parameters:
    - id: offset
      type: System.Int64
      description: "\nThe offset to seek to....\nIF THIS METHOD ACTUALLY DID ANYTHING.\n"
    - id: origin
      type: System.IO.SeekOrigin
      description: "\nThe reference specifying how to apply the offset....  IF\nTHIS METHOD ACTUALLY DID ANYTHING.\n"
    return:
      type: System.Int64
      description: nothing. It always throws.
    content.vb: Public Overrides Function Seek(offset As Long, origin As SeekOrigin) As Long
  overridden: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Seek*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.SetLength(System.Int64)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  nameWithType: ParallelDeflateOutputStream.SetLength(Int64)
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SetLength
    path: ../src/EPPlus/Packaging/DotNetZip/Zlib/ParallelDeflateOutputStream.cs
    startLine: 1378
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Packaging.Ionic.Zlib
  summary: "\nThis method always throws a NotSupportedException.\n"
  example: []
  syntax:
    content: public override void SetLength(long value)
    parameters:
    - id: value
      type: System.Int64
      description: "\nThe new value for the stream length....  IF\nTHIS METHOD ACTUALLY DID ANYTHING.\n"
    content.vb: Public Overrides Sub SetLength(value As Long)
  overridden: System.IO.Stream.SetLength(System.Int64)
  overload: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.SetLength*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream
  commentId: T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream
  name: DeflateStream
  nameWithType: DeflateStream
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream
- uid: OfficeOpenXml.Packaging.Ionic.Zlib
  commentId: N:OfficeOpenXml.Packaging.Ionic.Zlib
  name: OfficeOpenXml.Packaging.Ionic.Zlib
  nameWithType: OfficeOpenXml.Packaging.Ionic.Zlib
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.MarshalByRefObject
  commentId: T:System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IAsyncDisposable
  commentId: T:System.IAsyncDisposable
  parent: System
  isExternal: true
  name: IAsyncDisposable
  nameWithType: IAsyncDisposable
  fullName: System.IAsyncDisposable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.IO.Stream.Null
  commentId: F:System.IO.Stream.Null
  parent: System.IO.Stream
  isExternal: true
  name: "Null"
  nameWithType: Stream.Null
  fullName: System.IO.Stream.Null
- uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  commentId: M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Stream
  isExternal: true
  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)
  nameWithType: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)
  fullName: System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)
  nameWithType.vb: Stream.BeginRead(Byte(), Int32, Int32, AsyncCallback, Object)
  fullName.vb: System.IO.Stream.BeginRead(System.Byte(), System.Int32, System.Int32, System.AsyncCallback, System.Object)
  name.vb: BeginRead(Byte(), Int32, Int32, AsyncCallback, Object)
  spec.csharp:
  - uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginRead
    nameWithType: Stream.BeginRead
    fullName: System.IO.Stream.BeginRead
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginRead
    nameWithType: Stream.BeginRead
    fullName: System.IO.Stream.BeginRead
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  commentId: M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Stream
  isExternal: true
  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)
  nameWithType: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)
  fullName: System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)
  nameWithType.vb: Stream.BeginWrite(Byte(), Int32, Int32, AsyncCallback, Object)
  fullName.vb: System.IO.Stream.BeginWrite(System.Byte(), System.Int32, System.Int32, System.AsyncCallback, System.Object)
  name.vb: BeginWrite(Byte(), Int32, Int32, AsyncCallback, Object)
  spec.csharp:
  - uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginWrite
    nameWithType: Stream.BeginWrite
    fullName: System.IO.Stream.BeginWrite
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginWrite
    nameWithType: Stream.BeginWrite
    fullName: System.IO.Stream.BeginWrite
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyTo(System.IO.Stream)
  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: true
  name: CopyTo(Stream)
  nameWithType: Stream.CopyTo(Stream)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: CopyTo(Stream, Int32)
  nameWithType: Stream.CopyTo(Stream, Int32)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream)
  nameWithType: Stream.CopyToAsync(Stream)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, Int32)
  nameWithType: Stream.CopyToAsync(Stream, Int32)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, Int32, CancellationToken)
  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, CancellationToken)
  nameWithType: Stream.CopyToAsync(Stream, CancellationToken)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CreateWaitHandle
  commentId: M:System.IO.Stream.CreateWaitHandle
  parent: System.IO.Stream
  isExternal: true
  name: CreateWaitHandle()
  nameWithType: Stream.CreateWaitHandle()
  fullName: System.IO.Stream.CreateWaitHandle()
  spec.csharp:
  - uid: System.IO.Stream.CreateWaitHandle
    name: CreateWaitHandle
    nameWithType: Stream.CreateWaitHandle
    fullName: System.IO.Stream.CreateWaitHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CreateWaitHandle
    name: CreateWaitHandle
    nameWithType: Stream.CreateWaitHandle
    fullName: System.IO.Stream.CreateWaitHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.DisposeAsync
  commentId: M:System.IO.Stream.DisposeAsync
  parent: System.IO.Stream
  isExternal: true
  name: DisposeAsync()
  nameWithType: Stream.DisposeAsync()
  fullName: System.IO.Stream.DisposeAsync()
  spec.csharp:
  - uid: System.IO.Stream.DisposeAsync
    name: DisposeAsync
    nameWithType: Stream.DisposeAsync
    fullName: System.IO.Stream.DisposeAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.DisposeAsync
    name: DisposeAsync
    nameWithType: Stream.DisposeAsync
    fullName: System.IO.Stream.DisposeAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.EndRead(System.IAsyncResult)
  commentId: M:System.IO.Stream.EndRead(System.IAsyncResult)
  parent: System.IO.Stream
  isExternal: true
  name: EndRead(IAsyncResult)
  nameWithType: Stream.EndRead(IAsyncResult)
  fullName: System.IO.Stream.EndRead(System.IAsyncResult)
  spec.csharp:
  - uid: System.IO.Stream.EndRead(System.IAsyncResult)
    name: EndRead
    nameWithType: Stream.EndRead
    fullName: System.IO.Stream.EndRead
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.EndRead(System.IAsyncResult)
    name: EndRead
    nameWithType: Stream.EndRead
    fullName: System.IO.Stream.EndRead
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.EndWrite(System.IAsyncResult)
  commentId: M:System.IO.Stream.EndWrite(System.IAsyncResult)
  parent: System.IO.Stream
  isExternal: true
  name: EndWrite(IAsyncResult)
  nameWithType: Stream.EndWrite(IAsyncResult)
  fullName: System.IO.Stream.EndWrite(System.IAsyncResult)
  spec.csharp:
  - uid: System.IO.Stream.EndWrite(System.IAsyncResult)
    name: EndWrite
    nameWithType: Stream.EndWrite
    fullName: System.IO.Stream.EndWrite
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.EndWrite(System.IAsyncResult)
    name: EndWrite
    nameWithType: Stream.EndWrite
    fullName: System.IO.Stream.EndWrite
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.FlushAsync
  commentId: M:System.IO.Stream.FlushAsync
  parent: System.IO.Stream
  isExternal: true
  name: FlushAsync()
  nameWithType: Stream.FlushAsync()
  fullName: System.IO.Stream.FlushAsync()
  spec.csharp:
  - uid: System.IO.Stream.FlushAsync
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.FlushAsync
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: FlushAsync(CancellationToken)
  nameWithType: Stream.FlushAsync(CancellationToken)
  fullName: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ObjectInvariant
  commentId: M:System.IO.Stream.ObjectInvariant
  parent: System.IO.Stream
  isExternal: true
  name: ObjectInvariant()
  nameWithType: Stream.ObjectInvariant()
  fullName: System.IO.Stream.ObjectInvariant()
  spec.csharp:
  - uid: System.IO.Stream.ObjectInvariant
    name: ObjectInvariant
    nameWithType: Stream.ObjectInvariant
    fullName: System.IO.Stream.ObjectInvariant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ObjectInvariant
    name: ObjectInvariant
    nameWithType: Stream.ObjectInvariant
    fullName: System.IO.Stream.ObjectInvariant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.Read(System.Span{System.Byte})
  commentId: M:System.IO.Stream.Read(System.Span{System.Byte})
  parent: System.IO.Stream
  isExternal: true
  name: Read(Span<Byte>)
  nameWithType: Stream.Read(Span<Byte>)
  fullName: System.IO.Stream.Read(System.Span<System.Byte>)
  nameWithType.vb: Stream.Read(Span(Of Byte))
  fullName.vb: System.IO.Stream.Read(System.Span(Of System.Byte))
  name.vb: Read(Span(Of Byte))
  spec.csharp:
  - uid: System.IO.Stream.Read(System.Span{System.Byte})
    name: Read
    nameWithType: Stream.Read
    fullName: System.IO.Stream.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Read(System.Span{System.Byte})
    name: Read
    nameWithType: Stream.Read
    fullName: System.IO.Stream.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Byte[], Int32, Int32)
  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadAsync(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32, CancellationToken)
  fullName.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Memory<Byte>, CancellationToken)
  nameWithType: Stream.ReadAsync(Memory<Byte>, CancellationToken)
  fullName: System.IO.Stream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken)
  nameWithType.vb: Stream.ReadAsync(Memory(Of Byte), CancellationToken)
  fullName.vb: System.IO.Stream.ReadAsync(System.Memory(Of System.Byte), System.Threading.CancellationToken)
  name.vb: ReadAsync(Memory(Of Byte), CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Memory`1
    name: Memory
    nameWithType: Memory
    fullName: System.Memory
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Memory`1
    name: Memory
    nameWithType: Memory
    fullName: System.Memory
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadAtLeast(System.Span{System.Byte},System.Int32,System.Boolean)
  commentId: M:System.IO.Stream.ReadAtLeast(System.Span{System.Byte},System.Int32,System.Boolean)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAtLeast(Span<Byte>, Int32, Boolean)
  nameWithType: Stream.ReadAtLeast(Span<Byte>, Int32, Boolean)
  fullName: System.IO.Stream.ReadAtLeast(System.Span<System.Byte>, System.Int32, System.Boolean)
  nameWithType.vb: Stream.ReadAtLeast(Span(Of Byte), Int32, Boolean)
  fullName.vb: System.IO.Stream.ReadAtLeast(System.Span(Of System.Byte), System.Int32, System.Boolean)
  name.vb: ReadAtLeast(Span(Of Byte), Int32, Boolean)
  spec.csharp:
  - uid: System.IO.Stream.ReadAtLeast(System.Span{System.Byte},System.Int32,System.Boolean)
    name: ReadAtLeast
    nameWithType: Stream.ReadAtLeast
    fullName: System.IO.Stream.ReadAtLeast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAtLeast(System.Span{System.Byte},System.Int32,System.Boolean)
    name: ReadAtLeast
    nameWithType: Stream.ReadAtLeast
    fullName: System.IO.Stream.ReadAtLeast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadAtLeastAsync(System.Memory{System.Byte},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.ReadAtLeastAsync(System.Memory{System.Byte},System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAtLeastAsync(Memory<Byte>, Int32, Boolean, CancellationToken)
  nameWithType: Stream.ReadAtLeastAsync(Memory<Byte>, Int32, Boolean, CancellationToken)
  fullName: System.IO.Stream.ReadAtLeastAsync(System.Memory<System.Byte>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Stream.ReadAtLeastAsync(Memory(Of Byte), Int32, Boolean, CancellationToken)
  fullName.vb: System.IO.Stream.ReadAtLeastAsync(System.Memory(Of System.Byte), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: ReadAtLeastAsync(Memory(Of Byte), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadAtLeastAsync(System.Memory{System.Byte},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: ReadAtLeastAsync
    nameWithType: Stream.ReadAtLeastAsync
    fullName: System.IO.Stream.ReadAtLeastAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Memory`1
    name: Memory
    nameWithType: Memory
    fullName: System.Memory
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAtLeastAsync(System.Memory{System.Byte},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: ReadAtLeastAsync
    nameWithType: Stream.ReadAtLeastAsync
    fullName: System.IO.Stream.ReadAtLeastAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Memory`1
    name: Memory
    nameWithType: Memory
    fullName: System.Memory
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadByte
  commentId: M:System.IO.Stream.ReadByte
  parent: System.IO.Stream
  isExternal: true
  name: ReadByte()
  nameWithType: Stream.ReadByte()
  fullName: System.IO.Stream.ReadByte()
  spec.csharp:
  - uid: System.IO.Stream.ReadByte
    name: ReadByte
    nameWithType: Stream.ReadByte
    fullName: System.IO.Stream.ReadByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadByte
    name: ReadByte
    nameWithType: Stream.ReadByte
    fullName: System.IO.Stream.ReadByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadExactly(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.ReadExactly(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: ReadExactly(Byte[], Int32, Int32)
  nameWithType: Stream.ReadExactly(Byte[], Int32, Int32)
  fullName: System.IO.Stream.ReadExactly(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.ReadExactly(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.ReadExactly(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadExactly(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.ReadExactly(System.Byte[],System.Int32,System.Int32)
    name: ReadExactly
    nameWithType: Stream.ReadExactly
    fullName: System.IO.Stream.ReadExactly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadExactly(System.Byte[],System.Int32,System.Int32)
    name: ReadExactly
    nameWithType: Stream.ReadExactly
    fullName: System.IO.Stream.ReadExactly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadExactly(System.Span{System.Byte})
  commentId: M:System.IO.Stream.ReadExactly(System.Span{System.Byte})
  parent: System.IO.Stream
  isExternal: true
  name: ReadExactly(Span<Byte>)
  nameWithType: Stream.ReadExactly(Span<Byte>)
  fullName: System.IO.Stream.ReadExactly(System.Span<System.Byte>)
  nameWithType.vb: Stream.ReadExactly(Span(Of Byte))
  fullName.vb: System.IO.Stream.ReadExactly(System.Span(Of System.Byte))
  name.vb: ReadExactly(Span(Of Byte))
  spec.csharp:
  - uid: System.IO.Stream.ReadExactly(System.Span{System.Byte})
    name: ReadExactly
    nameWithType: Stream.ReadExactly
    fullName: System.IO.Stream.ReadExactly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadExactly(System.Span{System.Byte})
    name: ReadExactly
    nameWithType: Stream.ReadExactly
    fullName: System.IO.Stream.ReadExactly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadExactlyAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.ReadExactlyAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadExactlyAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: Stream.ReadExactlyAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.Stream.ReadExactlyAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType.vb: Stream.ReadExactlyAsync(Byte(), Int32, Int32, CancellationToken)
  fullName.vb: System.IO.Stream.ReadExactlyAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadExactlyAsync(Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadExactlyAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadExactlyAsync
    nameWithType: Stream.ReadExactlyAsync
    fullName: System.IO.Stream.ReadExactlyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadExactlyAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadExactlyAsync
    nameWithType: Stream.ReadExactlyAsync
    fullName: System.IO.Stream.ReadExactlyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadExactlyAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.ReadExactlyAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadExactlyAsync(Memory<Byte>, CancellationToken)
  nameWithType: Stream.ReadExactlyAsync(Memory<Byte>, CancellationToken)
  fullName: System.IO.Stream.ReadExactlyAsync(System.Memory<System.Byte>, System.Threading.CancellationToken)
  nameWithType.vb: Stream.ReadExactlyAsync(Memory(Of Byte), CancellationToken)
  fullName.vb: System.IO.Stream.ReadExactlyAsync(System.Memory(Of System.Byte), System.Threading.CancellationToken)
  name.vb: ReadExactlyAsync(Memory(Of Byte), CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadExactlyAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
    name: ReadExactlyAsync
    nameWithType: Stream.ReadExactlyAsync
    fullName: System.IO.Stream.ReadExactlyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Memory`1
    name: Memory
    nameWithType: Memory
    fullName: System.Memory
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadExactlyAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
    name: ReadExactlyAsync
    nameWithType: Stream.ReadExactlyAsync
    fullName: System.IO.Stream.ReadExactlyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Memory`1
    name: Memory
    nameWithType: Memory
    fullName: System.Memory
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.Synchronized(System.IO.Stream)
  commentId: M:System.IO.Stream.Synchronized(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: true
  name: Synchronized(Stream)
  nameWithType: Stream.Synchronized(Stream)
  fullName: System.IO.Stream.Synchronized(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.Synchronized(System.IO.Stream)
    name: Synchronized
    nameWithType: Stream.Synchronized
    fullName: System.IO.Stream.Synchronized
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Synchronized(System.IO.Stream)
    name: Synchronized
    nameWithType: Stream.Synchronized
    fullName: System.IO.Stream.Synchronized
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ValidateBufferArguments(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.ValidateBufferArguments(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: ValidateBufferArguments(Byte[], Int32, Int32)
  nameWithType: Stream.ValidateBufferArguments(Byte[], Int32, Int32)
  fullName: System.IO.Stream.ValidateBufferArguments(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.ValidateBufferArguments(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.ValidateBufferArguments(System.Byte(), System.Int32, System.Int32)
  name.vb: ValidateBufferArguments(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.ValidateBufferArguments(System.Byte[],System.Int32,System.Int32)
    name: ValidateBufferArguments
    nameWithType: Stream.ValidateBufferArguments
    fullName: System.IO.Stream.ValidateBufferArguments
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ValidateBufferArguments(System.Byte[],System.Int32,System.Int32)
    name: ValidateBufferArguments
    nameWithType: Stream.ValidateBufferArguments
    fullName: System.IO.Stream.ValidateBufferArguments
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ValidateCopyToArguments(System.IO.Stream,System.Int32)
  commentId: M:System.IO.Stream.ValidateCopyToArguments(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: ValidateCopyToArguments(Stream, Int32)
  nameWithType: Stream.ValidateCopyToArguments(Stream, Int32)
  fullName: System.IO.Stream.ValidateCopyToArguments(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.ValidateCopyToArguments(System.IO.Stream,System.Int32)
    name: ValidateCopyToArguments
    nameWithType: Stream.ValidateCopyToArguments
    fullName: System.IO.Stream.ValidateCopyToArguments
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ValidateCopyToArguments(System.IO.Stream,System.Int32)
    name: ValidateCopyToArguments
    nameWithType: Stream.ValidateCopyToArguments
    fullName: System.IO.Stream.ValidateCopyToArguments
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})
  commentId: M:System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})
  parent: System.IO.Stream
  isExternal: true
  name: Write(ReadOnlySpan<Byte>)
  nameWithType: Stream.Write(ReadOnlySpan<Byte>)
  fullName: System.IO.Stream.Write(System.ReadOnlySpan<System.Byte>)
  nameWithType.vb: Stream.Write(ReadOnlySpan(Of Byte))
  fullName.vb: System.IO.Stream.Write(System.ReadOnlySpan(Of System.Byte))
  name.vb: Write(ReadOnlySpan(Of Byte))
  spec.csharp:
  - uid: System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})
    name: Write
    nameWithType: Stream.Write
    fullName: System.IO.Stream.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})
    name: Write
    nameWithType: Stream.Write
    fullName: System.IO.Stream.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(Byte[], Int32, Int32)
  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: WriteAsync(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32, CancellationToken)
  fullName.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(ReadOnlyMemory<Byte>, CancellationToken)
  nameWithType: Stream.WriteAsync(ReadOnlyMemory<Byte>, CancellationToken)
  fullName: System.IO.Stream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken)
  nameWithType.vb: Stream.WriteAsync(ReadOnlyMemory(Of Byte), CancellationToken)
  fullName.vb: System.IO.Stream.WriteAsync(System.ReadOnlyMemory(Of System.Byte), System.Threading.CancellationToken)
  name.vb: WriteAsync(ReadOnlyMemory(Of Byte), CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    nameWithType: ReadOnlyMemory
    fullName: System.ReadOnlyMemory
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    nameWithType: ReadOnlyMemory
    fullName: System.ReadOnlyMemory
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.WriteByte(System.Byte)
  commentId: M:System.IO.Stream.WriteByte(System.Byte)
  parent: System.IO.Stream
  isExternal: true
  name: WriteByte(Byte)
  nameWithType: Stream.WriteByte(Byte)
  fullName: System.IO.Stream.WriteByte(System.Byte)
  spec.csharp:
  - uid: System.IO.Stream.WriteByte(System.Byte)
    name: WriteByte
    nameWithType: Stream.WriteByte
    fullName: System.IO.Stream.WriteByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteByte(System.Byte)
    name: WriteByte
    nameWithType: Stream.WriteByte
    fullName: System.IO.Stream.WriteByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CanTimeout
  commentId: P:System.IO.Stream.CanTimeout
  parent: System.IO.Stream
  isExternal: true
  name: CanTimeout
  nameWithType: Stream.CanTimeout
  fullName: System.IO.Stream.CanTimeout
- uid: System.IO.Stream.ReadTimeout
  commentId: P:System.IO.Stream.ReadTimeout
  parent: System.IO.Stream
  isExternal: true
  name: ReadTimeout
  nameWithType: Stream.ReadTimeout
  fullName: System.IO.Stream.ReadTimeout
- uid: System.IO.Stream.WriteTimeout
  commentId: P:System.IO.Stream.WriteTimeout
  parent: System.IO.Stream
  isExternal: true
  name: WriteTimeout
  nameWithType: Stream.WriteTimeout
  fullName: System.IO.Stream.WriteTimeout
- uid: System.MarshalByRefObject.GetLifetimeService
  commentId: M:System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.InitializeLifetimeService
  commentId: M:System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: System.MarshalByRefObject.InitializeLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: MarshalByRefObject.InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: MarshalByRefObject.InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor
  name: ParallelDeflateOutputStream
  nameWithType: ParallelDeflateOutputStream.ParallelDeflateOutputStream
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.ParallelDeflateOutputStream
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)
  commentId: M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)
  isExternal: true
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel
  commentId: T:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel
  parent: OfficeOpenXml.Packaging.Ionic.Zlib
  name: CompressionLevel
  nameWithType: CompressionLevel
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy
  commentId: T:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy
  parent: OfficeOpenXml.Packaging.Ionic.Zlib
  name: CompressionStrategy
  nameWithType: CompressionStrategy
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Strategy*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Strategy
  name: Strategy
  nameWithType: ParallelDeflateOutputStream.Strategy
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Strategy
- uid: System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)
  commentId: M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)
  isExternal: true
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize
  commentId: P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize
  isExternal: true
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.MaxBufferPairs*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.MaxBufferPairs
  name: MaxBufferPairs
  nameWithType: ParallelDeflateOutputStream.MaxBufferPairs
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.MaxBufferPairs
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize
  name: BufferSize
  nameWithType: ParallelDeflateOutputStream.BufferSize
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Crc32*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Crc32
  name: Crc32
  nameWithType: ParallelDeflateOutputStream.Crc32
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Crc32
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BytesProcessed*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BytesProcessed
  name: BytesProcessed
  nameWithType: ParallelDeflateOutputStream.BytesProcessed
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BytesProcessed
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: Write(Byte[], Int32, Int32)
  nameWithType: Stream.Write(Byte[], Int32, Int32)
  fullName: System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.Write(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    nameWithType: Stream.Write
    fullName: System.IO.Stream.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    nameWithType: Stream.Write
    fullName: System.IO.Stream.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Write*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Write
  name: Write
  nameWithType: ParallelDeflateOutputStream.Write
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Write
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IO.Stream.Flush
  commentId: M:System.IO.Stream.Flush
  parent: System.IO.Stream
  isExternal: true
  name: Flush()
  nameWithType: Stream.Flush()
  fullName: System.IO.Stream.Flush()
  spec.csharp:
  - uid: System.IO.Stream.Flush
    name: Flush
    nameWithType: Stream.Flush
    fullName: System.IO.Stream.Flush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Flush
    name: Flush
    nameWithType: Stream.Flush
    fullName: System.IO.Stream.Flush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Flush*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Flush
  name: Flush
  nameWithType: ParallelDeflateOutputStream.Flush
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Flush
- uid: System.IO.Stream.Close
  commentId: M:System.IO.Stream.Close
  parent: System.IO.Stream
  isExternal: true
  name: Close()
  nameWithType: Stream.Close()
  fullName: System.IO.Stream.Close()
  spec.csharp:
  - uid: System.IO.Stream.Close
    name: Close
    nameWithType: Stream.Close
    fullName: System.IO.Stream.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Close
    name: Close
    nameWithType: Stream.Close
    fullName: System.IO.Stream.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Close*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Close
  name: Close
  nameWithType: ParallelDeflateOutputStream.Close
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Close
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose
  name: Dispose
  nameWithType: ParallelDeflateOutputStream.Dispose
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose
- uid: System.IO.Stream.Dispose(System.Boolean)
  commentId: M:System.IO.Stream.Dispose(System.Boolean)
  parent: System.IO.Stream
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: Stream.Dispose(Boolean)
  fullName: System.IO.Stream.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.IO.Stream.Dispose(System.Boolean)
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Dispose(System.Boolean)
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Reset*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Reset
  name: Reset
  nameWithType: ParallelDeflateOutputStream.Reset
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Reset
- uid: System.IO.Stream.CanSeek
  commentId: P:System.IO.Stream.CanSeek
  parent: System.IO.Stream
  isExternal: true
  name: CanSeek
  nameWithType: Stream.CanSeek
  fullName: System.IO.Stream.CanSeek
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanSeek*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanSeek
  name: CanSeek
  nameWithType: ParallelDeflateOutputStream.CanSeek
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanSeek
- uid: System.IO.Stream.CanRead
  commentId: P:System.IO.Stream.CanRead
  parent: System.IO.Stream
  isExternal: true
  name: CanRead
  nameWithType: Stream.CanRead
  fullName: System.IO.Stream.CanRead
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanRead*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanRead
  name: CanRead
  nameWithType: ParallelDeflateOutputStream.CanRead
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanRead
- uid: System.IO.Stream.CanWrite
  commentId: P:System.IO.Stream.CanWrite
  parent: System.IO.Stream
  isExternal: true
  name: CanWrite
  nameWithType: Stream.CanWrite
  fullName: System.IO.Stream.CanWrite
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanWrite*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanWrite
  name: CanWrite
  nameWithType: ParallelDeflateOutputStream.CanWrite
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanWrite
- uid: System.IO.Stream.Length
  commentId: P:System.IO.Stream.Length
  parent: System.IO.Stream
  isExternal: true
  name: Length
  nameWithType: Stream.Length
  fullName: System.IO.Stream.Length
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Length*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Length
  name: Length
  nameWithType: ParallelDeflateOutputStream.Length
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Length
- uid: System.IO.Stream.Position
  commentId: P:System.IO.Stream.Position
  parent: System.IO.Stream
  isExternal: true
  name: Position
  nameWithType: Stream.Position
  fullName: System.IO.Stream.Position
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Position*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Position
  name: Position
  nameWithType: ParallelDeflateOutputStream.Position
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Position
- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: Read(Byte[], Int32, Int32)
  nameWithType: Stream.Read(Byte[], Int32, Int32)
  fullName: System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.Read(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    nameWithType: Stream.Read
    fullName: System.IO.Stream.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    nameWithType: Stream.Read
    fullName: System.IO.Stream.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Read*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Read
  name: Read
  nameWithType: ParallelDeflateOutputStream.Read
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Read
- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.Stream
  isExternal: true
  name: Seek(Int64, SeekOrigin)
  nameWithType: Stream.Seek(Int64, SeekOrigin)
  fullName: System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin)
  spec.csharp:
  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    nameWithType: Stream.Seek
    fullName: System.IO.Stream.Seek
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    nameWithType: SeekOrigin
    fullName: System.IO.SeekOrigin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    nameWithType: Stream.Seek
    fullName: System.IO.Stream.Seek
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    nameWithType: SeekOrigin
    fullName: System.IO.SeekOrigin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Seek*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Seek
  name: Seek
  nameWithType: ParallelDeflateOutputStream.Seek
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Seek
- uid: System.IO.SeekOrigin
  commentId: T:System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.IO.Stream.SetLength(System.Int64)
  commentId: M:System.IO.Stream.SetLength(System.Int64)
  parent: System.IO.Stream
  isExternal: true
  name: SetLength(Int64)
  nameWithType: Stream.SetLength(Int64)
  fullName: System.IO.Stream.SetLength(System.Int64)
  spec.csharp:
  - uid: System.IO.Stream.SetLength(System.Int64)
    name: SetLength
    nameWithType: Stream.SetLength
    fullName: System.IO.Stream.SetLength
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.SetLength(System.Int64)
    name: SetLength
    nameWithType: Stream.SetLength
    fullName: System.IO.Stream.SetLength
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.SetLength*
  commentId: Overload:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.SetLength
  name: SetLength
  nameWithType: ParallelDeflateOutputStream.SetLength
  fullName: OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.SetLength
