### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  commentId: T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  id: ExcelErrorCodes
  parent: OfficeOpenXml.FormulaParsing.Exceptions
  children:
  - OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Code
  - OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Equals(System.Object)
  - OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.GetHashCode
  - OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.IsErrorCode(System.Object)
  - OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Name
  - OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.NoValueAvaliable
  - OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Equality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes,OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)
  - OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Inequality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes,OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)
  - OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Value
  langs:
  - csharp
  - vb
  name: ExcelErrorCodes
  nameWithType: ExcelErrorCodes
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelErrorCodes
    path: ../src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
    startLine: 22
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Exceptions
  summary: "\nRepresents an Excel error code.\n"
  example: []
  syntax:
    content: public class ExcelErrorCodes
    content.vb: Public Class ExcelErrorCodes
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Code
  commentId: P:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Code
  id: Code
  parent: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  langs:
  - csharp
  - vb
  name: Code
  nameWithType: ExcelErrorCodes.Code
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Code
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Code
    path: ../src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
    startLine: 31
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Exceptions
  summary: "\nThe error code\n"
  example: []
  syntax:
    content: public string Code { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Code As String
  overload: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Code*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.GetHashCode
  commentId: M:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.GetHashCode
  id: GetHashCode
  parent: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ExcelErrorCodes.GetHashCode()
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.GetHashCode()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetHashCode
    path: ../src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
    startLine: 41
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Exceptions
  summary: "\nReturns the hash code for this string.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: The hash code
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Equals(System.Object)
  commentId: M:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Equals(System.Object)
  id: Equals(System.Object)
  parent: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ExcelErrorCodes.Equals(Object)
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Equals
    path: ../src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
    startLine: 50
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Exceptions
  summary: "\nDetermines whether the specified object is equal to the current object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: true if the specified object is equal to the current object; otherwise, false.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Equality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes,OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)
  commentId: M:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Equality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes,OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)
  id: op_Equality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes,OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)
  parent: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  langs:
  - csharp
  - vb
  name: Equality(ExcelErrorCodes, ExcelErrorCodes)
  nameWithType: ExcelErrorCodes.Equality(ExcelErrorCodes, ExcelErrorCodes)
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Equality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes, OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)
  type: Operator
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: op_Equality
    path: ../src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
    startLine: 65
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Exceptions
  summary: "\nEqual operator\n"
  example: []
  syntax:
    content: public static bool operator ==(ExcelErrorCodes c1, ExcelErrorCodes c2)
    parameters:
    - id: c1
      type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
      description: The first error code to match
    - id: c2
      type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
      description: The second error code to match
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Operator =(c1 As ExcelErrorCodes, c2 As ExcelErrorCodes) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Inequality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes,OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)
  commentId: M:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Inequality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes,OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)
  id: op_Inequality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes,OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)
  parent: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  langs:
  - csharp
  - vb
  name: Inequality(ExcelErrorCodes, ExcelErrorCodes)
  nameWithType: ExcelErrorCodes.Inequality(ExcelErrorCodes, ExcelErrorCodes)
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Inequality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes, OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)
  type: Operator
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: op_Inequality
    path: ../src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
    startLine: 75
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Exceptions
  summary: "\nNot equal operator\n"
  example: []
  syntax:
    content: public static bool operator !=(ExcelErrorCodes c1, ExcelErrorCodes c2)
    parameters:
    - id: c1
      type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
      description: The first error code to match
    - id: c2
      type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
      description: The second error code to match
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Operator <>(c1 As ExcelErrorCodes, c2 As ExcelErrorCodes) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.IsErrorCode(System.Object)
  commentId: M:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.IsErrorCode(System.Object)
  id: IsErrorCode(System.Object)
  parent: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  langs:
  - csharp
  - vb
  name: IsErrorCode(Object)
  nameWithType: ExcelErrorCodes.IsErrorCode(Object)
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.IsErrorCode(System.Object)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsErrorCode
    path: ../src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
    startLine: 87
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Exceptions
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">valueToTest</code> matches an error code.\n"
  example: []
  syntax:
    content: public static bool IsErrorCode(object valueToTest)
    parameters:
    - id: valueToTest
      type: System.Object
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsErrorCode(valueToTest As Object) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.IsErrorCode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Value
  commentId: P:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Value
  id: Value
  parent: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ExcelErrorCodes.Value
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Value
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Value
    path: ../src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
    startLine: 104
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Exceptions
  summary: "\nRepresents a cell value error \n"
  example: []
  syntax:
    content: public static ExcelErrorCodes Value { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
    content.vb: Public Shared ReadOnly Property Value As ExcelErrorCodes
  overload: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Value*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Name
  commentId: P:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Name
  id: Name
  parent: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ExcelErrorCodes.Name
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Name
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Name
    path: ../src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
    startLine: 112
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Exceptions
  summary: "\nRepresents a cell name error \n"
  example: []
  syntax:
    content: public static ExcelErrorCodes Name { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
    content.vb: Public Shared ReadOnly Property Name As ExcelErrorCodes
  overload: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Name*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.NoValueAvaliable
  commentId: P:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.NoValueAvaliable
  id: NoValueAvaliable
  parent: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  langs:
  - csharp
  - vb
  name: NoValueAvaliable
  nameWithType: ExcelErrorCodes.NoValueAvaliable
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.NoValueAvaliable
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: NoValueAvaliable
    path: ../src/EPPlus/FormulaParsing/Exceptions/ExcelErrorCodes.cs
    startLine: 119
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Exceptions
  summary: "\nReprecents a N/A error\n"
  example: []
  syntax:
    content: public static ExcelErrorCodes NoValueAvaliable { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
    content.vb: Public Shared ReadOnly Property NoValueAvaliable As ExcelErrorCodes
  overload: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.NoValueAvaliable*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: OfficeOpenXml.FormulaParsing.Exceptions
  commentId: N:OfficeOpenXml.FormulaParsing.Exceptions
  name: OfficeOpenXml.FormulaParsing.Exceptions
  nameWithType: OfficeOpenXml.FormulaParsing.Exceptions
  fullName: OfficeOpenXml.FormulaParsing.Exceptions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Code*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Code
  name: Code
  nameWithType: ExcelErrorCodes.Code
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Code
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.GetHashCode*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.GetHashCode
  name: GetHashCode
  nameWithType: ExcelErrorCodes.GetHashCode
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Equals*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Equals
  name: Equals
  nameWithType: ExcelErrorCodes.Equals
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Equality*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Equality
  name: Equality
  nameWithType: ExcelErrorCodes.Equality
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Equality
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  commentId: T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
  parent: OfficeOpenXml.FormulaParsing.Exceptions
  name: ExcelErrorCodes
  nameWithType: ExcelErrorCodes
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Inequality*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Inequality
  name: Inequality
  nameWithType: ExcelErrorCodes.Inequality
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Inequality
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.IsErrorCode*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.IsErrorCode
  name: IsErrorCode
  nameWithType: ExcelErrorCodes.IsErrorCode
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.IsErrorCode
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Value*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Value
  name: Value
  nameWithType: ExcelErrorCodes.Value
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Value
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Name*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Name
  name: Name
  nameWithType: ExcelErrorCodes.Name
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Name
- uid: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.NoValueAvaliable*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.NoValueAvaliable
  name: NoValueAvaliable
  nameWithType: ExcelErrorCodes.NoValueAvaliable
  fullName: OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.NoValueAvaliable
