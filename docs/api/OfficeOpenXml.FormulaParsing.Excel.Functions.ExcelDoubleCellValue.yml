### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  id: ExcelDoubleCellValue
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  children:
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.#ctor(System.Double)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.#ctor(System.Double,System.Int32,System.Int32)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CellCol
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CellRow
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CompareTo(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CompareTo(System.Object)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Equals(System.Object)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.GetHashCode
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Equality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Equality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,System.Double)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Implicit(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)~System.Double
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Implicit(System.Double)~OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Inequality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Inequality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,System.Double)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Value
  langs:
  - csharp
  - vb
  name: ExcelDoubleCellValue
  nameWithType: ExcelDoubleCellValue
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  type: Struct
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelDoubleCellValue
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 20
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: 'public struct ExcelDoubleCellValue : IComparable<ExcelDoubleCellValue>, IComparable'
    content.vb: >-
      Public Structure ExcelDoubleCellValue
          Implements IComparable(Of ExcelDoubleCellValue), IComparable
  implements:
  - System.IComparable{OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue}
  - System.IComparable
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.#ctor(System.Double)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: ExcelDoubleCellValue(Double)
  nameWithType: ExcelDoubleCellValue.ExcelDoubleCellValue(Double)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.ExcelDoubleCellValue(System.Double)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 23
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public ExcelDoubleCellValue(double val)
    parameters:
    - id: val
      type: System.Double
    content.vb: Public Sub New(val As Double)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.#ctor(System.Double,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.#ctor(System.Double,System.Int32,System.Int32)
  id: '#ctor(System.Double,System.Int32,System.Int32)'
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: ExcelDoubleCellValue(Double, Int32, Int32)
  nameWithType: ExcelDoubleCellValue.ExcelDoubleCellValue(Double, Int32, Int32)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.ExcelDoubleCellValue(System.Double, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 30
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public ExcelDoubleCellValue(double val, int cellRow, int cellCol)
    parameters:
    - id: val
      type: System.Double
    - id: cellRow
      type: System.Int32
    - id: cellCol
      type: System.Int32
    content.vb: Public Sub New(val As Double, cellRow As Integer, cellCol As Integer)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CellRow
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CellRow
  id: CellRow
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: CellRow
  nameWithType: ExcelDoubleCellValue.CellRow
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CellRow
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CellRow
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 37
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public int? CellRow
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public CellRow As Integer?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CellCol
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CellCol
  id: CellCol
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: CellCol
  nameWithType: ExcelDoubleCellValue.CellCol
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CellCol
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CellCol
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 39
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public int? CellCol
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public CellCol As Integer?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Value
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Value
  id: Value
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ExcelDoubleCellValue.Value
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Value
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Value
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 41
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public double Value
    return:
      type: System.Double
    content.vb: Public Value As Double
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Implicit(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)~System.Double
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Implicit(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)~System.Double
  id: op_Implicit(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)~System.Double
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: Implicit(ExcelDoubleCellValue to Double)
  nameWithType: ExcelDoubleCellValue.Implicit(ExcelDoubleCellValue to Double)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Implicit(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue to System.Double)
  type: Operator
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: op_Implicit
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 43
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public static implicit operator double (ExcelDoubleCellValue d)
    parameters:
    - id: d
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
    return:
      type: System.Double
    content.vb: Public Shared Widening Operator CType(d As ExcelDoubleCellValue) As Double
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Implicit*
  nameWithType.vb: ExcelDoubleCellValue.Widening(ExcelDoubleCellValue to Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Widening(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue to System.Double)
  name.vb: Widening(ExcelDoubleCellValue to Double)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Implicit(System.Double)~OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Implicit(System.Double)~OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  id: op_Implicit(System.Double)~OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: Implicit(Double to ExcelDoubleCellValue)
  nameWithType: ExcelDoubleCellValue.Implicit(Double to ExcelDoubleCellValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Implicit(System.Double to OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  type: Operator
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: op_Implicit
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 48
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public static implicit operator ExcelDoubleCellValue(double d)
    parameters:
    - id: d
      type: System.Double
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
    content.vb: Public Shared Widening Operator CType(d As Double) As ExcelDoubleCellValue
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Implicit*
  nameWithType.vb: ExcelDoubleCellValue.Widening(Double to ExcelDoubleCellValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Widening(System.Double to OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  name.vb: Widening(Double to ExcelDoubleCellValue)
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CompareTo(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CompareTo(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  id: CompareTo(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: CompareTo(ExcelDoubleCellValue)
  nameWithType: ExcelDoubleCellValue.CompareTo(ExcelDoubleCellValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CompareTo(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CompareTo
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 53
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public int CompareTo(ExcelDoubleCellValue other)
    parameters:
    - id: other
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(other As ExcelDoubleCellValue) As Integer
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CompareTo*
  implements:
  - System.IComparable{OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue}.CompareTo(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CompareTo(System.Object)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: CompareTo(Object)
  nameWithType: ExcelDoubleCellValue.CompareTo(Object)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CompareTo
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 58
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public int CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(obj As Object) As Integer
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CompareTo*
  implements:
  - System.IComparable.CompareTo(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Equals(System.Object)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Equals(System.Object)
  id: Equals(System.Object)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ExcelDoubleCellValue.Equals(Object)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Equals
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 67
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.GetHashCode
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.GetHashCode
  id: GetHashCode
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ExcelDoubleCellValue.GetHashCode()
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.GetHashCode()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetHashCode
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 71
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Equality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Equality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  id: op_Equality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: Equality(ExcelDoubleCellValue, ExcelDoubleCellValue)
  nameWithType: ExcelDoubleCellValue.Equality(ExcelDoubleCellValue, ExcelDoubleCellValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Equality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue, OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  type: Operator
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: op_Equality
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 75
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public static bool operator ==(ExcelDoubleCellValue a, ExcelDoubleCellValue b)
    parameters:
    - id: a
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
    - id: b
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(a As ExcelDoubleCellValue, b As ExcelDoubleCellValue) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Equality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,System.Double)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Equality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,System.Double)
  id: op_Equality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,System.Double)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: Equality(ExcelDoubleCellValue, Double)
  nameWithType: ExcelDoubleCellValue.Equality(ExcelDoubleCellValue, Double)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Equality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue, System.Double)
  type: Operator
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: op_Equality
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 80
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public static bool operator ==(ExcelDoubleCellValue a, double b)
    parameters:
    - id: a
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
    - id: b
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(a As ExcelDoubleCellValue, b As Double) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Inequality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Inequality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  id: op_Inequality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: Inequality(ExcelDoubleCellValue, ExcelDoubleCellValue)
  nameWithType: ExcelDoubleCellValue.Inequality(ExcelDoubleCellValue, ExcelDoubleCellValue)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Inequality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue, OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  type: Operator
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: op_Inequality
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 85
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public static bool operator !=(ExcelDoubleCellValue a, ExcelDoubleCellValue b)
    parameters:
    - id: a
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
    - id: b
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(a As ExcelDoubleCellValue, b As ExcelDoubleCellValue) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Inequality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,System.Double)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Inequality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,System.Double)
  id: op_Inequality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue,System.Double)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  langs:
  - csharp
  - vb
  name: Inequality(ExcelDoubleCellValue, Double)
  nameWithType: ExcelDoubleCellValue.Inequality(ExcelDoubleCellValue, Double)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Inequality(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue, System.Double)
  type: Operator
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: op_Inequality
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/ExcelDoubleCellValue.cs
    startLine: 90
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public static bool operator !=(ExcelDoubleCellValue a, double b)
    parameters:
    - id: a
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
    - id: b
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(a As ExcelDoubleCellValue, b As Double) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions
  commentId: N:OfficeOpenXml.FormulaParsing.Excel.Functions
  name: OfficeOpenXml.FormulaParsing.Excel.Functions
  nameWithType: OfficeOpenXml.FormulaParsing.Excel.Functions
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions
- uid: System.IComparable{OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue}
  commentId: T:System.IComparable{OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue}
  parent: System
  definition: System.IComparable`1
  name: IComparable<ExcelDoubleCellValue>
  nameWithType: IComparable<ExcelDoubleCellValue>
  fullName: System.IComparable<OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue>
  nameWithType.vb: IComparable(Of ExcelDoubleCellValue)
  fullName.vb: System.IComparable(Of OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  name.vb: IComparable(Of ExcelDoubleCellValue)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
    name: ExcelDoubleCellValue
    nameWithType: ExcelDoubleCellValue
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
    name: ExcelDoubleCellValue
    nameWithType: ExcelDoubleCellValue
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.#ctor
  name: ExcelDoubleCellValue
  nameWithType: ExcelDoubleCellValue.ExcelDoubleCellValue
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.ExcelDoubleCellValue
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Implicit*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Implicit
  name: Implicit
  nameWithType: ExcelDoubleCellValue.Implicit
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Implicit
  nameWithType.vb: ExcelDoubleCellValue.Widening
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Widening
  name.vb: Widening
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: ExcelDoubleCellValue
  nameWithType: ExcelDoubleCellValue
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CompareTo*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CompareTo
  name: CompareTo
  nameWithType: ExcelDoubleCellValue.CompareTo
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.CompareTo
- uid: System.IComparable{OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue}.CompareTo(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  commentId: M:System.IComparable{OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue}.CompareTo(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  parent: System.IComparable{OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(ExcelDoubleCellValue)
  nameWithType: IComparable<ExcelDoubleCellValue>.CompareTo(ExcelDoubleCellValue)
  fullName: System.IComparable<OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue>.CompareTo(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  nameWithType.vb: IComparable(Of ExcelDoubleCellValue).CompareTo(ExcelDoubleCellValue)
  fullName.vb: System.IComparable(Of OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue).CompareTo(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<ExcelDoubleCellValue>.CompareTo
    fullName: System.IComparable<OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
    name: ExcelDoubleCellValue
    nameWithType: ExcelDoubleCellValue
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of ExcelDoubleCellValue).CompareTo
    fullName: System.IComparable(Of OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
    name: ExcelDoubleCellValue
    nameWithType: ExcelDoubleCellValue
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Equals*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Equals
  name: Equals
  nameWithType: ExcelDoubleCellValue.Equals
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.GetHashCode*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.GetHashCode
  name: GetHashCode
  nameWithType: ExcelDoubleCellValue.GetHashCode
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.GetHashCode
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Equality*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Equality
  name: Equality
  nameWithType: ExcelDoubleCellValue.Equality
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Equality
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Inequality*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.op_Inequality
  name: Inequality
  nameWithType: ExcelDoubleCellValue.Inequality
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue.Inequality
