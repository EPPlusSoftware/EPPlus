### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.Style.ExcelParagraphCollection
  commentId: T:OfficeOpenXml.Style.ExcelParagraphCollection
  id: ExcelParagraphCollection
  parent: OfficeOpenXml.Style
  children:
  - OfficeOpenXml.Style.ExcelParagraphCollection.Add(System.String,System.Boolean)
  - OfficeOpenXml.Style.ExcelParagraphCollection.Clear
  - OfficeOpenXml.Style.ExcelParagraphCollection.Count
  - OfficeOpenXml.Style.ExcelParagraphCollection.Item(System.Int32)
  - OfficeOpenXml.Style.ExcelParagraphCollection.Remove(OfficeOpenXml.Style.ExcelParagraph)
  - OfficeOpenXml.Style.ExcelParagraphCollection.RemoveAt(System.Int32)
  - OfficeOpenXml.Style.ExcelParagraphCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#Style#ExcelParagraph}#GetEnumerator
  - OfficeOpenXml.Style.ExcelParagraphCollection.System#Collections#IEnumerable#GetEnumerator
  - OfficeOpenXml.Style.ExcelParagraphCollection.Text
  langs:
  - csharp
  - vb
  name: ExcelParagraphCollection
  nameWithType: ExcelParagraphCollection
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection
  type: Class
  source:
    remote:
      path: src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelParagraphCollection
    path: ../src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
    startLine: 26
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Style
  summary: "\nA collection of Paragraph objects\n"
  example: []
  syntax:
    content: 'public class ExcelParagraphCollection : XmlHelper, IEnumerable<ExcelParagraph>, IEnumerable'
    content.vb: >-
      Public Class ExcelParagraphCollection
          Inherits XmlHelper
          Implements IEnumerable(Of ExcelParagraph), IEnumerable
  inheritance:
  - System.Object
  - OfficeOpenXml.XmlHelper
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.Style.ExcelParagraph}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.Item(System.Int32)
  commentId: P:OfficeOpenXml.Style.ExcelParagraphCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: OfficeOpenXml.Style.ExcelParagraphCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ExcelParagraphCollection.Item[Int32]
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: this[]
    path: ../src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
    startLine: 64
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Style
  summary: "\nThe indexer for this collection\n"
  example: []
  syntax:
    content: public ExcelParagraph this[int Index] { get; }
    parameters:
    - id: Index
      type: System.Int32
      description: The index
    return:
      type: OfficeOpenXml.Style.ExcelParagraph
      description: ''
    content.vb: Public ReadOnly Property Item(Index As Integer) As ExcelParagraph
  overload: OfficeOpenXml.Style.ExcelParagraphCollection.Item*
  nameWithType.vb: ExcelParagraphCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: OfficeOpenXml.Style.ExcelParagraphCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.Count
  commentId: P:OfficeOpenXml.Style.ExcelParagraphCollection.Count
  id: Count
  parent: OfficeOpenXml.Style.ExcelParagraphCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ExcelParagraphCollection.Count
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.Count
  type: Property
  source:
    remote:
      path: src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Count
    path: ../src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
    startLine: 74
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Style
  summary: "\nNumber of items in the collection\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: OfficeOpenXml.Style.ExcelParagraphCollection.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.Add(System.String,System.Boolean)
  commentId: M:OfficeOpenXml.Style.ExcelParagraphCollection.Add(System.String,System.Boolean)
  id: Add(System.String,System.Boolean)
  parent: OfficeOpenXml.Style.ExcelParagraphCollection
  langs:
  - csharp
  - vb
  name: Add(String, Boolean)
  nameWithType: ExcelParagraphCollection.Add(String, Boolean)
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.Add(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Add
    path: ../src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
    startLine: 87
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Style
  summary: "\nAdd a rich text string\n"
  example: []
  syntax:
    content: public ExcelParagraph Add(string Text, bool NewParagraph = false)
    parameters:
    - id: Text
      type: System.String
      description: The text to add
    - id: NewParagraph
      type: System.Boolean
      description: This will be a new line. Is ignored for first item added to the collection
    return:
      type: OfficeOpenXml.Style.ExcelParagraph
      description: ''
    content.vb: Public Function Add(Text As String, NewParagraph As Boolean = False) As ExcelParagraph
  overload: OfficeOpenXml.Style.ExcelParagraphCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.Clear
  commentId: M:OfficeOpenXml.Style.ExcelParagraphCollection.Clear
  id: Clear
  parent: OfficeOpenXml.Style.ExcelParagraphCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ExcelParagraphCollection.Clear()
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.Clear()
  type: Method
  source:
    remote:
      path: src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Clear
    path: ../src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
    startLine: 141
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Style
  summary: "\nRemoves all items in the collection\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: OfficeOpenXml.Style.ExcelParagraphCollection.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.RemoveAt(System.Int32)
  commentId: M:OfficeOpenXml.Style.ExcelParagraphCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: OfficeOpenXml.Style.ExcelParagraphCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: ExcelParagraphCollection.RemoveAt(Int32)
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: RemoveAt
    path: ../src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
    startLine: 154
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Style
  summary: "\nRemove the item at the specified index\n"
  example: []
  syntax:
    content: public void RemoveAt(int Index)
    parameters:
    - id: Index
      type: System.Int32
      description: The index
    content.vb: Public Sub RemoveAt(Index As Integer)
  overload: OfficeOpenXml.Style.ExcelParagraphCollection.RemoveAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.Remove(OfficeOpenXml.Style.ExcelParagraph)
  commentId: M:OfficeOpenXml.Style.ExcelParagraphCollection.Remove(OfficeOpenXml.Style.ExcelParagraph)
  id: Remove(OfficeOpenXml.Style.ExcelParagraph)
  parent: OfficeOpenXml.Style.ExcelParagraphCollection
  langs:
  - csharp
  - vb
  name: Remove(ExcelParagraph)
  nameWithType: ExcelParagraphCollection.Remove(ExcelParagraph)
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.Remove(OfficeOpenXml.Style.ExcelParagraph)
  type: Method
  source:
    remote:
      path: src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Remove
    path: ../src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
    startLine: 168
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Style
  summary: "\nRemove the specified item\n"
  example: []
  syntax:
    content: public void Remove(ExcelParagraph Item)
    parameters:
    - id: Item
      type: OfficeOpenXml.Style.ExcelParagraph
      description: The item
    content.vb: Public Sub Remove(Item As ExcelParagraph)
  overload: OfficeOpenXml.Style.ExcelParagraphCollection.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.Text
  commentId: P:OfficeOpenXml.Style.ExcelParagraphCollection.Text
  id: Text
  parent: OfficeOpenXml.Style.ExcelParagraphCollection
  langs:
  - csharp
  - vb
  name: Text
  nameWithType: ExcelParagraphCollection.Text
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.Text
  type: Property
  source:
    remote:
      path: src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Text
    path: ../src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
    startLine: 175
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Style
  summary: "\nThe full text \n"
  example: []
  syntax:
    content: public string Text { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Text As String
  overload: OfficeOpenXml.Style.ExcelParagraphCollection.Text*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#Style#ExcelParagraph}#GetEnumerator
  commentId: M:OfficeOpenXml.Style.ExcelParagraphCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#Style#ExcelParagraph}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{OfficeOpenXml#Style#ExcelParagraph}#GetEnumerator
  isEii: true
  parent: OfficeOpenXml.Style.ExcelParagraphCollection
  langs:
  - csharp
  - vb
  name: IEnumerable<ExcelParagraph>.GetEnumerator()
  nameWithType: ExcelParagraphCollection.IEnumerable<ExcelParagraph>.GetEnumerator()
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.System.Collections.Generic.IEnumerable<OfficeOpenXml.Style.ExcelParagraph>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: System.Collections.Generic.IEnumerable<OfficeOpenXml.Style.ExcelParagraph>.GetEnumerator
    path: ../src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
    startLine: 214
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Style
  syntax:
    content: IEnumerator<ExcelParagraph> IEnumerable<ExcelParagraph>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{OfficeOpenXml.Style.ExcelParagraph}
    content.vb: Function System.Collections.Generic.IEnumerable<OfficeOpenXml.Style.ExcelParagraph>.GetEnumerator As IEnumerator(Of ExcelParagraph) Implements IEnumerable(Of ExcelParagraph).GetEnumerator
  overload: OfficeOpenXml.Style.ExcelParagraphCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#Style#ExcelParagraph}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.Style.ExcelParagraph}.GetEnumerator
  nameWithType.vb: ExcelParagraphCollection.System.Collections.Generic.IEnumerable<OfficeOpenXml.Style.ExcelParagraph>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<OfficeOpenXml.Style.ExcelParagraph>.GetEnumerator()
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:OfficeOpenXml.Style.ExcelParagraphCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: OfficeOpenXml.Style.ExcelParagraphCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ExcelParagraphCollection.IEnumerable.GetEnumerator()
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../src/EPPlus/Style/RichText/ExcelParagraphCollection.cs
    startLine: 223
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Style
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: OfficeOpenXml.Style.ExcelParagraphCollection.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExcelParagraphCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: OfficeOpenXml.Style
  commentId: N:OfficeOpenXml.Style
  name: OfficeOpenXml.Style
  nameWithType: OfficeOpenXml.Style
  fullName: OfficeOpenXml.Style
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.XmlHelper
  commentId: T:OfficeOpenXml.XmlHelper
  parent: OfficeOpenXml
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: OfficeOpenXml.XmlHelper
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.Style.ExcelParagraph}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.Style.ExcelParagraph}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ExcelParagraph>
  nameWithType: IEnumerable<ExcelParagraph>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.Style.ExcelParagraph>
  nameWithType.vb: IEnumerable(Of ExcelParagraph)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.Style.ExcelParagraph)
  name.vb: IEnumerable(Of ExcelParagraph)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Style.ExcelParagraph
    name: ExcelParagraph
    nameWithType: ExcelParagraph
    fullName: OfficeOpenXml.Style.ExcelParagraph
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Style.ExcelParagraph
    name: ExcelParagraph
    nameWithType: ExcelParagraph
    fullName: OfficeOpenXml.Style.ExcelParagraph
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.Item*
  commentId: Overload:OfficeOpenXml.Style.ExcelParagraphCollection.Item
  name: Item
  nameWithType: ExcelParagraphCollection.Item
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.Item
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.Style.ExcelParagraph
  commentId: T:OfficeOpenXml.Style.ExcelParagraph
  parent: OfficeOpenXml.Style
  name: ExcelParagraph
  nameWithType: ExcelParagraph
  fullName: OfficeOpenXml.Style.ExcelParagraph
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.Count*
  commentId: Overload:OfficeOpenXml.Style.ExcelParagraphCollection.Count
  name: Count
  nameWithType: ExcelParagraphCollection.Count
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.Count
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.Add*
  commentId: Overload:OfficeOpenXml.Style.ExcelParagraphCollection.Add
  name: Add
  nameWithType: ExcelParagraphCollection.Add
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.Add
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.Clear*
  commentId: Overload:OfficeOpenXml.Style.ExcelParagraphCollection.Clear
  name: Clear
  nameWithType: ExcelParagraphCollection.Clear
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.Clear
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.RemoveAt*
  commentId: Overload:OfficeOpenXml.Style.ExcelParagraphCollection.RemoveAt
  name: RemoveAt
  nameWithType: ExcelParagraphCollection.RemoveAt
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.RemoveAt
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.Remove*
  commentId: Overload:OfficeOpenXml.Style.ExcelParagraphCollection.Remove
  name: Remove
  nameWithType: ExcelParagraphCollection.Remove
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.Remove
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.Text*
  commentId: Overload:OfficeOpenXml.Style.ExcelParagraphCollection.Text
  name: Text
  nameWithType: ExcelParagraphCollection.Text
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.Text
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#Style#ExcelParagraph}#GetEnumerator*
  commentId: Overload:OfficeOpenXml.Style.ExcelParagraphCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#Style#ExcelParagraph}#GetEnumerator
  name: IEnumerable<ExcelParagraph>.GetEnumerator
  nameWithType: ExcelParagraphCollection.IEnumerable<ExcelParagraph>.GetEnumerator
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.System.Collections.Generic.IEnumerable<OfficeOpenXml.Style.ExcelParagraph>.GetEnumerator
  nameWithType.vb: ExcelParagraphCollection.System.Collections.Generic.IEnumerable<OfficeOpenXml.Style.ExcelParagraph>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<OfficeOpenXml.Style.ExcelParagraph>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.Style.ExcelParagraph}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{OfficeOpenXml.Style.ExcelParagraph}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{OfficeOpenXml.Style.ExcelParagraph}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<ExcelParagraph>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.Style.ExcelParagraph>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of ExcelParagraph).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.Style.ExcelParagraph).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<ExcelParagraph>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.Style.ExcelParagraph>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of ExcelParagraph).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.Style.ExcelParagraph).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{OfficeOpenXml.Style.ExcelParagraph}
  commentId: T:System.Collections.Generic.IEnumerator{OfficeOpenXml.Style.ExcelParagraph}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<ExcelParagraph>
  nameWithType: IEnumerator<ExcelParagraph>
  fullName: System.Collections.Generic.IEnumerator<OfficeOpenXml.Style.ExcelParagraph>
  nameWithType.vb: IEnumerator(Of ExcelParagraph)
  fullName.vb: System.Collections.Generic.IEnumerator(Of OfficeOpenXml.Style.ExcelParagraph)
  name.vb: IEnumerator(Of ExcelParagraph)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Style.ExcelParagraph
    name: ExcelParagraph
    nameWithType: ExcelParagraph
    fullName: OfficeOpenXml.Style.ExcelParagraph
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Style.ExcelParagraph
    name: ExcelParagraph
    nameWithType: ExcelParagraph
    fullName: OfficeOpenXml.Style.ExcelParagraph
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Style.ExcelParagraphCollection.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:OfficeOpenXml.Style.ExcelParagraphCollection.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: ExcelParagraphCollection.IEnumerable.GetEnumerator
  fullName: OfficeOpenXml.Style.ExcelParagraphCollection.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExcelParagraphCollection.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
