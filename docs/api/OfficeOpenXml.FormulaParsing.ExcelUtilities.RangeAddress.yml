### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  commentId: T:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  id: RangeAddress
  parent: OfficeOpenXml.FormulaParsing.ExcelUtilities
  children:
  - OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.#ctor
  - OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.CollidesWith(OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress)
  - OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Empty
  - OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromCol
  - OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromRow
  - OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToCol
  - OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToRow
  - OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToString
  - OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Worksheet
  langs:
  - csharp
  - vb
  name: RangeAddress
  nameWithType: RangeAddress
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: RangeAddress
    path: ../src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
    startLine: 23
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExcelUtilities
  summary: "\nAdress over a range\n"
  example: []
  syntax:
    content: public class RangeAddress
    content.vb: Public Class RangeAddress
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.#ctor
  commentId: M:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.#ctor
  id: '#ctor'
  parent: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  langs:
  - csharp
  - vb
  name: RangeAddress()
  nameWithType: RangeAddress.RangeAddress()
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.RangeAddress()
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
    startLine: 28
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExcelUtilities
  summary: "\nConstructor for empty address\n"
  example: []
  syntax:
    content: public RangeAddress()
    content.vb: Public Sub New
  overload: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Worksheet
  commentId: P:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Worksheet
  id: Worksheet
  parent: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  langs:
  - csharp
  - vb
  name: Worksheet
  nameWithType: RangeAddress.Worksheet
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Worksheet
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Worksheet
    path: ../src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
    startLine: 37
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExcelUtilities
  summary: "\nWorksheet\n"
  example: []
  syntax:
    content: public string Worksheet { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Worksheet As String
  overload: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Worksheet*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromCol
  commentId: P:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromCol
  id: FromCol
  parent: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  langs:
  - csharp
  - vb
  name: FromCol
  nameWithType: RangeAddress.FromCol
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromCol
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FromCol
    path: ../src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
    startLine: 41
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExcelUtilities
  summary: "\nFrom Column\n"
  example: []
  syntax:
    content: public int FromCol { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property FromCol As Integer
  overload: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromCol*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToCol
  commentId: P:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToCol
  id: ToCol
  parent: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  langs:
  - csharp
  - vb
  name: ToCol
  nameWithType: RangeAddress.ToCol
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToCol
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToCol
    path: ../src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
    startLine: 45
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExcelUtilities
  summary: "\nTo Column\n"
  example: []
  syntax:
    content: public int ToCol { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ToCol As Integer
  overload: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToCol*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromRow
  commentId: P:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromRow
  id: FromRow
  parent: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  langs:
  - csharp
  - vb
  name: FromRow
  nameWithType: RangeAddress.FromRow
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromRow
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FromRow
    path: ../src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
    startLine: 49
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExcelUtilities
  summary: "\nFrom row\n"
  example: []
  syntax:
    content: public int FromRow { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property FromRow As Integer
  overload: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromRow*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToRow
  commentId: P:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToRow
  id: ToRow
  parent: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  langs:
  - csharp
  - vb
  name: ToRow
  nameWithType: RangeAddress.ToRow
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToRow
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToRow
    path: ../src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
    startLine: 53
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExcelUtilities
  summary: "\nTo row\n"
  example: []
  syntax:
    content: public int ToRow { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ToRow As Integer
  overload: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToRow*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToString
  commentId: M:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToString
  id: ToString
  parent: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RangeAddress.ToString()
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToString()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToString
    path: ../src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
    startLine: 58
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExcelUtilities
  summary: "\nTo string\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Empty
  commentId: P:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Empty
  id: Empty
  parent: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: RangeAddress.Empty
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Empty
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Empty
    path: ../src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
    startLine: 67
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExcelUtilities
  summary: "\nEmpty\n"
  example: []
  syntax:
    content: public static RangeAddress Empty { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
    content.vb: Public Shared ReadOnly Property Empty As RangeAddress
  overload: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Empty*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.CollidesWith(OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress)
  commentId: M:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.CollidesWith(OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress)
  id: CollidesWith(OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress)
  parent: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  langs:
  - csharp
  - vb
  name: CollidesWith(RangeAddress)
  nameWithType: RangeAddress.CollidesWith(RangeAddress)
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.CollidesWith(OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CollidesWith
    path: ../src/EPPlus/FormulaParsing/ExcelUtilities/RangeAddress.cs
    startLine: 77
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExcelUtilities
  summary: "\nReturns true if this range collides (full or partly) with the supplied range\n"
  example: []
  syntax:
    content: public bool CollidesWith(RangeAddress other)
    parameters:
    - id: other
      type: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
      description: The range to check
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function CollidesWith(other As RangeAddress) As Boolean
  overload: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.CollidesWith*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities
  commentId: N:OfficeOpenXml.FormulaParsing.ExcelUtilities
  name: OfficeOpenXml.FormulaParsing.ExcelUtilities
  nameWithType: OfficeOpenXml.FormulaParsing.ExcelUtilities
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.#ctor
  name: RangeAddress
  nameWithType: RangeAddress.RangeAddress
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.RangeAddress
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Worksheet*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Worksheet
  name: Worksheet
  nameWithType: RangeAddress.Worksheet
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Worksheet
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromCol*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromCol
  name: FromCol
  nameWithType: RangeAddress.FromCol
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromCol
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToCol*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToCol
  name: ToCol
  nameWithType: RangeAddress.ToCol
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToCol
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromRow*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromRow
  name: FromRow
  nameWithType: RangeAddress.FromRow
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.FromRow
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToRow*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToRow
  name: ToRow
  nameWithType: RangeAddress.ToRow
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToRow
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToString*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToString
  name: ToString
  nameWithType: RangeAddress.ToString
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.ToString
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Empty*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Empty
  name: Empty
  nameWithType: RangeAddress.Empty
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.Empty
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  commentId: T:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
  parent: OfficeOpenXml.FormulaParsing.ExcelUtilities
  name: RangeAddress
  nameWithType: RangeAddress
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress
- uid: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.CollidesWith*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.CollidesWith
  name: CollidesWith
  nameWithType: RangeAddress.CollidesWith
  fullName: OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.CollidesWith
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
