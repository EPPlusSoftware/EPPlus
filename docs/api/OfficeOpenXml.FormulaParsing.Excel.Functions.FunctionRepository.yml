### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  id: FunctionRepository
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  children:
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.AddOrReplaceFunction(System.String,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Clear
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Create
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.FunctionNames
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.GetFunction(System.String)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.IsFunctionName(System.String)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.LoadModule(OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.NamespaceFunctions
  langs:
  - csharp
  - vb
  name: FunctionRepository
  nameWithType: FunctionRepository
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FunctionRepository
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
    startLine: 23
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThis class provides methods for accessing/modifying VBA Functions.\n"
  example: []
  syntax:
    content: 'public class FunctionRepository : IFunctionNameProvider'
    content.vb: >-
      Public Class FunctionRepository
          Implements IFunctionNameProvider
  inheritance:
  - System.Object
  implements:
  - OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Create
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Create
  id: Create
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: FunctionRepository.Create()
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Create()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Create
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
    startLine: 40
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public static FunctionRepository Create()
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
    content.vb: Public Shared Function Create As FunctionRepository
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.LoadModule(OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.LoadModule(OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule)
  id: LoadModule(OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  langs:
  - csharp
  - vb
  name: LoadModule(IFunctionModule)
  nameWithType: FunctionRepository.LoadModule(IFunctionModule)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.LoadModule(OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadModule
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
    startLine: 52
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nLoads a module of <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction\" data-throw-if-not-resolved=\"false\"></xref>s to the function repository.\n"
  example: []
  syntax:
    content: public virtual void LoadModule(IFunctionModule module)
    parameters:
    - id: module
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule
      description: A <xref href="OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule" data-throw-if-not-resolved="false"></xref> that can be used for adding functions and custom function compilers.
    content.vb: Public Overridable Sub LoadModule(module As IFunctionModule)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.LoadModule*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.GetFunction(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.GetFunction(System.String)
  id: GetFunction(System.String)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  langs:
  - csharp
  - vb
  name: GetFunction(String)
  nameWithType: FunctionRepository.GetFunction(String)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.GetFunction(System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetFunction
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
    startLine: 66
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  syntax:
    content: public virtual ExcelFunction GetFunction(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
    content.vb: Public Overridable Function GetFunction(name As String) As ExcelFunction
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.GetFunction*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Clear
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Clear
  id: Clear
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: FunctionRepository.Clear()
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Clear()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Clear
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
    startLine: 80
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nRemoves all functions from the repository\n"
  example: []
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Clear*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.IsFunctionName(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.IsFunctionName(System.String)
  id: IsFunctionName(System.String)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  langs:
  - csharp
  - vb
  name: IsFunctionName(String)
  nameWithType: FunctionRepository.IsFunctionName(String)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.IsFunctionName(System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsFunctionName
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
    startLine: 91
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns true if the the supplied <code data-dev-comment-type=\"paramref\" class=\"paramref\">name</code> exists in the repository.\n"
  example: []
  syntax:
    content: public bool IsFunctionName(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsFunctionName(name As String) As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.IsFunctionName*
  implements:
  - OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider.IsFunctionName(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.FunctionNames
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.FunctionNames
  id: FunctionNames
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  langs:
  - csharp
  - vb
  name: FunctionNames
  nameWithType: FunctionRepository.FunctionNames
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.FunctionNames
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FunctionNames
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
    startLine: 99
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns the names of all implemented functions.\n"
  example: []
  syntax:
    content: public IEnumerable<string> FunctionNames { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property FunctionNames As IEnumerable(Of String)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.FunctionNames*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.AddOrReplaceFunction(System.String,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.AddOrReplaceFunction(System.String,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction)
  id: AddOrReplaceFunction(System.String,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  langs:
  - csharp
  - vb
  name: AddOrReplaceFunction(String, ExcelFunction)
  nameWithType: FunctionRepository.AddOrReplaceFunction(String, ExcelFunction)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.AddOrReplaceFunction(System.String, OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AddOrReplaceFunction
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
    startLine: 109
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nAdds or replaces a function.\n"
  example: []
  syntax:
    content: public void AddOrReplaceFunction(string functionName, ExcelFunction functionImpl)
    parameters:
    - id: functionName
      type: System.String
      description: Case-insensitive name of the function that should be added or replaced.
    - id: functionImpl
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
      description: An implementation of an <xref href="OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub AddOrReplaceFunction(functionName As String, functionImpl As ExcelFunction)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.AddOrReplaceFunction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.NamespaceFunctions
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.NamespaceFunctions
  id: NamespaceFunctions
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  langs:
  - csharp
  - vb
  name: NamespaceFunctions
  nameWithType: FunctionRepository.NamespaceFunctions
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.NamespaceFunctions
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: NamespaceFunctions
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionRepository.cs
    startLine: 125
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nContains all functions that needs a namespace prefix in Excel.\nFor example: The Filter function must have the prefix &quot;_xlfn._xlws.&quot;\n"
  example: []
  syntax:
    content: public Dictionary<string, string> NamespaceFunctions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public ReadOnly Property NamespaceFunctions As Dictionary(Of String, String)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.NamespaceFunctions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions
  commentId: N:OfficeOpenXml.FormulaParsing.Excel.Functions
  name: OfficeOpenXml.FormulaParsing.Excel.Functions
  nameWithType: OfficeOpenXml.FormulaParsing.Excel.Functions
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: IFunctionNameProvider
  nameWithType: IFunctionNameProvider
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Create*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Create
  name: Create
  nameWithType: FunctionRepository.Create
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Create
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: FunctionRepository
  nameWithType: FunctionRepository
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: ExcelFunction
  nameWithType: ExcelFunction
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: IFunctionModule
  nameWithType: IFunctionModule
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.LoadModule*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.LoadModule
  name: LoadModule
  nameWithType: FunctionRepository.LoadModule
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.LoadModule
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.GetFunction*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.GetFunction
  name: GetFunction
  nameWithType: FunctionRepository.GetFunction
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.GetFunction
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Clear*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Clear
  name: Clear
  nameWithType: FunctionRepository.Clear
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Clear
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.IsFunctionName*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.IsFunctionName
  name: IsFunctionName
  nameWithType: FunctionRepository.IsFunctionName
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.IsFunctionName
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider.IsFunctionName(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider.IsFunctionName(System.String)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider
  isExternal: true
  name: IsFunctionName(String)
  nameWithType: IFunctionNameProvider.IsFunctionName(String)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider.IsFunctionName(System.String)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider.IsFunctionName(System.String)
    name: IsFunctionName
    nameWithType: IFunctionNameProvider.IsFunctionName
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider.IsFunctionName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider.IsFunctionName(System.String)
    name: IsFunctionName
    nameWithType: IFunctionNameProvider.IsFunctionName
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider.IsFunctionName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.FunctionNames*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.FunctionNames
  name: FunctionNames
  nameWithType: FunctionRepository.FunctionNames
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.FunctionNames
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.AddOrReplaceFunction*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.AddOrReplaceFunction
  name: AddOrReplaceFunction
  nameWithType: FunctionRepository.AddOrReplaceFunction
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.AddOrReplaceFunction
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.NamespaceFunctions*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.NamespaceFunctions
  name: NamespaceFunctions
  nameWithType: FunctionRepository.NamespaceFunctions
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.NamespaceFunctions
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
