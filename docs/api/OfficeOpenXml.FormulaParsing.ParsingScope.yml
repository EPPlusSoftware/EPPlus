### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.ParsingScope
  commentId: T:OfficeOpenXml.FormulaParsing.ParsingScope
  id: ParsingScope
  parent: OfficeOpenXml.FormulaParsing
  children:
  - OfficeOpenXml.FormulaParsing.ParsingScope.#ctor(OfficeOpenXml.FormulaParsing.ParsingScopes,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  - OfficeOpenXml.FormulaParsing.ParsingScope.#ctor(OfficeOpenXml.FormulaParsing.ParsingScopes,OfficeOpenXml.FormulaParsing.ParsingScope,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  - OfficeOpenXml.FormulaParsing.ParsingScope.Address
  - OfficeOpenXml.FormulaParsing.ParsingScope.Dispose
  - OfficeOpenXml.FormulaParsing.ParsingScope.IsSubtotal
  - OfficeOpenXml.FormulaParsing.ParsingScope.Parent
  - OfficeOpenXml.FormulaParsing.ParsingScope.ScopeId
  langs:
  - csharp
  - vb
  name: ParsingScope
  nameWithType: ParsingScope
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ParsingScope.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ParsingScope
    path: ../src/EPPlus/FormulaParsing/ParsingScope.cs
    startLine: 24
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nRepresents a parsing of a single input or workbook addrses.\n"
  example: []
  syntax:
    content: 'public class ParsingScope : IDisposable'
    content.vb: >-
      Public Class ParsingScope
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.ParsingScope.#ctor(OfficeOpenXml.FormulaParsing.ParsingScopes,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  commentId: M:OfficeOpenXml.FormulaParsing.ParsingScope.#ctor(OfficeOpenXml.FormulaParsing.ParsingScopes,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  id: '#ctor(OfficeOpenXml.FormulaParsing.ParsingScopes,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)'
  parent: OfficeOpenXml.FormulaParsing.ParsingScope
  langs:
  - csharp
  - vb
  name: ParsingScope(ParsingScopes, FormulaRangeAddress)
  nameWithType: ParsingScope.ParsingScope(ParsingScopes, FormulaRangeAddress)
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope.ParsingScope(OfficeOpenXml.FormulaParsing.ParsingScopes, OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ParsingScope.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/ParsingScope.cs
    startLine: 33
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public ParsingScope(ParsingScopes parsingScopes, FormulaRangeAddress address)
    parameters:
    - id: parsingScopes
      type: OfficeOpenXml.FormulaParsing.ParsingScopes
      description: ''
    - id: address
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
      description: ''
    content.vb: Public Sub New(parsingScopes As ParsingScopes, address As FormulaRangeAddress)
  overload: OfficeOpenXml.FormulaParsing.ParsingScope.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ParsingScope.#ctor(OfficeOpenXml.FormulaParsing.ParsingScopes,OfficeOpenXml.FormulaParsing.ParsingScope,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  commentId: M:OfficeOpenXml.FormulaParsing.ParsingScope.#ctor(OfficeOpenXml.FormulaParsing.ParsingScopes,OfficeOpenXml.FormulaParsing.ParsingScope,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  id: '#ctor(OfficeOpenXml.FormulaParsing.ParsingScopes,OfficeOpenXml.FormulaParsing.ParsingScope,OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)'
  parent: OfficeOpenXml.FormulaParsing.ParsingScope
  langs:
  - csharp
  - vb
  name: ParsingScope(ParsingScopes, ParsingScope, FormulaRangeAddress)
  nameWithType: ParsingScope.ParsingScope(ParsingScopes, ParsingScope, FormulaRangeAddress)
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope.ParsingScope(OfficeOpenXml.FormulaParsing.ParsingScopes, OfficeOpenXml.FormulaParsing.ParsingScope, OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ParsingScope.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/ParsingScope.cs
    startLine: 44
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public ParsingScope(ParsingScopes parsingScopes, ParsingScope parent, FormulaRangeAddress address)
    parameters:
    - id: parsingScopes
      type: OfficeOpenXml.FormulaParsing.ParsingScopes
      description: ''
    - id: parent
      type: OfficeOpenXml.FormulaParsing.ParsingScope
      description: ''
    - id: address
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
      description: ''
    content.vb: Public Sub New(parsingScopes As ParsingScopes, parent As ParsingScope, address As FormulaRangeAddress)
  overload: OfficeOpenXml.FormulaParsing.ParsingScope.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ParsingScope.ScopeId
  commentId: P:OfficeOpenXml.FormulaParsing.ParsingScope.ScopeId
  id: ScopeId
  parent: OfficeOpenXml.FormulaParsing.ParsingScope
  langs:
  - csharp
  - vb
  name: ScopeId
  nameWithType: ParsingScope.ScopeId
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope.ScopeId
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ParsingScope.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ScopeId
    path: ../src/EPPlus/FormulaParsing/ParsingScope.cs
    startLine: 55
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nId of the scope.\n"
  example: []
  syntax:
    content: public Guid ScopeId { get; }
    parameters: []
    return:
      type: System.Guid
    content.vb: Public ReadOnly Property ScopeId As Guid
  overload: OfficeOpenXml.FormulaParsing.ParsingScope.ScopeId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ParsingScope.Parent
  commentId: P:OfficeOpenXml.FormulaParsing.ParsingScope.Parent
  id: Parent
  parent: OfficeOpenXml.FormulaParsing.ParsingScope
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: ParsingScope.Parent
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope.Parent
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ParsingScope.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Parent
    path: ../src/EPPlus/FormulaParsing/ParsingScope.cs
    startLine: 60
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nThe calling scope.\n"
  example: []
  syntax:
    content: public ParsingScope Parent { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.ParsingScope
    content.vb: Public ReadOnly Property Parent As ParsingScope
  overload: OfficeOpenXml.FormulaParsing.ParsingScope.Parent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ParsingScope.Address
  commentId: P:OfficeOpenXml.FormulaParsing.ParsingScope.Address
  id: Address
  parent: OfficeOpenXml.FormulaParsing.ParsingScope
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: ParsingScope.Address
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope.Address
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ParsingScope.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Address
    path: ../src/EPPlus/FormulaParsing/ParsingScope.cs
    startLine: 65
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nThe address of the cell currently beeing parsed.\n"
  example: []
  syntax:
    content: public FormulaRangeAddress Address { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    content.vb: Public ReadOnly Property Address As FormulaRangeAddress
  overload: OfficeOpenXml.FormulaParsing.ParsingScope.Address*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ParsingScope.IsSubtotal
  commentId: P:OfficeOpenXml.FormulaParsing.ParsingScope.IsSubtotal
  id: IsSubtotal
  parent: OfficeOpenXml.FormulaParsing.ParsingScope
  langs:
  - csharp
  - vb
  name: IsSubtotal
  nameWithType: ParsingScope.IsSubtotal
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope.IsSubtotal
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ParsingScope.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsSubtotal
    path: ../src/EPPlus/FormulaParsing/ParsingScope.cs
    startLine: 70
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nTrue if the current scope is a Subtotal function being executed.\n"
  example: []
  syntax:
    content: public bool IsSubtotal { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsSubtotal As Boolean
  overload: OfficeOpenXml.FormulaParsing.ParsingScope.IsSubtotal*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ParsingScope.Dispose
  commentId: M:OfficeOpenXml.FormulaParsing.ParsingScope.Dispose
  id: Dispose
  parent: OfficeOpenXml.FormulaParsing.ParsingScope
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ParsingScope.Dispose()
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope.Dispose()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ParsingScope.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Dispose
    path: ../src/EPPlus/FormulaParsing/ParsingScope.cs
    startLine: 75
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nDisposes this instance\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: OfficeOpenXml.FormulaParsing.ParsingScope.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: OfficeOpenXml.FormulaParsing
  commentId: N:OfficeOpenXml.FormulaParsing
  name: OfficeOpenXml.FormulaParsing
  nameWithType: OfficeOpenXml.FormulaParsing
  fullName: OfficeOpenXml.FormulaParsing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.ParsingScope.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ParsingScope.#ctor
  name: ParsingScope
  nameWithType: ParsingScope.ParsingScope
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope.ParsingScope
- uid: OfficeOpenXml.FormulaParsing.ParsingScopes
  commentId: T:OfficeOpenXml.FormulaParsing.ParsingScopes
  parent: OfficeOpenXml.FormulaParsing
  name: ParsingScopes
  nameWithType: ParsingScopes
  fullName: OfficeOpenXml.FormulaParsing.ParsingScopes
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: FormulaRangeAddress
  nameWithType: FormulaRangeAddress
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
- uid: OfficeOpenXml.FormulaParsing.ParsingScope
  commentId: T:OfficeOpenXml.FormulaParsing.ParsingScope
  parent: OfficeOpenXml.FormulaParsing
  name: ParsingScope
  nameWithType: ParsingScope
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope
- uid: OfficeOpenXml.FormulaParsing.ParsingScope.ScopeId*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ParsingScope.ScopeId
  name: ScopeId
  nameWithType: ParsingScope.ScopeId
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope.ScopeId
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: OfficeOpenXml.FormulaParsing.ParsingScope.Parent*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ParsingScope.Parent
  name: Parent
  nameWithType: ParsingScope.Parent
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope.Parent
- uid: OfficeOpenXml.FormulaParsing.ParsingScope.Address*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ParsingScope.Address
  name: Address
  nameWithType: ParsingScope.Address
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope.Address
- uid: OfficeOpenXml.FormulaParsing.ParsingScope.IsSubtotal*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ParsingScope.IsSubtotal
  name: IsSubtotal
  nameWithType: ParsingScope.IsSubtotal
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope.IsSubtotal
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.ParsingScope.Dispose*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ParsingScope.Dispose
  name: Dispose
  nameWithType: ParsingScope.Dispose
  fullName: OfficeOpenXml.FormulaParsing.ParsingScope.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
