### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.IAddressInfo
  commentId: T:OfficeOpenXml.FormulaParsing.IAddressInfo
  id: IAddressInfo
  parent: OfficeOpenXml.FormulaParsing
  children:
  - OfficeOpenXml.FormulaParsing.IAddressInfo.Address
  - OfficeOpenXml.FormulaParsing.IAddressInfo.Addresses
  langs:
  - csharp
  - vb
  name: IAddressInfo
  nameWithType: IAddressInfo
  fullName: OfficeOpenXml.FormulaParsing.IAddressInfo
  type: Interface
  source:
    remote:
      path: src/EPPlus/FormulaParsing/IRangeInfo.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IAddressInfo
    path: ../src/EPPlus/FormulaParsing/IRangeInfo.cs
    startLine: 95
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nAddress info\n"
  example: []
  syntax:
    content: public interface IAddressInfo
    content.vb: Public Interface IAddressInfo
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: OfficeOpenXml.FormulaParsing.IAddressInfo.Address
  commentId: P:OfficeOpenXml.FormulaParsing.IAddressInfo.Address
  id: Address
  parent: OfficeOpenXml.FormulaParsing.IAddressInfo
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: IAddressInfo.Address
  fullName: OfficeOpenXml.FormulaParsing.IAddressInfo.Address
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/IRangeInfo.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Address
    path: ../src/EPPlus/FormulaParsing/IRangeInfo.cs
    startLine: 100
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nThe address.\n"
  example: []
  syntax:
    content: FormulaRangeAddress Address { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    content.vb: ReadOnly Property Address As FormulaRangeAddress
  overload: OfficeOpenXml.FormulaParsing.IAddressInfo.Address*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.IAddressInfo.Addresses
  commentId: P:OfficeOpenXml.FormulaParsing.IAddressInfo.Addresses
  id: Addresses
  parent: OfficeOpenXml.FormulaParsing.IAddressInfo
  langs:
  - csharp
  - vb
  name: Addresses
  nameWithType: IAddressInfo.Addresses
  fullName: OfficeOpenXml.FormulaParsing.IAddressInfo.Addresses
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/IRangeInfo.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Addresses
    path: ../src/EPPlus/FormulaParsing/IRangeInfo.cs
    startLine: 104
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing
  summary: "\nIf the address contains commaseparated addresses, this array contains the individual addresses.\n"
  example: []
  syntax:
    content: FormulaRangeAddress[] Addresses { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress[]
    content.vb: ReadOnly Property Addresses As FormulaRangeAddress()
  overload: OfficeOpenXml.FormulaParsing.IAddressInfo.Addresses*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: OfficeOpenXml.FormulaParsing
  commentId: N:OfficeOpenXml.FormulaParsing
  name: OfficeOpenXml.FormulaParsing
  nameWithType: OfficeOpenXml.FormulaParsing
  fullName: OfficeOpenXml.FormulaParsing
- uid: OfficeOpenXml.FormulaParsing.IAddressInfo.Address*
  commentId: Overload:OfficeOpenXml.FormulaParsing.IAddressInfo.Address
  name: Address
  nameWithType: IAddressInfo.Address
  fullName: OfficeOpenXml.FormulaParsing.IAddressInfo.Address
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: FormulaRangeAddress
  nameWithType: FormulaRangeAddress
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
- uid: OfficeOpenXml.FormulaParsing.IAddressInfo.Addresses*
  commentId: Overload:OfficeOpenXml.FormulaParsing.IAddressInfo.Addresses
  name: Addresses
  nameWithType: IAddressInfo.Addresses
  fullName: OfficeOpenXml.FormulaParsing.IAddressInfo.Addresses
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress[]
  isExternal: true
  name: FormulaRangeAddress[]
  nameWithType: FormulaRangeAddress[]
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress[]
  nameWithType.vb: FormulaRangeAddress()
  fullName.vb: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress()
  name.vb: FormulaRangeAddress()
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    name: FormulaRangeAddress
    nameWithType: FormulaRangeAddress
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    name: FormulaRangeAddress
    nameWithType: FormulaRangeAddress
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  - name: ()
    nameWithType: ()
    fullName: ()
