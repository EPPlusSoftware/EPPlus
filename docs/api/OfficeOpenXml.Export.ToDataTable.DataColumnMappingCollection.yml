### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection
  commentId: T:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection
  id: DataColumnMappingCollection
  parent: OfficeOpenXml.Export.ToDataTable
  children:
  - OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.Data.DataColumn)
  - OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.Data.DataColumn,System.Func{System.Object,System.Object})
  - OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String)
  - OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Boolean)
  - OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Func{System.Object,System.Object})
  - OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type)
  - OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type,System.Boolean)
  - OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type,System.Boolean,System.Func{System.Object,System.Object})
  langs:
  - csharp
  - vb
  name: DataColumnMappingCollection
  nameWithType: DataColumnMappingCollection
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection
  type: Class
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: DataColumnMappingCollection
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
    startLine: 23
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nA collection of <xref href=\"OfficeOpenXml.Export.ToDataTable.DataColumnMapping\" data-throw-if-not-resolved=\"false\"></xref>s that will be used when reading data from the source range.\n"
  example: []
  syntax:
    content: 'public class DataColumnMappingCollection : List<DataColumnMapping>, IList<DataColumnMapping>, ICollection<DataColumnMapping>, IReadOnlyList<DataColumnMapping>, IReadOnlyCollection<DataColumnMapping>, IEnumerable<DataColumnMapping>, IList, ICollection, IEnumerable'
    content.vb: >-
      Public Class DataColumnMappingCollection
          Inherits List(Of DataColumnMapping)
          Implements IList(Of DataColumnMapping), ICollection(Of DataColumnMapping), IReadOnlyList(Of DataColumnMapping), IReadOnlyCollection(Of DataColumnMapping), IEnumerable(Of DataColumnMapping), IList, ICollection, IEnumerable
  inheritance:
  - System.Object
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  implements:
  - System.Collections.Generic.IList{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  - System.Collections.Generic.ICollection{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  - System.Collections.Generic.IReadOnlyList{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  - System.Collections.Generic.IReadOnlyCollection{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#get_Item(System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#set_Item(System.Int32,System.Object)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Add(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.AddRange(System.Collections.Generic.IEnumerable{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.AsReadOnly
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.BinarySearch(System.Int32,System.Int32,OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Collections.Generic.IComparer{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.BinarySearch(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.BinarySearch(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Collections.Generic.IComparer{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Clear
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Contains(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.ConvertAll``1(System.Converter{OfficeOpenXml.Export.ToDataTable.DataColumnMapping,{TOutput}})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.CopyTo(System.Int32,OfficeOpenXml.Export.ToDataTable.DataColumnMapping[],System.Int32,System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.CopyTo(OfficeOpenXml.Export.ToDataTable.DataColumnMapping[])
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.CopyTo(OfficeOpenXml.Export.ToDataTable.DataColumnMapping[],System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.EnsureCapacity(System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Exists(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Find(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindAll(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindIndex(System.Int32,System.Int32,System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindIndex(System.Int32,System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindIndex(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindLast(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindLastIndex(System.Int32,System.Int32,System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindLastIndex(System.Int32,System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindLastIndex(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.ForEach(System.Action{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.GetEnumerator
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Int32,System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Insert(System.Int32,OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Int32,System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Remove(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.RemoveAll(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.RemoveAt(System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Reverse
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Sort
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Sort(System.Collections.Generic.IComparer{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Sort(System.Comparison{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Remove(System.Object)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.ToArray
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.TrimExcess
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.TrueForAll(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Capacity
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Count
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Item(System.Int32)
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Item(System.Int32)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.Data.DataColumn)
  commentId: M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.Data.DataColumn)
  id: Add(System.Int32,System.Data.DataColumn)
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Add(Int32, DataColumn)
  nameWithType: DataColumnMappingCollection.Add(Int32, DataColumn)
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32, System.Data.DataColumn)
  type: Method
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Add
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
    startLine: 39
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nAdds a <xref href=\"OfficeOpenXml.Export.ToDataTable.DataColumnMapping\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Add(int zeroBasedIndexInRange, DataColumn dataColumn)
    parameters:
    - id: zeroBasedIndexInRange
      type: System.Int32
      description: Zero based index of the column in the source range
    - id: dataColumn
      type: System.Data.DataColumn
      description: The destination <xref href="System.Data.DataColumn" data-throw-if-not-resolved="false"></xref> in the <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Add(zeroBasedIndexInRange As Integer, dataColumn As DataColumn)
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.Data.DataColumn,System.Func{System.Object,System.Object})
  commentId: M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.Data.DataColumn,System.Func{System.Object,System.Object})
  id: Add(System.Int32,System.Data.DataColumn,System.Func{System.Object,System.Object})
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Add(Int32, DataColumn, Func<Object, Object>)
  nameWithType: DataColumnMappingCollection.Add(Int32, DataColumn, Func<Object, Object>)
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32, System.Data.DataColumn, System.Func<System.Object, System.Object>)
  type: Method
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Add
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
    startLine: 51
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nAdds a <xref href=\"OfficeOpenXml.Export.ToDataTable.DataColumnMapping\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Add(int zeroBasedIndexInRange, DataColumn dataColumn, Func<object, object> transformCellValueFunc)
    parameters:
    - id: zeroBasedIndexInRange
      type: System.Int32
      description: Zero based index of the column in the source range
    - id: dataColumn
      type: System.Data.DataColumn
      description: The destination <xref href="System.Data.DataColumn" data-throw-if-not-resolved="false"></xref> in the <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>
    - id: transformCellValueFunc
      type: System.Func{System.Object,System.Object}
      description: A function that casts/transforms the value before it is written to the <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Add(zeroBasedIndexInRange As Integer, dataColumn As DataColumn, transformCellValueFunc As Func(Of Object, Object))
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add*
  seealso:
  - linkId: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue
    commentId: P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue
  nameWithType.vb: DataColumnMappingCollection.Add(Int32, DataColumn, Func(Of Object, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32, System.Data.DataColumn, System.Func(Of System.Object, System.Object))
  name.vb: Add(Int32, DataColumn, Func(Of Object, Object))
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String)
  commentId: M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String)
  id: Add(System.Int32,System.String)
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Add(Int32, String)
  nameWithType: DataColumnMappingCollection.Add(Int32, String)
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Add
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
    startLine: 67
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nAdds a <xref href=\"OfficeOpenXml.Export.ToDataTable.DataColumnMapping\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Add(int zeroBasedIndexInRange, string columnName)
    parameters:
    - id: zeroBasedIndexInRange
      type: System.Int32
      description: Zero based index of the column in the source range
    - id: columnName
      type: System.String
      description: Name of the <xref href="System.Data.DataColumn" data-throw-if-not-resolved="false"></xref> in the <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Add(zeroBasedIndexInRange As Integer, columnName As String)
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Boolean)
  commentId: M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Boolean)
  id: Add(System.Int32,System.String,System.Boolean)
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Add(Int32, String, Boolean)
  nameWithType: DataColumnMappingCollection.Add(Int32, String, Boolean)
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Add
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
    startLine: 78
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nAdds a <xref href=\"OfficeOpenXml.Export.ToDataTable.DataColumnMapping\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Add(int zeroBasedIndexInRange, string columnName, bool allowNull)
    parameters:
    - id: zeroBasedIndexInRange
      type: System.Int32
      description: Zero based index of the column in the source range
    - id: columnName
      type: System.String
      description: Name of the <xref href="System.Data.DataColumn" data-throw-if-not-resolved="false"></xref> in the <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>
    - id: allowNull
      type: System.Boolean
      description: Indicates if values read from the source range can be null
    content.vb: Public Sub Add(zeroBasedIndexInRange As Integer, columnName As String, allowNull As Boolean)
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Func{System.Object,System.Object})
  commentId: M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Func{System.Object,System.Object})
  id: Add(System.Int32,System.String,System.Func{System.Object,System.Object})
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Add(Int32, String, Func<Object, Object>)
  nameWithType: DataColumnMappingCollection.Add(Int32, String, Func<Object, Object>)
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32, System.String, System.Func<System.Object, System.Object>)
  type: Method
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Add
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
    startLine: 89
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nAdds a <xref href=\"OfficeOpenXml.Export.ToDataTable.DataColumnMapping\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Add(int zeroBasedIndexInRange, string columnName, Func<object, object> transformCellValueFunc)
    parameters:
    - id: zeroBasedIndexInRange
      type: System.Int32
      description: Zero based index of the column in the source range
    - id: columnName
      type: System.String
      description: Name of the <xref href="System.Data.DataColumn" data-throw-if-not-resolved="false"></xref> in the <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>
    - id: transformCellValueFunc
      type: System.Func{System.Object,System.Object}
      description: A function that casts/transforms the value before it is written to the <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Add(zeroBasedIndexInRange As Integer, columnName As String, transformCellValueFunc As Func(Of Object, Object))
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add*
  nameWithType.vb: DataColumnMappingCollection.Add(Int32, String, Func(Of Object, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32, System.String, System.Func(Of System.Object, System.Object))
  name.vb: Add(Int32, String, Func(Of Object, Object))
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type)
  commentId: M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type)
  id: Add(System.Int32,System.String,System.Type)
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Add(Int32, String, Type)
  nameWithType: DataColumnMappingCollection.Add(Int32, String, Type)
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32, System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Add
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
    startLine: 100
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nAdds a <xref href=\"OfficeOpenXml.Export.ToDataTable.DataColumnMapping\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Add(int zeroBasedIndexInRange, string columnName, Type columnDataType)
    parameters:
    - id: zeroBasedIndexInRange
      type: System.Int32
      description: Zero based index of the column in the source range
    - id: columnName
      type: System.String
      description: Name of the <xref href="System.Data.DataColumn" data-throw-if-not-resolved="false"></xref> in the <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>
    - id: columnDataType
      type: System.Type
      description: <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="System.Data.DataColumn" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Add(zeroBasedIndexInRange As Integer, columnName As String, columnDataType As Type)
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type,System.Boolean)
  commentId: M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type,System.Boolean)
  id: Add(System.Int32,System.String,System.Type,System.Boolean)
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Add(Int32, String, Type, Boolean)
  nameWithType: DataColumnMappingCollection.Add(Int32, String, Type, Boolean)
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32, System.String, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Add
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
    startLine: 112
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nAdds a <xref href=\"OfficeOpenXml.Export.ToDataTable.DataColumnMapping\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Add(int zeroBasedIndexInRange, string columnName, Type columnDataType, bool allowNull)
    parameters:
    - id: zeroBasedIndexInRange
      type: System.Int32
      description: Zero based index of the column in the source range
    - id: columnName
      type: System.String
      description: Name of the <xref href="System.Data.DataColumn" data-throw-if-not-resolved="false"></xref> in the <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>
    - id: columnDataType
      type: System.Type
      description: <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="System.Data.DataColumn" data-throw-if-not-resolved="false"></xref>
    - id: allowNull
      type: System.Boolean
      description: Indicates if values read from the source range can be null
    content.vb: Public Sub Add(zeroBasedIndexInRange As Integer, columnName As String, columnDataType As Type, allowNull As Boolean)
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type,System.Boolean,System.Func{System.Object,System.Object})
  commentId: M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type,System.Boolean,System.Func{System.Object,System.Object})
  id: Add(System.Int32,System.String,System.Type,System.Boolean,System.Func{System.Object,System.Object})
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection
  langs:
  - csharp
  - vb
  name: Add(Int32, String, Type, Boolean, Func<Object, Object>)
  nameWithType: DataColumnMappingCollection.Add(Int32, String, Type, Boolean, Func<Object, Object>)
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32, System.String, System.Type, System.Boolean, System.Func<System.Object, System.Object>)
  type: Method
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Add
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMappingCollection.cs
    startLine: 126
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nAdds a <xref href=\"OfficeOpenXml.Export.ToDataTable.DataColumnMapping\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Add(int zeroBasedIndexInRange, string columnName, Type columnDataType, bool allowNull, Func<object, object> transformCellValueFunc)
    parameters:
    - id: zeroBasedIndexInRange
      type: System.Int32
      description: Zero based index of the column in the source range
    - id: columnName
      type: System.String
      description: Name of the <xref href="System.Data.DataColumn" data-throw-if-not-resolved="false"></xref> in the <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>
    - id: columnDataType
      type: System.Type
      description: <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="System.Data.DataColumn" data-throw-if-not-resolved="false"></xref>
    - id: allowNull
      type: System.Boolean
      description: Indicates if values read from the source range can be null
    - id: transformCellValueFunc
      type: System.Func{System.Object,System.Object}
      description: A function that casts/transforms the value before it is written to the <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Add(zeroBasedIndexInRange As Integer, columnName As String, columnDataType As Type, allowNull As Boolean, transformCellValueFunc As Func(Of Object, Object))
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add*
  seealso:
  - linkId: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue
    commentId: P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue
  nameWithType.vb: DataColumnMappingCollection.Add(Int32, String, Type, Boolean, Func(Of Object, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32, System.String, System.Type, System.Boolean, System.Func(Of System.Object, System.Object))
  name.vb: Add(Int32, String, Type, Boolean, Func(Of Object, Object))
references:
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  commentId: T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  name: DataColumnMapping
  nameWithType: DataColumnMapping
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
- uid: OfficeOpenXml.Export.ToDataTable
  commentId: N:OfficeOpenXml.Export.ToDataTable
  name: OfficeOpenXml.Export.ToDataTable
  nameWithType: OfficeOpenXml.Export.ToDataTable
  fullName: OfficeOpenXml.Export.ToDataTable
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  commentId: T:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DataColumnMapping>
  nameWithType: List<DataColumnMapping>
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>
  nameWithType.vb: List(Of DataColumnMapping)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  name.vb: List(Of DataColumnMapping)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  commentId: T:System.Collections.Generic.IList{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<DataColumnMapping>
  nameWithType: IList<DataColumnMapping>
  fullName: System.Collections.Generic.IList<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>
  nameWithType.vb: IList(Of DataColumnMapping)
  fullName.vb: System.Collections.Generic.IList(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  name.vb: IList(Of DataColumnMapping)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  commentId: T:System.Collections.Generic.ICollection{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<DataColumnMapping>
  nameWithType: ICollection<DataColumnMapping>
  fullName: System.Collections.Generic.ICollection<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>
  nameWithType.vb: ICollection(Of DataColumnMapping)
  fullName.vb: System.Collections.Generic.ICollection(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  name.vb: ICollection(Of DataColumnMapping)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  commentId: T:System.Collections.Generic.IReadOnlyList{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<DataColumnMapping>
  nameWithType: IReadOnlyList<DataColumnMapping>
  fullName: System.Collections.Generic.IReadOnlyList<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>
  nameWithType.vb: IReadOnlyList(Of DataColumnMapping)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  name.vb: IReadOnlyList(Of DataColumnMapping)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<DataColumnMapping>
  nameWithType: IReadOnlyCollection<DataColumnMapping>
  fullName: System.Collections.Generic.IReadOnlyCollection<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>
  nameWithType.vb: IReadOnlyCollection(Of DataColumnMapping)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  name.vb: IReadOnlyCollection(Of DataColumnMapping)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DataColumnMapping>
  nameWithType: IEnumerable<DataColumnMapping>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>
  nameWithType.vb: IEnumerable(Of DataColumnMapping)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  name.vb: IEnumerable(Of DataColumnMapping)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#get_Item(System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  name: IList.get_Item(Int32)
  nameWithType: List<DataColumnMapping>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<DataColumnMapping>.IList.get_Item
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of DataColumnMapping).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#set_Item(System.Int32,System.Object)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  name: IList.set_Item(Int32, Object)
  nameWithType: List<DataColumnMapping>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<DataColumnMapping>.IList.set_Item
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of DataColumnMapping).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Add(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Add(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Add(`0)
  name: Add(DataColumnMapping)
  nameWithType: List<DataColumnMapping>.Add(DataColumnMapping)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Add(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  nameWithType.vb: List(Of DataColumnMapping).Add(DataColumnMapping)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Add(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<DataColumnMapping>.Add
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of DataColumnMapping).Add
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.AddRange(System.Collections.Generic.IEnumerable{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.AddRange(System.Collections.Generic.IEnumerable{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  name: AddRange(IEnumerable<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.AddRange(IEnumerable<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.AddRange(System.Collections.Generic.IEnumerable<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).AddRange(IEnumerable(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).AddRange(System.Collections.Generic.IEnumerable(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: AddRange(IEnumerable(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<DataColumnMapping>.AddRange
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of DataColumnMapping).AddRange
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.AsReadOnly
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.AsReadOnly
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.AsReadOnly
  name: AsReadOnly()
  nameWithType: List<DataColumnMapping>.AsReadOnly()
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.AsReadOnly()
  nameWithType.vb: List(Of DataColumnMapping).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<DataColumnMapping>.AsReadOnly
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of DataColumnMapping).AsReadOnly
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.BinarySearch(System.Int32,System.Int32,OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Collections.Generic.IComparer{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.BinarySearch(System.Int32,System.Int32,OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Collections.Generic.IComparer{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(Int32, Int32, DataColumnMapping, IComparer<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.BinarySearch(Int32, Int32, DataColumnMapping, IComparer<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.BinarySearch(System.Int32, System.Int32, OfficeOpenXml.Export.ToDataTable.DataColumnMapping, System.Collections.Generic.IComparer<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).BinarySearch(Int32, Int32, DataColumnMapping, IComparer(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).BinarySearch(System.Int32, System.Int32, OfficeOpenXml.Export.ToDataTable.DataColumnMapping, System.Collections.Generic.IComparer(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: BinarySearch(Int32, Int32, DataColumnMapping, IComparer(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<DataColumnMapping>.BinarySearch
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of DataColumnMapping).BinarySearch
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.BinarySearch(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.BinarySearch(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.BinarySearch(`0)
  name: BinarySearch(DataColumnMapping)
  nameWithType: List<DataColumnMapping>.BinarySearch(DataColumnMapping)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.BinarySearch(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  nameWithType.vb: List(Of DataColumnMapping).BinarySearch(DataColumnMapping)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).BinarySearch(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<DataColumnMapping>.BinarySearch
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of DataColumnMapping).BinarySearch
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.BinarySearch(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Collections.Generic.IComparer{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.BinarySearch(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Collections.Generic.IComparer{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(DataColumnMapping, IComparer<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.BinarySearch(DataColumnMapping, IComparer<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.BinarySearch(OfficeOpenXml.Export.ToDataTable.DataColumnMapping, System.Collections.Generic.IComparer<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).BinarySearch(DataColumnMapping, IComparer(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).BinarySearch(OfficeOpenXml.Export.ToDataTable.DataColumnMapping, System.Collections.Generic.IComparer(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: BinarySearch(DataColumnMapping, IComparer(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<DataColumnMapping>.BinarySearch
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of DataColumnMapping).BinarySearch
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Clear
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Clear
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Clear
  name: Clear()
  nameWithType: List<DataColumnMapping>.Clear()
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Clear()
  nameWithType.vb: List(Of DataColumnMapping).Clear()
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<DataColumnMapping>.Clear
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of DataColumnMapping).Clear
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Contains(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Contains(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Contains(`0)
  name: Contains(DataColumnMapping)
  nameWithType: List<DataColumnMapping>.Contains(DataColumnMapping)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Contains(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  nameWithType.vb: List(Of DataColumnMapping).Contains(DataColumnMapping)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Contains(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<DataColumnMapping>.Contains
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of DataColumnMapping).Contains
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.ConvertAll``1(System.Converter{OfficeOpenXml.Export.ToDataTable.DataColumnMapping,{TOutput}})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.ConvertAll``1(System.Converter{OfficeOpenXml.Export.ToDataTable.DataColumnMapping,``0})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  name: ConvertAll<TOutput>(Converter<DataColumnMapping, TOutput>)
  nameWithType: List<DataColumnMapping>.ConvertAll<TOutput>(Converter<DataColumnMapping, TOutput>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.ConvertAll<TOutput>(System.Converter<OfficeOpenXml.Export.ToDataTable.DataColumnMapping, TOutput>)
  nameWithType.vb: List(Of DataColumnMapping).ConvertAll(Of TOutput)(Converter(Of DataColumnMapping, TOutput))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).ConvertAll(Of TOutput)(System.Converter(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of DataColumnMapping, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<DataColumnMapping>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of DataColumnMapping).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.CopyTo(System.Int32,OfficeOpenXml.Export.ToDataTable.DataColumnMapping[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.CopyTo(System.Int32,OfficeOpenXml.Export.ToDataTable.DataColumnMapping[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  name: CopyTo(Int32, DataColumnMapping[], Int32, Int32)
  nameWithType: List<DataColumnMapping>.CopyTo(Int32, DataColumnMapping[], Int32, Int32)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.CopyTo(System.Int32, OfficeOpenXml.Export.ToDataTable.DataColumnMapping[], System.Int32, System.Int32)
  nameWithType.vb: List(Of DataColumnMapping).CopyTo(Int32, DataColumnMapping(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).CopyTo(System.Int32, OfficeOpenXml.Export.ToDataTable.DataColumnMapping(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, DataColumnMapping(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<DataColumnMapping>.CopyTo
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of DataColumnMapping).CopyTo
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.CopyTo(OfficeOpenXml.Export.ToDataTable.DataColumnMapping[])
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.CopyTo(OfficeOpenXml.Export.ToDataTable.DataColumnMapping[])
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.CopyTo(`0[])
  name: CopyTo(DataColumnMapping[])
  nameWithType: List<DataColumnMapping>.CopyTo(DataColumnMapping[])
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.CopyTo(OfficeOpenXml.Export.ToDataTable.DataColumnMapping[])
  nameWithType.vb: List(Of DataColumnMapping).CopyTo(DataColumnMapping())
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).CopyTo(OfficeOpenXml.Export.ToDataTable.DataColumnMapping())
  name.vb: CopyTo(DataColumnMapping())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<DataColumnMapping>.CopyTo
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of DataColumnMapping).CopyTo
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.CopyTo(OfficeOpenXml.Export.ToDataTable.DataColumnMapping[],System.Int32)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.CopyTo(OfficeOpenXml.Export.ToDataTable.DataColumnMapping[],System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  name: CopyTo(DataColumnMapping[], Int32)
  nameWithType: List<DataColumnMapping>.CopyTo(DataColumnMapping[], Int32)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.CopyTo(OfficeOpenXml.Export.ToDataTable.DataColumnMapping[], System.Int32)
  nameWithType.vb: List(Of DataColumnMapping).CopyTo(DataColumnMapping(), Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).CopyTo(OfficeOpenXml.Export.ToDataTable.DataColumnMapping(), System.Int32)
  name.vb: CopyTo(DataColumnMapping(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<DataColumnMapping>.CopyTo
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of DataColumnMapping).CopyTo
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.EnsureCapacity(System.Int32)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.EnsureCapacity(System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.EnsureCapacity(System.Int32)
  name: EnsureCapacity(Int32)
  nameWithType: List<DataColumnMapping>.EnsureCapacity(Int32)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.EnsureCapacity(System.Int32)
  nameWithType.vb: List(Of DataColumnMapping).EnsureCapacity(Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).EnsureCapacity(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.EnsureCapacity(System.Int32)
    name: EnsureCapacity
    nameWithType: List<DataColumnMapping>.EnsureCapacity
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.EnsureCapacity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.EnsureCapacity(System.Int32)
    name: EnsureCapacity
    nameWithType: List(Of DataColumnMapping).EnsureCapacity
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).EnsureCapacity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Exists(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Exists(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  name: Exists(Predicate<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.Exists(Predicate<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Exists(System.Predicate<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).Exists(Predicate(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Exists(System.Predicate(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: Exists(Predicate(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<DataColumnMapping>.Exists
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of DataColumnMapping).Exists
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Find(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Find(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  name: Find(Predicate<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.Find(Predicate<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Find(System.Predicate<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).Find(Predicate(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Find(System.Predicate(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: Find(Predicate(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<DataColumnMapping>.Find
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of DataColumnMapping).Find
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindAll(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindAll(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  name: FindAll(Predicate<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.FindAll(Predicate<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindAll(System.Predicate<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).FindAll(Predicate(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindAll(System.Predicate(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: FindAll(Predicate(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<DataColumnMapping>.FindAll
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of DataColumnMapping).FindAll
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindIndex(System.Int32,System.Int32,System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindIndex(System.Int32,System.Int32,System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Int32, Predicate<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.FindIndex(Int32, Int32, Predicate<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindIndex(System.Int32, System.Int32, System.Predicate<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).FindIndex(Int32, Int32, Predicate(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindIndex(System.Int32, System.Int32, System.Predicate(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: FindIndex(Int32, Int32, Predicate(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<DataColumnMapping>.FindIndex
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of DataColumnMapping).FindIndex
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindIndex(System.Int32,System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindIndex(System.Int32,System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Predicate<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.FindIndex(Int32, Predicate<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindIndex(System.Int32, System.Predicate<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).FindIndex(Int32, Predicate(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindIndex(System.Int32, System.Predicate(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: FindIndex(Int32, Predicate(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<DataColumnMapping>.FindIndex
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of DataColumnMapping).FindIndex
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindIndex(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindIndex(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  name: FindIndex(Predicate<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.FindIndex(Predicate<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindIndex(System.Predicate<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).FindIndex(Predicate(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindIndex(System.Predicate(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: FindIndex(Predicate(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<DataColumnMapping>.FindIndex
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of DataColumnMapping).FindIndex
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindLast(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindLast(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  name: FindLast(Predicate<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.FindLast(Predicate<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindLast(System.Predicate<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).FindLast(Predicate(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindLast(System.Predicate(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: FindLast(Predicate(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<DataColumnMapping>.FindLast
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of DataColumnMapping).FindLast
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindLastIndex(System.Int32,System.Int32,System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindLastIndex(System.Int32,System.Int32,System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Int32, Predicate<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.FindLastIndex(Int32, Int32, Predicate<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindLastIndex(System.Int32, System.Int32, System.Predicate<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).FindLastIndex(Int32, Int32, Predicate(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<DataColumnMapping>.FindLastIndex
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of DataColumnMapping).FindLastIndex
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindLastIndex(System.Int32,System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindLastIndex(System.Int32,System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Predicate<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.FindLastIndex(Int32, Predicate<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindLastIndex(System.Int32, System.Predicate<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).FindLastIndex(Int32, Predicate(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindLastIndex(System.Int32, System.Predicate(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: FindLastIndex(Int32, Predicate(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<DataColumnMapping>.FindLastIndex
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of DataColumnMapping).FindLastIndex
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindLastIndex(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.FindLastIndex(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  name: FindLastIndex(Predicate<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.FindLastIndex(Predicate<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindLastIndex(System.Predicate<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).FindLastIndex(Predicate(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindLastIndex(System.Predicate(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: FindLastIndex(Predicate(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<DataColumnMapping>.FindLastIndex
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of DataColumnMapping).FindLastIndex
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.ForEach(System.Action{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.ForEach(System.Action{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  name: ForEach(Action<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.ForEach(Action<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.ForEach(System.Action<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).ForEach(Action(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).ForEach(System.Action(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: ForEach(Action(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<DataColumnMapping>.ForEach
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of DataColumnMapping).ForEach
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.GetEnumerator
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.GetEnumerator
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: List<DataColumnMapping>.GetEnumerator()
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.GetEnumerator()
  nameWithType.vb: List(Of DataColumnMapping).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<DataColumnMapping>.GetEnumerator
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of DataColumnMapping).GetEnumerator
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  name: GetRange(Int32, Int32)
  nameWithType: List<DataColumnMapping>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of DataColumnMapping).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<DataColumnMapping>.GetRange
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of DataColumnMapping).GetRange
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.IndexOf(`0)
  name: IndexOf(DataColumnMapping)
  nameWithType: List<DataColumnMapping>.IndexOf(DataColumnMapping)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  nameWithType.vb: List(Of DataColumnMapping).IndexOf(DataColumnMapping)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<DataColumnMapping>.IndexOf
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of DataColumnMapping).IndexOf
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Int32)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  name: IndexOf(DataColumnMapping, Int32)
  nameWithType: List<DataColumnMapping>.IndexOf(DataColumnMapping, Int32)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping, System.Int32)
  nameWithType.vb: List(Of DataColumnMapping).IndexOf(DataColumnMapping, Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<DataColumnMapping>.IndexOf
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of DataColumnMapping).IndexOf
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  name: IndexOf(DataColumnMapping, Int32, Int32)
  nameWithType: List<DataColumnMapping>.IndexOf(DataColumnMapping, Int32, Int32)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping, System.Int32, System.Int32)
  nameWithType.vb: List(Of DataColumnMapping).IndexOf(DataColumnMapping, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).IndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<DataColumnMapping>.IndexOf
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of DataColumnMapping).IndexOf
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Insert(System.Int32,OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Insert(System.Int32,OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  name: Insert(Int32, DataColumnMapping)
  nameWithType: List<DataColumnMapping>.Insert(Int32, DataColumnMapping)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Insert(System.Int32, OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  nameWithType.vb: List(Of DataColumnMapping).Insert(Int32, DataColumnMapping)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Insert(System.Int32, OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<DataColumnMapping>.Insert
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of DataColumnMapping).Insert
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  name: InsertRange(Int32, IEnumerable<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.InsertRange(Int32, IEnumerable<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).InsertRange(Int32, IEnumerable(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: InsertRange(Int32, IEnumerable(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<DataColumnMapping>.InsertRange
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of DataColumnMapping).InsertRange
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0)
  name: LastIndexOf(DataColumnMapping)
  nameWithType: List<DataColumnMapping>.LastIndexOf(DataColumnMapping)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  nameWithType.vb: List(Of DataColumnMapping).LastIndexOf(DataColumnMapping)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<DataColumnMapping>.LastIndexOf
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of DataColumnMapping).LastIndexOf
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Int32)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  name: LastIndexOf(DataColumnMapping, Int32)
  nameWithType: List<DataColumnMapping>.LastIndexOf(DataColumnMapping, Int32)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping, System.Int32)
  nameWithType.vb: List(Of DataColumnMapping).LastIndexOf(DataColumnMapping, Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<DataColumnMapping>.LastIndexOf
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of DataColumnMapping).LastIndexOf
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  name: LastIndexOf(DataColumnMapping, Int32, Int32)
  nameWithType: List<DataColumnMapping>.LastIndexOf(DataColumnMapping, Int32, Int32)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping, System.Int32, System.Int32)
  nameWithType.vb: List(Of DataColumnMapping).LastIndexOf(DataColumnMapping, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).LastIndexOf(OfficeOpenXml.Export.ToDataTable.DataColumnMapping, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<DataColumnMapping>.LastIndexOf
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of DataColumnMapping).LastIndexOf
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Remove(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Remove(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Remove(`0)
  name: Remove(DataColumnMapping)
  nameWithType: List<DataColumnMapping>.Remove(DataColumnMapping)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Remove(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  nameWithType.vb: List(Of DataColumnMapping).Remove(DataColumnMapping)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Remove(OfficeOpenXml.Export.ToDataTable.DataColumnMapping)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<DataColumnMapping>.Remove
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of DataColumnMapping).Remove
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.RemoveAll(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.RemoveAll(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  name: RemoveAll(Predicate<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.RemoveAll(Predicate<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.RemoveAll(System.Predicate<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).RemoveAll(Predicate(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).RemoveAll(System.Predicate(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: RemoveAll(Predicate(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<DataColumnMapping>.RemoveAll
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of DataColumnMapping).RemoveAll
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: List<DataColumnMapping>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of DataColumnMapping).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<DataColumnMapping>.RemoveAt
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of DataColumnMapping).RemoveAt
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  name: RemoveRange(Int32, Int32)
  nameWithType: List<DataColumnMapping>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of DataColumnMapping).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<DataColumnMapping>.RemoveRange
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of DataColumnMapping).RemoveRange
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Reverse
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Reverse
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Reverse
  name: Reverse()
  nameWithType: List<DataColumnMapping>.Reverse()
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Reverse()
  nameWithType.vb: List(Of DataColumnMapping).Reverse()
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<DataColumnMapping>.Reverse
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of DataColumnMapping).Reverse
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  name: Reverse(Int32, Int32)
  nameWithType: List<DataColumnMapping>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of DataColumnMapping).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<DataColumnMapping>.Reverse
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of DataColumnMapping).Reverse
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Sort
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Sort
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Sort
  name: Sort()
  nameWithType: List<DataColumnMapping>.Sort()
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Sort()
  nameWithType.vb: List(Of DataColumnMapping).Sort()
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<DataColumnMapping>.Sort
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of DataColumnMapping).Sort
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Sort(System.Collections.Generic.IComparer{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Sort(System.Collections.Generic.IComparer{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  name: Sort(IComparer<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.Sort(IComparer<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Sort(System.Collections.Generic.IComparer<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).Sort(IComparer(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Sort(System.Collections.Generic.IComparer(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: Sort(IComparer(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<DataColumnMapping>.Sort
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of DataColumnMapping).Sort
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Sort(System.Comparison{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Sort(System.Comparison{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  name: Sort(Comparison<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.Sort(Comparison<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Sort(System.Comparison<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).Sort(Comparison(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Sort(System.Comparison(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: Sort(Comparison(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<DataColumnMapping>.Sort
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of DataColumnMapping).Sort
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  name: Sort(Int32, Int32, IComparer<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.Sort(Int32, Int32, IComparer<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).Sort(Int32, Int32, IComparer(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: Sort(Int32, Int32, IComparer(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<DataColumnMapping>.Sort
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of DataColumnMapping).Sort
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<DataColumnMapping>.GetEnumerator()
  nameWithType: List<DataColumnMapping>.IEnumerable<DataColumnMapping>.GetEnumerator()
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.Generic.IEnumerable<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.GetEnumerator()
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<DataColumnMapping>.GetEnumerator
    nameWithType: List<DataColumnMapping>.IEnumerable<DataColumnMapping>.GetEnumerator
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.Generic.IEnumerable<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of DataColumnMapping).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<DataColumnMapping>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<DataColumnMapping>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of DataColumnMapping).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: List<DataColumnMapping>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<DataColumnMapping>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of DataColumnMapping).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  name: IList.Add(Object)
  nameWithType: List<DataColumnMapping>.IList.Add(Object)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<DataColumnMapping>.IList.Add
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of DataColumnMapping).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  name: IList.Contains(Object)
  nameWithType: List<DataColumnMapping>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<DataColumnMapping>.IList.Contains
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of DataColumnMapping).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  name: IList.IndexOf(Object)
  nameWithType: List<DataColumnMapping>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<DataColumnMapping>.IList.IndexOf
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of DataColumnMapping).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  name: IList.Insert(Int32, Object)
  nameWithType: List<DataColumnMapping>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<DataColumnMapping>.IList.Insert
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of DataColumnMapping).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  name: IList.Remove(Object)
  nameWithType: List<DataColumnMapping>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<DataColumnMapping>.IList.Remove
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of DataColumnMapping).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.ToArray
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.ToArray
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.ToArray
  name: ToArray()
  nameWithType: List<DataColumnMapping>.ToArray()
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.ToArray()
  nameWithType.vb: List(Of DataColumnMapping).ToArray()
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<DataColumnMapping>.ToArray
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of DataColumnMapping).ToArray
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.TrimExcess
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.TrimExcess
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.TrimExcess
  name: TrimExcess()
  nameWithType: List<DataColumnMapping>.TrimExcess()
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.TrimExcess()
  nameWithType.vb: List(Of DataColumnMapping).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<DataColumnMapping>.TrimExcess
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of DataColumnMapping).TrimExcess
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.TrueForAll(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  commentId: M:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.TrueForAll(System.Predicate{OfficeOpenXml.Export.ToDataTable.DataColumnMapping})
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  name: TrueForAll(Predicate<DataColumnMapping>)
  nameWithType: List<DataColumnMapping>.TrueForAll(Predicate<DataColumnMapping>)
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.TrueForAll(System.Predicate<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>)
  nameWithType.vb: List(Of DataColumnMapping).TrueForAll(Predicate(Of DataColumnMapping))
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).TrueForAll(System.Predicate(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping))
  name.vb: TrueForAll(Predicate(Of DataColumnMapping))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<DataColumnMapping>.TrueForAll
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of DataColumnMapping).TrueForAll
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
    name: DataColumnMapping
    nameWithType: DataColumnMapping
    fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Capacity
  commentId: P:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Capacity
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Capacity
  name: Capacity
  nameWithType: List<DataColumnMapping>.Capacity
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Capacity
  nameWithType.vb: List(Of DataColumnMapping).Capacity
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Capacity
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Count
  commentId: P:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Count
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Count
  name: Count
  nameWithType: List<DataColumnMapping>.Count
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Count
  nameWithType.vb: List(Of DataColumnMapping).Count
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Count
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Item(System.Int32)
  commentId: P:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.Item(System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: List<DataColumnMapping>.Item[Int32]
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Item[System.Int32]
  nameWithType.vb: List(Of DataColumnMapping).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<DataColumnMapping>.Item
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of DataColumnMapping).Item
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<DataColumnMapping>.IsReadOnly
  nameWithType: List<DataColumnMapping>.ICollection<DataColumnMapping>.IsReadOnly
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.Generic.ICollection<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.IsReadOnly
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: List<DataColumnMapping>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: List<DataColumnMapping>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#IsFixedSize
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: List<DataColumnMapping>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#IsReadOnly
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: List<DataColumnMapping>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Generic.List{OfficeOpenXml.Export.ToDataTable.DataColumnMapping}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  name: IList.Item[Int32]
  nameWithType: List<DataColumnMapping>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of DataColumnMapping).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<DataColumnMapping>.IList.Item
    fullName: System.Collections.Generic.List<OfficeOpenXml.Export.ToDataTable.DataColumnMapping>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of DataColumnMapping).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of OfficeOpenXml.Export.ToDataTable.DataColumnMapping).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  isExternal: true
  name: IList.get_Item(Int32)
  nameWithType: List<T>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of T).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<T>.IList.get_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of T).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  isExternal: true
  name: IList.set_Item(Int32, Object)
  nameWithType: List<T>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<T>.IList.set_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of T).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Add(`0)
  commentId: M:System.Collections.Generic.List`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: List<T>.Add(T)
  fullName: System.Collections.Generic.List<T>.Add(T)
  nameWithType.vb: List(Of T).Add(T)
  fullName.vb: System.Collections.Generic.List(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<T>.Add
    fullName: System.Collections.Generic.List<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of T).Add
    fullName: System.Collections.Generic.List(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).AddRange(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<T>.AddRange
    fullName: System.Collections.Generic.List<T>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of T).AddRange
    fullName: System.Collections.Generic.List(Of T).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AsReadOnly
  commentId: M:System.Collections.Generic.List`1.AsReadOnly
  isExternal: true
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
  nameWithType.vb: List(Of T).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of T).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<T>.AsReadOnly
    fullName: System.Collections.Generic.List<T>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of T).AsReadOnly
    fullName: System.Collections.Generic.List(Of T).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(Int32, Int32, T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Int32, Int32, T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  isExternal: true
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
  nameWithType.vb: List(Of T).BinarySearch(T)
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Clear
  commentId: M:System.Collections.Generic.List`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
  nameWithType.vb: List(Of T).Clear()
  fullName.vb: System.Collections.Generic.List(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<T>.Clear
    fullName: System.Collections.Generic.List<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of T).Clear
    fullName: System.Collections.Generic.List(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Contains(`0)
  commentId: M:System.Collections.Generic.List`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
  nameWithType.vb: List(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.List(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<T>.Contains
    fullName: System.Collections.Generic.List<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of T).Contains
    fullName: System.Collections.Generic.List(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  commentId: M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  isExternal: true
  name: ConvertAll<TOutput>(Converter<T, TOutput>)
  nameWithType: List<T>.ConvertAll<TOutput>(Converter<T, TOutput>)
  fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>(System.Converter<T, TOutput>)
  nameWithType.vb: List(Of T).ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  fullName.vb: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)(System.Converter(Of T, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<T>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of T).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  isExternal: true
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
  nameWithType.vb: List(Of T).CopyTo(Int32, T(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, T(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  isExternal: true
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
  nameWithType.vb: List(Of T).CopyTo(T())
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T())
  name.vb: CopyTo(T())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: List<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: List(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.EnsureCapacity(System.Int32)
  commentId: M:System.Collections.Generic.List`1.EnsureCapacity(System.Int32)
  isExternal: true
  name: EnsureCapacity(Int32)
  nameWithType: List<T>.EnsureCapacity(Int32)
  fullName: System.Collections.Generic.List<T>.EnsureCapacity(System.Int32)
  nameWithType.vb: List(Of T).EnsureCapacity(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).EnsureCapacity(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.EnsureCapacity(System.Int32)
    name: EnsureCapacity
    nameWithType: List<T>.EnsureCapacity
    fullName: System.Collections.Generic.List<T>.EnsureCapacity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.EnsureCapacity(System.Int32)
    name: EnsureCapacity
    nameWithType: List(Of T).EnsureCapacity
    fullName: System.Collections.Generic.List(Of T).EnsureCapacity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  isExternal: true
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(System.Predicate<T>)
  nameWithType.vb: List(Of T).Exists(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Exists(System.Predicate(Of T))
  name.vb: Exists(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<T>.Exists
    fullName: System.Collections.Generic.List<T>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of T).Exists
    fullName: System.Collections.Generic.List(Of T).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  isExternal: true
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(System.Predicate<T>)
  nameWithType.vb: List(Of T).Find(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Find(System.Predicate(Of T))
  name.vb: Find(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<T>.Find
    fullName: System.Collections.Generic.List<T>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of T).Find
    fullName: System.Collections.Generic.List(Of T).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  isExternal: true
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindAll(System.Predicate(Of T))
  name.vb: FindAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<T>.FindAll
    fullName: System.Collections.Generic.List<T>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of T).FindAll
    fullName: System.Collections.Generic.List(Of T).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  isExternal: true
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Predicate(Of T))
  name.vb: FindIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  isExternal: true
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLast(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLast(System.Predicate(Of T))
  name.vb: FindLast(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<T>.FindLast
    fullName: System.Collections.Generic.List<T>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of T).FindLast
    fullName: System.Collections.Generic.List(Of T).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Predicate(Of T))
  name.vb: FindLastIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  isExternal: true
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(System.Action<T>)
  nameWithType.vb: List(Of T).ForEach(Action(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).ForEach(System.Action(Of T))
  name.vb: ForEach(Action(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<T>.ForEach
    fullName: System.Collections.Generic.List<T>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of T).ForEach
    fullName: System.Collections.Generic.List(Of T).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetEnumerator
  commentId: M:System.Collections.Generic.List`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
  nameWithType.vb: List(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of T).GetEnumerator
    fullName: System.Collections.Generic.List(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  isExternal: true
  name: GetRange(Int32, Int32)
  nameWithType: List<T>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<T>.GetRange
    fullName: System.Collections.Generic.List<T>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of T).GetRange
    fullName: System.Collections.Generic.List(Of T).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
  nameWithType.vb: List(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32)
  nameWithType: List<T>.IndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32, Int32)
  nameWithType: List<T>.IndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: List<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.List<T>.Insert(System.Int32, T)
  nameWithType.vb: List(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.List(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<T>.Insert
    fullName: System.Collections.Generic.List<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of T).Insert
    fullName: System.Collections.Generic.List(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).InsertRange(Int32, IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<T>.InsertRange
    fullName: System.Collections.Generic.List<T>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of T).InsertRange
    fullName: System.Collections.Generic.List(Of T).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  isExternal: true
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
  nameWithType.vb: List(Of T).LastIndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Remove(`0)
  commentId: M:System.Collections.Generic.List`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: List<T>.Remove(T)
  fullName: System.Collections.Generic.List<T>.Remove(T)
  nameWithType.vb: List(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.List(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<T>.Remove
    fullName: System.Collections.Generic.List<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of T).Remove
    fullName: System.Collections.Generic.List(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  isExternal: true
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).RemoveAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAll(System.Predicate(Of T))
  name.vb: RemoveAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<T>.RemoveAll
    fullName: System.Collections.Generic.List<T>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of T).RemoveAll
    fullName: System.Collections.Generic.List(Of T).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<T>.RemoveAt
    fullName: System.Collections.Generic.List<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of T).RemoveAt
    fullName: System.Collections.Generic.List(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  isExternal: true
  name: RemoveRange(Int32, Int32)
  nameWithType: List<T>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<T>.RemoveRange
    fullName: System.Collections.Generic.List<T>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of T).RemoveRange
    fullName: System.Collections.Generic.List(Of T).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse
  commentId: M:System.Collections.Generic.List`1.Reverse
  isExternal: true
  name: Reverse()
  nameWithType: List<T>.Reverse()
  fullName: System.Collections.Generic.List<T>.Reverse()
  nameWithType.vb: List(Of T).Reverse()
  fullName.vb: System.Collections.Generic.List(Of T).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  isExternal: true
  name: Reverse(Int32, Int32)
  nameWithType: List<T>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort
  commentId: M:System.Collections.Generic.List`1.Sort
  isExternal: true
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
  nameWithType.vb: List(Of T).Sort()
  fullName.vb: System.Collections.Generic.List(Of T).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  isExternal: true
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Comparison<T>)
  nameWithType.vb: List(Of T).Sort(Comparison(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(Int32, Int32, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Int32, Int32, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isExternal: true
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: List<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<T>.GetEnumerator
    nameWithType: List<T>.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<T>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<T>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of T).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: List<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<T>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  isExternal: true
  name: IList.Add(Object)
  nameWithType: List<T>.IList.Add(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<T>.IList.Add
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of T).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  isExternal: true
  name: IList.Contains(Object)
  nameWithType: List<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<T>.IList.Contains
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of T).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  isExternal: true
  name: IList.IndexOf(Object)
  nameWithType: List<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<T>.IList.IndexOf
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of T).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  isExternal: true
  name: IList.Insert(Int32, Object)
  nameWithType: List<T>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<T>.IList.Insert
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of T).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  isExternal: true
  name: IList.Remove(Object)
  nameWithType: List<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<T>.IList.Remove
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of T).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ToArray
  commentId: M:System.Collections.Generic.List`1.ToArray
  isExternal: true
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
  nameWithType.vb: List(Of T).ToArray()
  fullName.vb: System.Collections.Generic.List(Of T).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<T>.ToArray
    fullName: System.Collections.Generic.List<T>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of T).ToArray
    fullName: System.Collections.Generic.List(Of T).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrimExcess
  commentId: M:System.Collections.Generic.List`1.TrimExcess
  isExternal: true
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
  nameWithType.vb: List(Of T).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of T).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<T>.TrimExcess
    fullName: System.Collections.Generic.List<T>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of T).TrimExcess
    fullName: System.Collections.Generic.List(Of T).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  isExternal: true
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).TrueForAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).TrueForAll(System.Predicate(Of T))
  name.vb: TrueForAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<T>.TrueForAll
    fullName: System.Collections.Generic.List<T>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of T).TrueForAll
    fullName: System.Collections.Generic.List(Of T).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  isExternal: true
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  nameWithType.vb: List(Of T).Capacity
  fullName.vb: System.Collections.Generic.List(Of T).Capacity
- uid: System.Collections.Generic.List`1.Count
  commentId: P:System.Collections.Generic.List`1.Count
  isExternal: true
  name: Count
  nameWithType: List<T>.Count
  fullName: System.Collections.Generic.List<T>.Count
  nameWithType.vb: List(Of T).Count
  fullName.vb: System.Collections.Generic.List(Of T).Count
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: List<T>.Item[Int32]
  fullName: System.Collections.Generic.List<T>.Item[System.Int32]
  nameWithType.vb: List(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<T>.Item
    fullName: System.Collections.Generic.List<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of T).Item
    fullName: System.Collections.Generic.List(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  isExternal: true
  name: ICollection<T>.IsReadOnly
  nameWithType: List<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  isExternal: true
  name: ICollection.IsSynchronized
  nameWithType: List<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  isExternal: true
  name: ICollection.SyncRoot
  nameWithType: List<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  isExternal: true
  name: IList.IsFixedSize
  nameWithType: List<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  isExternal: true
  name: IList.IsReadOnly
  nameWithType: List<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  isExternal: true
  name: IList.Item[Int32]
  nameWithType: List<T>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of T).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<T>.IList.Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of T).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.DataColumn
  commentId: T:System.Data.DataColumn
  parent: System.Data
  isExternal: true
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add*
  commentId: Overload:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add
  name: Add
  nameWithType: DataColumnMappingCollection.Add
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue
  commentId: P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue
  isExternal: true
- uid: System.Func{System.Object,System.Object}
  commentId: T:System.Func{System.Object,System.Object}
  parent: System
  definition: System.Func`2
  name: Func<Object, Object>
  nameWithType: Func<Object, Object>
  fullName: System.Func<System.Object, System.Object>
  nameWithType.vb: Func(Of Object, Object)
  fullName.vb: System.Func(Of System.Object, System.Object)
  name.vb: Func(Of Object, Object)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
