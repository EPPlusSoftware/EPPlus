### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.Utils.Require
  commentId: T:OfficeOpenXml.Utils.Require
  id: Require
  parent: OfficeOpenXml.Utils
  children:
  - OfficeOpenXml.Utils.Require.Argument``1(``0)
  langs:
  - csharp
  - vb
  name: Require
  nameWithType: Require
  fullName: OfficeOpenXml.Utils.Require
  type: Class
  source:
    remote:
      path: src/EPPlus/Utils/Require.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Require
    path: ../src/EPPlus/Utils/Require.cs
    startLine: 23
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Utils
  summary: "\nUtility for validation in functions.\n"
  example: []
  syntax:
    content: public static class Require
    content.vb: Public Module Require
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: OfficeOpenXml.Utils.Require.Argument``1(``0)
  commentId: M:OfficeOpenXml.Utils.Require.Argument``1(``0)
  id: Argument``1(``0)
  parent: OfficeOpenXml.Utils.Require
  langs:
  - csharp
  - vb
  name: Argument<T>(T)
  nameWithType: Require.Argument<T>(T)
  fullName: OfficeOpenXml.Utils.Require.Argument<T>(T)
  type: Method
  source:
    remote:
      path: src/EPPlus/Utils/Require.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Argument
    path: ../src/EPPlus/Utils/Require.cs
    startLine: 31
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Utils
  summary: "\nRepresent an argument to the function where the validation is implemented.\n"
  example: []
  syntax:
    content: public static IArgument<T> Argument<T>(T argument)
    parameters:
    - id: argument
      type: '{T}'
      description: The argument to validate
    typeParameters:
    - id: T
      description: ''
    return:
      type: OfficeOpenXml.Utils.IArgument{{T}}
      description: ''
    content.vb: Public Shared Function Argument(Of T)(argument As T) As IArgument(Of T)
  overload: OfficeOpenXml.Utils.Require.Argument*
  nameWithType.vb: Require.Argument(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: OfficeOpenXml.Utils.Require.Argument(Of T)(T)
  name.vb: Argument(Of T)(T)
references:
- uid: OfficeOpenXml.Utils
  commentId: N:OfficeOpenXml.Utils
  name: OfficeOpenXml.Utils
  nameWithType: OfficeOpenXml.Utils
  fullName: OfficeOpenXml.Utils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.Utils.Require.Argument*
  commentId: Overload:OfficeOpenXml.Utils.Require.Argument
  name: Argument
  nameWithType: Require.Argument
  fullName: OfficeOpenXml.Utils.Require.Argument
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: OfficeOpenXml.Utils.IArgument{{T}}
  commentId: T:OfficeOpenXml.Utils.IArgument{``0}
  parent: OfficeOpenXml.Utils
  definition: OfficeOpenXml.Utils.IArgument`1
  name: IArgument<T>
  nameWithType: IArgument<T>
  fullName: OfficeOpenXml.Utils.IArgument<T>
  nameWithType.vb: IArgument(Of T)
  fullName.vb: OfficeOpenXml.Utils.IArgument(Of T)
  name.vb: IArgument(Of T)
  spec.csharp:
  - uid: OfficeOpenXml.Utils.IArgument`1
    name: IArgument
    nameWithType: IArgument
    fullName: OfficeOpenXml.Utils.IArgument
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: OfficeOpenXml.Utils.IArgument`1
    name: IArgument
    nameWithType: IArgument
    fullName: OfficeOpenXml.Utils.IArgument
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: OfficeOpenXml.Utils.IArgument`1
  commentId: T:OfficeOpenXml.Utils.IArgument`1
  name: IArgument<T>
  nameWithType: IArgument<T>
  fullName: OfficeOpenXml.Utils.IArgument<T>
  nameWithType.vb: IArgument(Of T)
  fullName.vb: OfficeOpenXml.Utils.IArgument(Of T)
  name.vb: IArgument(Of T)
  spec.csharp:
  - uid: OfficeOpenXml.Utils.IArgument`1
    name: IArgument
    nameWithType: IArgument
    fullName: OfficeOpenXml.Utils.IArgument
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: OfficeOpenXml.Utils.IArgument`1
    name: IArgument
    nameWithType: IArgument
    fullName: OfficeOpenXml.Utils.IArgument
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
