### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.ExcelProtectedRangeCollection
  commentId: T:OfficeOpenXml.ExcelProtectedRangeCollection
  id: ExcelProtectedRangeCollection
  parent: OfficeOpenXml
  children:
  - OfficeOpenXml.ExcelProtectedRangeCollection.Add(System.String,OfficeOpenXml.ExcelAddress)
  - OfficeOpenXml.ExcelProtectedRangeCollection.Clear
  - OfficeOpenXml.ExcelProtectedRangeCollection.Contains(OfficeOpenXml.ExcelProtectedRange)
  - OfficeOpenXml.ExcelProtectedRangeCollection.CopyTo(OfficeOpenXml.ExcelProtectedRange[],System.Int32)
  - OfficeOpenXml.ExcelProtectedRangeCollection.Count
  - OfficeOpenXml.ExcelProtectedRangeCollection.IndexOf(OfficeOpenXml.ExcelProtectedRange)
  - OfficeOpenXml.ExcelProtectedRangeCollection.Item(System.Int32)
  - OfficeOpenXml.ExcelProtectedRangeCollection.Remove(OfficeOpenXml.ExcelProtectedRange)
  - OfficeOpenXml.ExcelProtectedRangeCollection.RemoveAt(System.Int32)
  - OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#ExcelProtectedRange}#GetEnumerator
  - OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: ExcelProtectedRangeCollection
  nameWithType: ExcelProtectedRangeCollection
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection
  type: Class
  source:
    remote:
      path: src/EPPlus/ExcelProtectedRangeCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelProtectedRangeCollection
    path: ../src/EPPlus/ExcelProtectedRangeCollection.cs
    startLine: 28
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nA collection of protected ranges in the worksheet.\n<xref href=\"OfficeOpenXml.ExcelProtection\" data-throw-if-not-resolved=\"false\"></xref> \n<xref href=\"OfficeOpenXml.ExcelSheetProtection\" data-throw-if-not-resolved=\"false\"></xref> \n<xref href=\"OfficeOpenXml.ExcelEncryption\" data-throw-if-not-resolved=\"false\"></xref> \n"
  example: []
  syntax:
    content: 'public class ExcelProtectedRangeCollection : XmlHelper, IEnumerable<ExcelProtectedRange>, IEnumerable'
    content.vb: >-
      Public Class ExcelProtectedRangeCollection
          Inherits XmlHelper
          Implements IEnumerable(Of ExcelProtectedRange), IEnumerable
  inheritance:
  - System.Object
  - OfficeOpenXml.XmlHelper
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelProtectedRange}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.Add(System.String,OfficeOpenXml.ExcelAddress)
  commentId: M:OfficeOpenXml.ExcelProtectedRangeCollection.Add(System.String,OfficeOpenXml.ExcelAddress)
  id: Add(System.String,OfficeOpenXml.ExcelAddress)
  parent: OfficeOpenXml.ExcelProtectedRangeCollection
  langs:
  - csharp
  - vb
  name: Add(String, ExcelAddress)
  nameWithType: ExcelProtectedRangeCollection.Add(String, ExcelAddress)
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.Add(System.String, OfficeOpenXml.ExcelAddress)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelProtectedRangeCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Add
    path: ../src/EPPlus/ExcelProtectedRangeCollection.cs
    startLine: 56
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nAdds a new protected range\n"
  example: []
  syntax:
    content: public ExcelProtectedRange Add(string name, ExcelAddress address)
    parameters:
    - id: name
      type: System.String
      description: The name of the protected range
    - id: address
      type: OfficeOpenXml.ExcelAddress
      description: The address within the worksheet
    return:
      type: OfficeOpenXml.ExcelProtectedRange
      description: ''
    content.vb: Public Function Add(name As String, address As ExcelAddress) As ExcelProtectedRange
  overload: OfficeOpenXml.ExcelProtectedRangeCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.Clear
  commentId: M:OfficeOpenXml.ExcelProtectedRangeCollection.Clear
  id: Clear
  parent: OfficeOpenXml.ExcelProtectedRangeCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ExcelProtectedRangeCollection.Clear()
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.Clear()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelProtectedRangeCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Clear
    path: ../src/EPPlus/ExcelProtectedRangeCollection.cs
    startLine: 80
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nClears all protected ranges\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: OfficeOpenXml.ExcelProtectedRangeCollection.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.Contains(OfficeOpenXml.ExcelProtectedRange)
  commentId: M:OfficeOpenXml.ExcelProtectedRangeCollection.Contains(OfficeOpenXml.ExcelProtectedRange)
  id: Contains(OfficeOpenXml.ExcelProtectedRange)
  parent: OfficeOpenXml.ExcelProtectedRangeCollection
  langs:
  - csharp
  - vb
  name: Contains(ExcelProtectedRange)
  nameWithType: ExcelProtectedRangeCollection.Contains(ExcelProtectedRange)
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.Contains(OfficeOpenXml.ExcelProtectedRange)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelProtectedRangeCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Contains
    path: ../src/EPPlus/ExcelProtectedRangeCollection.cs
    startLine: 90
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nChecks if the collection contains a specific item.\n"
  example: []
  syntax:
    content: public bool Contains(ExcelProtectedRange item)
    parameters:
    - id: item
      type: OfficeOpenXml.ExcelProtectedRange
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Contains(item As ExcelProtectedRange) As Boolean
  overload: OfficeOpenXml.ExcelProtectedRangeCollection.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.CopyTo(OfficeOpenXml.ExcelProtectedRange[],System.Int32)
  commentId: M:OfficeOpenXml.ExcelProtectedRangeCollection.CopyTo(OfficeOpenXml.ExcelProtectedRange[],System.Int32)
  id: CopyTo(OfficeOpenXml.ExcelProtectedRange[],System.Int32)
  parent: OfficeOpenXml.ExcelProtectedRangeCollection
  langs:
  - csharp
  - vb
  name: CopyTo(ExcelProtectedRange[], Int32)
  nameWithType: ExcelProtectedRangeCollection.CopyTo(ExcelProtectedRange[], Int32)
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.CopyTo(OfficeOpenXml.ExcelProtectedRange[], System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelProtectedRangeCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CopyTo
    path: ../src/EPPlus/ExcelProtectedRangeCollection.cs
    startLine: 100
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nCopies the entire collection to a compatible one-dimensional\narray, starting at the specified index of the target array.\n"
  example: []
  syntax:
    content: public void CopyTo(ExcelProtectedRange[] array, int arrayIndex)
    parameters:
    - id: array
      type: OfficeOpenXml.ExcelProtectedRange[]
      description: The array
    - id: arrayIndex
      type: System.Int32
      description: The index
    content.vb: Public Sub CopyTo(array As ExcelProtectedRange(), arrayIndex As Integer)
  overload: OfficeOpenXml.ExcelProtectedRangeCollection.CopyTo*
  nameWithType.vb: ExcelProtectedRangeCollection.CopyTo(ExcelProtectedRange(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelProtectedRangeCollection.CopyTo(OfficeOpenXml.ExcelProtectedRange(), System.Int32)
  name.vb: CopyTo(ExcelProtectedRange(), Int32)
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.Count
  commentId: P:OfficeOpenXml.ExcelProtectedRangeCollection.Count
  id: Count
  parent: OfficeOpenXml.ExcelProtectedRangeCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ExcelProtectedRangeCollection.Count
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.Count
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelProtectedRangeCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Count
    path: ../src/EPPlus/ExcelProtectedRangeCollection.cs
    startLine: 108
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nNumner of items in the collection\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: OfficeOpenXml.ExcelProtectedRangeCollection.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.Remove(OfficeOpenXml.ExcelProtectedRange)
  commentId: M:OfficeOpenXml.ExcelProtectedRangeCollection.Remove(OfficeOpenXml.ExcelProtectedRange)
  id: Remove(OfficeOpenXml.ExcelProtectedRange)
  parent: OfficeOpenXml.ExcelProtectedRangeCollection
  langs:
  - csharp
  - vb
  name: Remove(ExcelProtectedRange)
  nameWithType: ExcelProtectedRangeCollection.Remove(ExcelProtectedRange)
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.Remove(OfficeOpenXml.ExcelProtectedRange)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelProtectedRangeCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Remove
    path: ../src/EPPlus/ExcelProtectedRangeCollection.cs
    startLine: 117
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nRemove the specified item from the collection\n"
  example: []
  syntax:
    content: public bool Remove(ExcelProtectedRange item)
    parameters:
    - id: item
      type: OfficeOpenXml.ExcelProtectedRange
      description: The item
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Remove(item As ExcelProtectedRange) As Boolean
  overload: OfficeOpenXml.ExcelProtectedRangeCollection.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.IndexOf(OfficeOpenXml.ExcelProtectedRange)
  commentId: M:OfficeOpenXml.ExcelProtectedRangeCollection.IndexOf(OfficeOpenXml.ExcelProtectedRange)
  id: IndexOf(OfficeOpenXml.ExcelProtectedRange)
  parent: OfficeOpenXml.ExcelProtectedRangeCollection
  langs:
  - csharp
  - vb
  name: IndexOf(ExcelProtectedRange)
  nameWithType: ExcelProtectedRangeCollection.IndexOf(ExcelProtectedRange)
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.IndexOf(OfficeOpenXml.ExcelProtectedRange)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelProtectedRangeCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IndexOf
    path: ../src/EPPlus/ExcelProtectedRangeCollection.cs
    startLine: 133
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGet the index in the collection of the supplied item\n"
  example: []
  syntax:
    content: public int IndexOf(ExcelProtectedRange item)
    parameters:
    - id: item
      type: OfficeOpenXml.ExcelProtectedRange
      description: The item
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function IndexOf(item As ExcelProtectedRange) As Integer
  overload: OfficeOpenXml.ExcelProtectedRangeCollection.IndexOf*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.RemoveAt(System.Int32)
  commentId: M:OfficeOpenXml.ExcelProtectedRangeCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: OfficeOpenXml.ExcelProtectedRangeCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: ExcelProtectedRangeCollection.RemoveAt(Int32)
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelProtectedRangeCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: RemoveAt
    path: ../src/EPPlus/ExcelProtectedRangeCollection.cs
    startLine: 142
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nRemove the item at the specified indexx\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: ''
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: OfficeOpenXml.ExcelProtectedRangeCollection.RemoveAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.Item(System.Int32)
  commentId: P:OfficeOpenXml.ExcelProtectedRangeCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: OfficeOpenXml.ExcelProtectedRangeCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ExcelProtectedRangeCollection.Item[Int32]
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelProtectedRangeCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: this[]
    path: ../src/EPPlus/ExcelProtectedRangeCollection.cs
    startLine: 155
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nIndexer for the collection\n"
  example: []
  syntax:
    content: public ExcelProtectedRange this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: The index to return
    return:
      type: OfficeOpenXml.ExcelProtectedRange
      description: ''
    content.vb: Public ReadOnly Property Item(index As Integer) As ExcelProtectedRange
  overload: OfficeOpenXml.ExcelProtectedRangeCollection.Item*
  nameWithType.vb: ExcelProtectedRangeCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: OfficeOpenXml.ExcelProtectedRangeCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#ExcelProtectedRange}#GetEnumerator
  commentId: M:OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#ExcelProtectedRange}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{OfficeOpenXml#ExcelProtectedRange}#GetEnumerator
  isEii: true
  parent: OfficeOpenXml.ExcelProtectedRangeCollection
  langs:
  - csharp
  - vb
  name: IEnumerable<ExcelProtectedRange>.GetEnumerator()
  nameWithType: ExcelProtectedRangeCollection.IEnumerable<ExcelProtectedRange>.GetEnumerator()
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelProtectedRange>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelProtectedRangeCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelProtectedRange>.GetEnumerator
    path: ../src/EPPlus/ExcelProtectedRangeCollection.cs
    startLine: 166
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGet the enumerator\n"
  example: []
  syntax:
    content: IEnumerator<ExcelProtectedRange> IEnumerable<ExcelProtectedRange>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelProtectedRange}
      description: The enumerator
    content.vb: Function System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelProtectedRange>.GetEnumerator As IEnumerator(Of ExcelProtectedRange) Implements IEnumerable(Of ExcelProtectedRange).GetEnumerator
  overload: OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#ExcelProtectedRange}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelProtectedRange}.GetEnumerator
  nameWithType.vb: ExcelProtectedRangeCollection.System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelProtectedRange>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelProtectedRange>.GetEnumerator()
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: OfficeOpenXml.ExcelProtectedRangeCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ExcelProtectedRangeCollection.IEnumerable.GetEnumerator()
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelProtectedRangeCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../src/EPPlus/ExcelProtectedRangeCollection.cs
    startLine: 174
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGet the enumerator\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: The enumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExcelProtectedRangeCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: OfficeOpenXml.ExcelProtection
  commentId: T:OfficeOpenXml.ExcelProtection
  parent: OfficeOpenXml
  name: ExcelProtection
  nameWithType: ExcelProtection
  fullName: OfficeOpenXml.ExcelProtection
- uid: OfficeOpenXml.ExcelSheetProtection
  commentId: T:OfficeOpenXml.ExcelSheetProtection
  parent: OfficeOpenXml
  name: ExcelSheetProtection
  nameWithType: ExcelSheetProtection
  fullName: OfficeOpenXml.ExcelSheetProtection
- uid: OfficeOpenXml.ExcelEncryption
  commentId: T:OfficeOpenXml.ExcelEncryption
  parent: OfficeOpenXml
  name: ExcelEncryption
  nameWithType: ExcelEncryption
  fullName: OfficeOpenXml.ExcelEncryption
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.XmlHelper
  commentId: T:OfficeOpenXml.XmlHelper
  parent: OfficeOpenXml
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: OfficeOpenXml.XmlHelper
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelProtectedRange}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelProtectedRange}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ExcelProtectedRange>
  nameWithType: IEnumerable<ExcelProtectedRange>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelProtectedRange>
  nameWithType.vb: IEnumerable(Of ExcelProtectedRange)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.ExcelProtectedRange)
  name.vb: IEnumerable(Of ExcelProtectedRange)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.ExcelProtectedRange
    name: ExcelProtectedRange
    nameWithType: ExcelProtectedRange
    fullName: OfficeOpenXml.ExcelProtectedRange
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.ExcelProtectedRange
    name: ExcelProtectedRange
    nameWithType: ExcelProtectedRange
    fullName: OfficeOpenXml.ExcelProtectedRange
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.Add*
  commentId: Overload:OfficeOpenXml.ExcelProtectedRangeCollection.Add
  name: Add
  nameWithType: ExcelProtectedRangeCollection.Add
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.Add
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.ExcelAddress
  commentId: T:OfficeOpenXml.ExcelAddress
  parent: OfficeOpenXml
  name: ExcelAddress
  nameWithType: ExcelAddress
  fullName: OfficeOpenXml.ExcelAddress
- uid: OfficeOpenXml.ExcelProtectedRange
  commentId: T:OfficeOpenXml.ExcelProtectedRange
  parent: OfficeOpenXml
  name: ExcelProtectedRange
  nameWithType: ExcelProtectedRange
  fullName: OfficeOpenXml.ExcelProtectedRange
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.Clear*
  commentId: Overload:OfficeOpenXml.ExcelProtectedRangeCollection.Clear
  name: Clear
  nameWithType: ExcelProtectedRangeCollection.Clear
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.Clear
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.Contains*
  commentId: Overload:OfficeOpenXml.ExcelProtectedRangeCollection.Contains
  name: Contains
  nameWithType: ExcelProtectedRangeCollection.Contains
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.CopyTo*
  commentId: Overload:OfficeOpenXml.ExcelProtectedRangeCollection.CopyTo
  name: CopyTo
  nameWithType: ExcelProtectedRangeCollection.CopyTo
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.CopyTo
- uid: OfficeOpenXml.ExcelProtectedRange[]
  isExternal: true
  name: ExcelProtectedRange[]
  nameWithType: ExcelProtectedRange[]
  fullName: OfficeOpenXml.ExcelProtectedRange[]
  nameWithType.vb: ExcelProtectedRange()
  fullName.vb: OfficeOpenXml.ExcelProtectedRange()
  name.vb: ExcelProtectedRange()
  spec.csharp:
  - uid: OfficeOpenXml.ExcelProtectedRange
    name: ExcelProtectedRange
    nameWithType: ExcelProtectedRange
    fullName: OfficeOpenXml.ExcelProtectedRange
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: OfficeOpenXml.ExcelProtectedRange
    name: ExcelProtectedRange
    nameWithType: ExcelProtectedRange
    fullName: OfficeOpenXml.ExcelProtectedRange
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.Count*
  commentId: Overload:OfficeOpenXml.ExcelProtectedRangeCollection.Count
  name: Count
  nameWithType: ExcelProtectedRangeCollection.Count
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.Count
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.Remove*
  commentId: Overload:OfficeOpenXml.ExcelProtectedRangeCollection.Remove
  name: Remove
  nameWithType: ExcelProtectedRangeCollection.Remove
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.Remove
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.IndexOf*
  commentId: Overload:OfficeOpenXml.ExcelProtectedRangeCollection.IndexOf
  name: IndexOf
  nameWithType: ExcelProtectedRangeCollection.IndexOf
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.IndexOf
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.RemoveAt*
  commentId: Overload:OfficeOpenXml.ExcelProtectedRangeCollection.RemoveAt
  name: RemoveAt
  nameWithType: ExcelProtectedRangeCollection.RemoveAt
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.RemoveAt
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.Item*
  commentId: Overload:OfficeOpenXml.ExcelProtectedRangeCollection.Item
  name: Item
  nameWithType: ExcelProtectedRangeCollection.Item
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.Item
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#ExcelProtectedRange}#GetEnumerator*
  commentId: Overload:OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#ExcelProtectedRange}#GetEnumerator
  name: IEnumerable<ExcelProtectedRange>.GetEnumerator
  nameWithType: ExcelProtectedRangeCollection.IEnumerable<ExcelProtectedRange>.GetEnumerator
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelProtectedRange>.GetEnumerator
  nameWithType.vb: ExcelProtectedRangeCollection.System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelProtectedRange>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelProtectedRange>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelProtectedRange}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelProtectedRange}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelProtectedRange}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<ExcelProtectedRange>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelProtectedRange>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of ExcelProtectedRange).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.ExcelProtectedRange).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<ExcelProtectedRange>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelProtectedRange>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of ExcelProtectedRange).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.ExcelProtectedRange).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelProtectedRange}
  commentId: T:System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelProtectedRange}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<ExcelProtectedRange>
  nameWithType: IEnumerator<ExcelProtectedRange>
  fullName: System.Collections.Generic.IEnumerator<OfficeOpenXml.ExcelProtectedRange>
  nameWithType.vb: IEnumerator(Of ExcelProtectedRange)
  fullName.vb: System.Collections.Generic.IEnumerator(Of OfficeOpenXml.ExcelProtectedRange)
  name.vb: IEnumerator(Of ExcelProtectedRange)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.ExcelProtectedRange
    name: ExcelProtectedRange
    nameWithType: ExcelProtectedRange
    fullName: OfficeOpenXml.ExcelProtectedRange
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.ExcelProtectedRange
    name: ExcelProtectedRange
    nameWithType: ExcelProtectedRange
    fullName: OfficeOpenXml.ExcelProtectedRange
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: ExcelProtectedRangeCollection.IEnumerable.GetEnumerator
  fullName: OfficeOpenXml.ExcelProtectedRangeCollection.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExcelProtectedRangeCollection.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
