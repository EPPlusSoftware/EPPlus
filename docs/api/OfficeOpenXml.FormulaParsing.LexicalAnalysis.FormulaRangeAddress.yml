### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  id: FormulaRangeAddress
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  children:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext,OfficeOpenXml.ExcelAddressBase)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext,System.String)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Address
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Clone
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.CompareTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Empty
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FromCol
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FromRow
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.IsSingleCell
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToCol
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToRow
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToString
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetAddress
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetName
  langs:
  - csharp
  - vb
  name: FormulaRangeAddress
  nameWithType: FormulaRangeAddress
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FormulaRangeAddress
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 522
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nRepresents a range address\n"
  example: []
  syntax:
    content: 'public class FormulaRangeAddress : FormulaAddressBase, IAddressInfo, IComparable<FormulaRangeAddress>'
    content.vb: >-
      Public Class FormulaRangeAddress
          Inherits FormulaAddressBase
          Implements IAddressInfo, IComparable(Of FormulaRangeAddress)
  inheritance:
  - System.Object
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase
  derivedClasses:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaTableAddress
  implements:
  - OfficeOpenXml.FormulaParsing.IAddressInfo
  - System.IComparable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}
  inheritedMembers:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase.ExternalReferenceIx
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase.WorksheetIx
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor
  id: '#ctor'
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: FormulaRangeAddress()
  nameWithType: FormulaRangeAddress.FormulaRangeAddress()
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FormulaRangeAddress()
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 528
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public FormulaRangeAddress()
    content.vb: Public Sub New
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext)
  id: '#ctor(OfficeOpenXml.FormulaParsing.ParsingContext)'
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: FormulaRangeAddress(ParsingContext)
  nameWithType: FormulaRangeAddress.FormulaRangeAddress(ParsingContext)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FormulaRangeAddress(OfficeOpenXml.FormulaParsing.ParsingContext)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 536
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public FormulaRangeAddress(ParsingContext ctx)
    parameters:
    - id: ctx
      type: OfficeOpenXml.FormulaParsing.ParsingContext
      description: ''
    content.vb: Public Sub New(ctx As ParsingContext)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext,System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext,System.String)
  id: '#ctor(OfficeOpenXml.FormulaParsing.ParsingContext,System.String)'
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: FormulaRangeAddress(ParsingContext, String)
  nameWithType: FormulaRangeAddress.FormulaRangeAddress(ParsingContext, String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FormulaRangeAddress(OfficeOpenXml.FormulaParsing.ParsingContext, System.String)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 545
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public FormulaRangeAddress(ParsingContext ctx, string address)
    parameters:
    - id: ctx
      type: OfficeOpenXml.FormulaParsing.ParsingContext
      description: ''
    - id: address
      type: System.String
      description: ''
    content.vb: Public Sub New(ctx As ParsingContext, address As String)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext,OfficeOpenXml.ExcelAddressBase)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext,OfficeOpenXml.ExcelAddressBase)
  id: '#ctor(OfficeOpenXml.FormulaParsing.ParsingContext,OfficeOpenXml.ExcelAddressBase)'
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: FormulaRangeAddress(ParsingContext, ExcelAddressBase)
  nameWithType: FormulaRangeAddress.FormulaRangeAddress(ParsingContext, ExcelAddressBase)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FormulaRangeAddress(OfficeOpenXml.FormulaParsing.ParsingContext, OfficeOpenXml.ExcelAddressBase)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 585
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public FormulaRangeAddress(ParsingContext ctx, ExcelAddressBase address)
    parameters:
    - id: ctx
      type: OfficeOpenXml.FormulaParsing.ParsingContext
    - id: address
      type: OfficeOpenXml.ExcelAddressBase
    content.vb: Public Sub New(ctx As ParsingContext, address As ExcelAddressBase)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor(OfficeOpenXml.FormulaParsing.ParsingContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(OfficeOpenXml.FormulaParsing.ParsingContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: FormulaRangeAddress(ParsingContext, Int32, Int32, Int32, Int32, Int32)
  nameWithType: FormulaRangeAddress.FormulaRangeAddress(ParsingContext, Int32, Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FormulaRangeAddress(OfficeOpenXml.FormulaParsing.ParsingContext, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 601
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public FormulaRangeAddress(ParsingContext context, int wsIx, int fromRow, int fromCol, int toRow, int toCol)
    parameters:
    - id: context
      type: OfficeOpenXml.FormulaParsing.ParsingContext
    - id: wsIx
      type: System.Int32
    - id: fromRow
      type: System.Int32
    - id: fromCol
      type: System.Int32
    - id: toRow
      type: System.Int32
    - id: toCol
      type: System.Int32
    content.vb: Public Sub New(context As ParsingContext, wsIx As Integer, fromRow As Integer, fromCol As Integer, toRow As Integer, toCol As Integer)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FromRow
  commentId: F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FromRow
  id: FromRow
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: FromRow
  nameWithType: FormulaRangeAddress.FromRow
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FromRow
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FromRow
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 610
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public int FromRow
    return:
      type: System.Int32
    content.vb: Public FromRow As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FromCol
  commentId: F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FromCol
  id: FromCol
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: FromCol
  nameWithType: FormulaRangeAddress.FromCol
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FromCol
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FromCol
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 610
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public int FromCol
    return:
      type: System.Int32
    content.vb: Public FromCol As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToRow
  commentId: F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToRow
  id: ToRow
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: ToRow
  nameWithType: FormulaRangeAddress.ToRow
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToRow
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToRow
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 610
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public int ToRow
    return:
      type: System.Int32
    content.vb: Public ToRow As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToCol
  commentId: F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToCol
  id: ToCol
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: ToCol
  nameWithType: FormulaRangeAddress.ToCol
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToCol
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToCol
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 610
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public int ToCol
    return:
      type: System.Int32
    content.vb: Public ToCol As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.IsSingleCell
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.IsSingleCell
  id: IsSingleCell
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: IsSingleCell
  nameWithType: FormulaRangeAddress.IsSingleCell
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.IsSingleCell
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsSingleCell
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 613
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public bool IsSingleCell { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSingleCell As Boolean
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.IsSingleCell*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Empty
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Empty
  id: Empty
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: FormulaRangeAddress.Empty
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Empty
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Empty
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 620
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public static FormulaRangeAddress Empty { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    content.vb: Public Shared ReadOnly Property Empty As FormulaRangeAddress
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Empty*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToString
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToString
  id: ToString
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: FormulaRangeAddress.ToString()
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToString()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToString
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 653
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nToString() returns the full address as a string\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetAddress
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetAddress
  id: WorksheetAddress
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: WorksheetAddress
  nameWithType: FormulaRangeAddress.WorksheetAddress
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetAddress
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: WorksheetAddress
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 666
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nAddress of the range on the worksheet (i.e. worksheet name is excluded).\n"
  example: []
  syntax:
    content: public string WorksheetAddress { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property WorksheetAddress As String
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetAddress*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetName
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetName
  id: WorksheetName
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: WorksheetName
  nameWithType: FormulaRangeAddress.WorksheetName
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetName
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: WorksheetName
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 677
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nWorksheet name of the address\n"
  example: []
  syntax:
    content: public string WorksheetName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property WorksheetName As String
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.CompareTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.CompareTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  id: CompareTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: CompareTo(FormulaRangeAddress)
  nameWithType: FormulaRangeAddress.CompareTo(FormulaRangeAddress)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.CompareTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CompareTo
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 740
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public int CompareTo(FormulaRangeAddress other)
    parameters:
    - id: other
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(other As FormulaRangeAddress) As Integer
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.CompareTo*
  implements:
  - System.IComparable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}.CompareTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Clone
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Clone
  id: Clone
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: FormulaRangeAddress.Clone()
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Clone()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Clone
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 763
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public virtual FormulaRangeAddress Clone()
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    content.vb: Public Overridable Function Clone As FormulaRangeAddress
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Clone*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Address
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Address
  id: Address
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: FormulaRangeAddress.Address
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Address
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Address
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/FormulaAddress.cs
    startLine: 835
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public FormulaRangeAddress Address { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    content.vb: Public ReadOnly Property Address As FormulaRangeAddress
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Address*
  implements:
  - OfficeOpenXml.FormulaParsing.IAddressInfo.Address
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: FormulaAddressBase
  nameWithType: FormulaAddressBase
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase
- uid: OfficeOpenXml.FormulaParsing.IAddressInfo
  commentId: T:OfficeOpenXml.FormulaParsing.IAddressInfo
  parent: OfficeOpenXml.FormulaParsing
  name: IAddressInfo
  nameWithType: IAddressInfo
  fullName: OfficeOpenXml.FormulaParsing.IAddressInfo
- uid: System.IComparable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}
  commentId: T:System.IComparable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}
  parent: System
  definition: System.IComparable`1
  name: IComparable<FormulaRangeAddress>
  nameWithType: IComparable<FormulaRangeAddress>
  fullName: System.IComparable<OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress>
  nameWithType.vb: IComparable(Of FormulaRangeAddress)
  fullName.vb: System.IComparable(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  name.vb: IComparable(Of FormulaRangeAddress)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    name: FormulaRangeAddress
    nameWithType: FormulaRangeAddress
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    name: FormulaRangeAddress
    nameWithType: FormulaRangeAddress
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase.ExternalReferenceIx
  commentId: F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase.ExternalReferenceIx
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase
  name: ExternalReferenceIx
  nameWithType: FormulaAddressBase.ExternalReferenceIx
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase.ExternalReferenceIx
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase.WorksheetIx
  commentId: F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase.WorksheetIx
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase
  name: WorksheetIx
  nameWithType: FormulaAddressBase.WorksheetIx
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase.WorksheetIx
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing
  commentId: N:OfficeOpenXml.FormulaParsing
  name: OfficeOpenXml.FormulaParsing
  nameWithType: OfficeOpenXml.FormulaParsing
  fullName: OfficeOpenXml.FormulaParsing
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.#ctor
  name: FormulaRangeAddress
  nameWithType: FormulaRangeAddress.FormulaRangeAddress
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.FormulaRangeAddress
- uid: OfficeOpenXml.FormulaParsing.ParsingContext
  commentId: T:OfficeOpenXml.FormulaParsing.ParsingContext
  parent: OfficeOpenXml.FormulaParsing
  name: ParsingContext
  nameWithType: ParsingContext
  fullName: OfficeOpenXml.FormulaParsing.ParsingContext
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.ExcelAddressBase
  commentId: T:OfficeOpenXml.ExcelAddressBase
  parent: OfficeOpenXml
  name: ExcelAddressBase
  nameWithType: ExcelAddressBase
  fullName: OfficeOpenXml.ExcelAddressBase
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.IsSingleCell*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.IsSingleCell
  name: IsSingleCell
  nameWithType: FormulaRangeAddress.IsSingleCell
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.IsSingleCell
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Empty*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Empty
  name: Empty
  nameWithType: FormulaRangeAddress.Empty
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Empty
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: FormulaRangeAddress
  nameWithType: FormulaRangeAddress
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToString*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToString
  name: ToString
  nameWithType: FormulaRangeAddress.ToString
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.ToString
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetAddress*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetAddress
  name: WorksheetAddress
  nameWithType: FormulaRangeAddress.WorksheetAddress
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetAddress
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetName*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetName
  name: WorksheetName
  nameWithType: FormulaRangeAddress.WorksheetName
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.WorksheetName
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.CompareTo*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.CompareTo
  name: CompareTo
  nameWithType: FormulaRangeAddress.CompareTo
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.CompareTo
- uid: System.IComparable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}.CompareTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  commentId: M:System.IComparable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}.CompareTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  parent: System.IComparable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(FormulaRangeAddress)
  nameWithType: IComparable<FormulaRangeAddress>.CompareTo(FormulaRangeAddress)
  fullName: System.IComparable<OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress>.CompareTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  nameWithType.vb: IComparable(Of FormulaRangeAddress).CompareTo(FormulaRangeAddress)
  fullName.vb: System.IComparable(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress).CompareTo(OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<FormulaRangeAddress>.CompareTo
    fullName: System.IComparable<OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    name: FormulaRangeAddress
    nameWithType: FormulaRangeAddress
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of FormulaRangeAddress).CompareTo
    fullName: System.IComparable(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    name: FormulaRangeAddress
    nameWithType: FormulaRangeAddress
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Clone*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Clone
  name: Clone
  nameWithType: FormulaRangeAddress.Clone
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Clone
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Address*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Address
  name: Address
  nameWithType: FormulaRangeAddress.Address
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress.Address
- uid: OfficeOpenXml.FormulaParsing.IAddressInfo.Address
  commentId: P:OfficeOpenXml.FormulaParsing.IAddressInfo.Address
  parent: OfficeOpenXml.FormulaParsing.IAddressInfo
  name: Address
  nameWithType: IAddressInfo.Address
  fullName: OfficeOpenXml.FormulaParsing.IAddressInfo.Address
