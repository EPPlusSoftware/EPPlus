### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  id: FunctionArgument
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  children:
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.#ctor(System.Object)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.#ctor(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Address
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.DataType
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRange
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRangeOrSingleCell
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsHiddenCell
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsExcelErrorValue
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsRangeInfo
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueFirst
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueIsExcelError
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueToList
  langs:
  - csharp
  - vb
  name: FunctionArgument
  nameWithType: FunctionArgument
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FunctionArgument
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 27
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nRepresents a function argument passed to the Execute method of a <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction\" data-throw-if-not-resolved=\"false\"></xref> class.\n<xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList%7bOfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument%7d%2cOfficeOpenXml.FormulaParsing.ParsingContext)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public class FunctionArgument
    content.vb: Public Class FunctionArgument
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.#ctor(System.Object)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  langs:
  - csharp
  - vb
  name: FunctionArgument(Object)
  nameWithType: FunctionArgument.FunctionArgument(Object)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.FunctionArgument(System.Object)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 37
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nConstructor.\n"
  example: []
  syntax:
    content: public FunctionArgument(object val)
    parameters:
    - id: val
      type: System.Object
      description: The value of the function argument.
    content.vb: Public Sub New(val As Object)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.#ctor(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.#ctor(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  id: '#ctor(System.Object,OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)'
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  langs:
  - csharp
  - vb
  name: FunctionArgument(Object, DataType)
  nameWithType: FunctionArgument.FunctionArgument(Object, DataType)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.FunctionArgument(System.Object, OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 47
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nConstructor.\n"
  example: []
  syntax:
    content: public FunctionArgument(object val, DataType dataType)
    parameters:
    - id: val
      type: System.Object
      description: The value of the function argument.
    - id: dataType
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType
      description: The data type of the <code data-dev-comment-type="paramref" class="paramref">val</code>. The data type should match the values .NET data type
    content.vb: Public Sub New(val As Object, dataType As DataType)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsHiddenCell
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsHiddenCell
  id: IsHiddenCell
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  langs:
  - csharp
  - vb
  name: IsHiddenCell
  nameWithType: FunctionArgument.IsHiddenCell
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsHiddenCell
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsHiddenCell
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 55
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf the compile result has a function that handles hidden cells.\n"
  example: []
  syntax:
    content: public bool IsHiddenCell { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsHiddenCell As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsHiddenCell*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value
  id: Value
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: FunctionArgument.Value
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Value
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 70
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThe value of the function argument\n"
  example: []
  syntax:
    content: public object Value { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property Value As Object
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.DataType
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.DataType
  id: DataType
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  langs:
  - csharp
  - vb
  name: DataType
  nameWithType: FunctionArgument.DataType
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.DataType
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: DataType
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 74
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThe data type of the <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public DataType DataType { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType
    content.vb: Public ReadOnly Property DataType As DataType
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.DataType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Address
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Address
  id: Address
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: FunctionArgument.Address
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Address
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Address
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 78
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThe address for function parameter \n"
  example: []
  syntax:
    content: public FormulaRangeAddress Address { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    content.vb: Public ReadOnly Property Address As FormulaRangeAddress
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Address*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRange
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRange
  id: IsExcelRange
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  langs:
  - csharp
  - vb
  name: IsExcelRange
  nameWithType: FunctionArgument.IsExcelRange
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRange
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsExcelRange
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 82
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf the <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> is a range with more than one cell.\n"
  example: []
  syntax:
    content: public bool IsExcelRange { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsExcelRange As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRange*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRangeOrSingleCell
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRangeOrSingleCell
  id: IsExcelRangeOrSingleCell
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  langs:
  - csharp
  - vb
  name: IsExcelRangeOrSingleCell
  nameWithType: FunctionArgument.IsExcelRangeOrSingleCell
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRangeOrSingleCell
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsExcelRangeOrSingleCell
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 89
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf the <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> is a range.\n"
  example: []
  syntax:
    content: public bool IsExcelRangeOrSingleCell { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsExcelRangeOrSingleCell As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRangeOrSingleCell*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueIsExcelError
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueIsExcelError
  id: ValueIsExcelError
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  langs:
  - csharp
  - vb
  name: ValueIsExcelError
  nameWithType: FunctionArgument.ValueIsExcelError
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueIsExcelError
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ValueIsExcelError
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 97
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nReturns true if the <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> is an <xref href=\"OfficeOpenXml.ExcelErrorValue\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool ValueIsExcelError { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ValueIsExcelError As Boolean
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueIsExcelError*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsExcelErrorValue
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsExcelErrorValue
  id: ValueAsExcelErrorValue
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  langs:
  - csharp
  - vb
  name: ValueAsExcelErrorValue
  nameWithType: FunctionArgument.ValueAsExcelErrorValue
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsExcelErrorValue
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ValueAsExcelErrorValue
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 105
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nTries to parse <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> as <xref href=\"OfficeOpenXml.ExcelErrorValue\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public ExcelErrorValue ValueAsExcelErrorValue { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelErrorValue
    content.vb: Public ReadOnly Property ValueAsExcelErrorValue As ExcelErrorValue
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsExcelErrorValue*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsRangeInfo
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsRangeInfo
  id: ValueAsRangeInfo
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  langs:
  - csharp
  - vb
  name: ValueAsRangeInfo
  nameWithType: FunctionArgument.ValueAsRangeInfo
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsRangeInfo
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ValueAsRangeInfo
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 114
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> is an instance of <xref href=\"OfficeOpenXml.FormulaParsing.IRangeInfo\" data-throw-if-not-resolved=\"false\"></xref> or has <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Address\" data-throw-if-not-resolved=\"false\"></xref> set to a valid address\nthis property will return a <xref href=\"OfficeOpenXml.FormulaParsing.IRangeInfo\" data-throw-if-not-resolved=\"false\"></xref>. If not null will be returned.\n"
  example: []
  syntax:
    content: public IRangeInfo ValueAsRangeInfo { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.IRangeInfo
    content.vb: Public ReadOnly Property ValueAsRangeInfo As IRangeInfo
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsRangeInfo*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueFirst
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueFirst
  id: ValueFirst
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  langs:
  - csharp
  - vb
  name: ValueFirst
  nameWithType: FunctionArgument.ValueFirst
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueFirst
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ValueFirst
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 136
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf the value is a <xref href=\"OfficeOpenXml.FormulaParsing.IRangeInfo\" data-throw-if-not-resolved=\"false\"></xref> the value will return the value of the first cell, otherwise the <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> will be returned.\n\n"
  example: []
  syntax:
    content: public object ValueFirst { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property ValueFirst As Object
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueFirst*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueToList
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueToList
  id: ValueToList
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  langs:
  - csharp
  - vb
  name: ValueToList
  nameWithType: FunctionArgument.ValueToList
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueToList
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ValueToList
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionArgument.cs
    startLine: 167
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf the value is a <xref href=\"OfficeOpenXml.FormulaParsing.IRangeInfo\" data-throw-if-not-resolved=\"false\"></xref> the value will return the value of the first cell, otherwise the <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> will be returned.\n\n"
  example: []
  syntax:
    content: public List<object> ValueToList { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Object}
    content.vb: Public ReadOnly Property ValueToList As List(Of Object)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueToList*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: ExcelFunction
  nameWithType: ExcelFunction
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  isExternal: true
  name: Execute(IList<FunctionArgument>, ParsingContext)
  nameWithType: ExcelFunction.Execute(IList<FunctionArgument>, ParsingContext)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, OfficeOpenXml.FormulaParsing.ParsingContext)
  nameWithType.vb: ExcelFunction.Execute(IList(Of FunctionArgument), ParsingContext)
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), OfficeOpenXml.FormulaParsing.ParsingContext)
  name.vb: Execute(IList(Of FunctionArgument), ParsingContext)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
    name: Execute
    nameWithType: ExcelFunction.Execute
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
    name: FunctionArgument
    nameWithType: FunctionArgument
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.ParsingContext
    name: ParsingContext
    nameWithType: ParsingContext
    fullName: OfficeOpenXml.FormulaParsing.ParsingContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
    name: Execute
    nameWithType: ExcelFunction.Execute
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
    name: FunctionArgument
    nameWithType: FunctionArgument
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.ParsingContext
    name: ParsingContext
    nameWithType: ParsingContext
    fullName: OfficeOpenXml.FormulaParsing.ParsingContext
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions
  commentId: N:OfficeOpenXml.FormulaParsing.Excel.Functions
  name: OfficeOpenXml.FormulaParsing.Excel.Functions
  nameWithType: OfficeOpenXml.FormulaParsing.Excel.Functions
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.#ctor
  name: FunctionArgument
  nameWithType: FunctionArgument.FunctionArgument
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.FunctionArgument
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType
  commentId: T:OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType
  parent: OfficeOpenXml.FormulaParsing.FormulaExpressions
  name: DataType
  nameWithType: DataType
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType
- uid: OfficeOpenXml.FormulaParsing.FormulaExpressions
  commentId: N:OfficeOpenXml.FormulaParsing.FormulaExpressions
  name: OfficeOpenXml.FormulaParsing.FormulaExpressions
  nameWithType: OfficeOpenXml.FormulaParsing.FormulaExpressions
  fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsHiddenCell*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsHiddenCell
  name: IsHiddenCell
  nameWithType: FunctionArgument.IsHiddenCell
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsHiddenCell
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value
  name: Value
  nameWithType: FunctionArgument.Value
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Value
  isExternal: true
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.DataType*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.DataType
  name: DataType
  nameWithType: FunctionArgument.DataType
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.DataType
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Address*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Address
  name: Address
  nameWithType: FunctionArgument.Address
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Address
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: FormulaRangeAddress
  nameWithType: FormulaRangeAddress
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRange*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRange
  name: IsExcelRange
  nameWithType: FunctionArgument.IsExcelRange
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRange
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRangeOrSingleCell*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRangeOrSingleCell
  name: IsExcelRangeOrSingleCell
  nameWithType: FunctionArgument.IsExcelRangeOrSingleCell
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.IsExcelRangeOrSingleCell
- uid: OfficeOpenXml.ExcelErrorValue
  commentId: T:OfficeOpenXml.ExcelErrorValue
  parent: OfficeOpenXml
  name: ExcelErrorValue
  nameWithType: ExcelErrorValue
  fullName: OfficeOpenXml.ExcelErrorValue
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueIsExcelError*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueIsExcelError
  name: ValueIsExcelError
  nameWithType: FunctionArgument.ValueIsExcelError
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueIsExcelError
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsExcelErrorValue*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsExcelErrorValue
  name: ValueAsExcelErrorValue
  nameWithType: FunctionArgument.ValueAsExcelErrorValue
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsExcelErrorValue
- uid: OfficeOpenXml.FormulaParsing.IRangeInfo
  commentId: T:OfficeOpenXml.FormulaParsing.IRangeInfo
  parent: OfficeOpenXml.FormulaParsing
  name: IRangeInfo
  nameWithType: IRangeInfo
  fullName: OfficeOpenXml.FormulaParsing.IRangeInfo
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Address
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.Address
  isExternal: true
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsRangeInfo*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsRangeInfo
  name: ValueAsRangeInfo
  nameWithType: FunctionArgument.ValueAsRangeInfo
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueAsRangeInfo
- uid: OfficeOpenXml.FormulaParsing
  commentId: N:OfficeOpenXml.FormulaParsing
  name: OfficeOpenXml.FormulaParsing
  nameWithType: OfficeOpenXml.FormulaParsing
  fullName: OfficeOpenXml.FormulaParsing
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueFirst*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueFirst
  name: ValueFirst
  nameWithType: FunctionArgument.ValueFirst
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueFirst
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueToList*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueToList
  name: ValueToList
  nameWithType: FunctionArgument.ValueToList
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument.ValueToList
- uid: System.Collections.Generic.List{System.Object}
  commentId: T:System.Collections.Generic.List{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Object>
  nameWithType: List<Object>
  fullName: System.Collections.Generic.List<System.Object>
  nameWithType.vb: List(Of Object)
  fullName.vb: System.Collections.Generic.List(Of System.Object)
  name.vb: List(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
