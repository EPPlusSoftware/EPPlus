### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  commentId: T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  id: DataColumnMapping
  parent: OfficeOpenXml.Export.ToDataTable
  children:
  - OfficeOpenXml.Export.ToDataTable.DataColumnMapping.AllowNull
  - OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ColumnDataType
  - OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumn
  - OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumnName
  - OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue
  - OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ZeroBasedColumnIndexInRange
  langs:
  - csharp
  - vb
  name: DataColumnMapping
  nameWithType: DataColumnMapping
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  type: Class
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: DataColumnMapping
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
    startLine: 23
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nClass used to map columns in the <xref href=\"OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions%2cSystem.Data.DataTable)\" data-throw-if-not-resolved=\"false\"></xref> method\n"
  example: []
  syntax:
    content: public class DataColumnMapping
    content.vb: Public Class DataColumnMapping
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumn
  commentId: P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumn
  id: DataColumn
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  langs:
  - csharp
  - vb
  name: DataColumn
  nameWithType: DataColumnMapping.DataColumn
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumn
  type: Property
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: DataColumn
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
    startLine: 43
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nThe <xref href=\"System.Data.DataColumn\" data-throw-if-not-resolved=\"false\"></xref> used for the mapping\n"
  example: []
  syntax:
    content: public DataColumn DataColumn { get; }
    parameters: []
    return:
      type: System.Data.DataColumn
    content.vb: Public ReadOnly Property DataColumn As DataColumn
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumn*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ZeroBasedColumnIndexInRange
  commentId: P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ZeroBasedColumnIndexInRange
  id: ZeroBasedColumnIndexInRange
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  langs:
  - csharp
  - vb
  name: ZeroBasedColumnIndexInRange
  nameWithType: DataColumnMapping.ZeroBasedColumnIndexInRange
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ZeroBasedColumnIndexInRange
  type: Property
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ZeroBasedColumnIndexInRange
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
    startLine: 52
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nZero based index of the mappings column in the range\n"
  example: []
  syntax:
    content: public int ZeroBasedColumnIndexInRange { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property ZeroBasedColumnIndexInRange As Integer
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ZeroBasedColumnIndexInRange*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumnName
  commentId: P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumnName
  id: DataColumnName
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  langs:
  - csharp
  - vb
  name: DataColumnName
  nameWithType: DataColumnMapping.DataColumnName
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumnName
  type: Property
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: DataColumnName
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
    startLine: 59
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nName of the data column, corresponds to <xref href=\"System.Data.DataColumn.ColumnName\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public string DataColumnName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DataColumnName As String
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumnName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ColumnDataType
  commentId: P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ColumnDataType
  id: ColumnDataType
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  langs:
  - csharp
  - vb
  name: ColumnDataType
  nameWithType: DataColumnMapping.ColumnDataType
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ColumnDataType
  type: Property
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ColumnDataType
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
    startLine: 79
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\n<xref href=\"System.Type?text=Type\" data-throw-if-not-resolved=\"false\"></xref> of the column, corresponds to <xref href=\"System.Data.DataColumn.DataType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Type ColumnDataType { get; set; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Property ColumnDataType As Type
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ColumnDataType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.AllowNull
  commentId: P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.AllowNull
  id: AllowNull
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  langs:
  - csharp
  - vb
  name: AllowNull
  nameWithType: DataColumnMapping.AllowNull
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.AllowNull
  type: Property
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AllowNull
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
    startLine: 109
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nIndicates whether empty cell values should be allowed. Corresponds to <xref href=\"System.Data.DataColumn.AllowDBNull\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool AllowNull { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AllowNull As Boolean
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.AllowNull*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue
  commentId: P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue
  id: TransformCellValue
  parent: OfficeOpenXml.Export.ToDataTable.DataColumnMapping
  langs:
  - csharp
  - vb
  name: TransformCellValue
  nameWithType: DataColumnMapping.TransformCellValue
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue
  type: Property
  source:
    remote:
      path: src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: TransformCellValue
    path: ../src/EPPlus/Export/ToDataTable/DataColumnMapping.cs
    startLine: 148
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Export.ToDataTable
  summary: "\nA function which allows casting of an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> before it is written to the <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example:
  - "\n<pre><code>var options = ToDataTableOptions.Create(o =>\n{\n    // the last argument is a lambda function that will call the read value&apos;s ToString method\n    // and this string will be written to the DataTable\n    o.Mappings.Add(0, &quot;Id&quot;, typeof(string), true, c => &quot;Id: &quot; + c.ToString());\n});</code></pre>\n"
  syntax:
    content: public Func<object, object> TransformCellValue { get; set; }
    parameters: []
    return:
      type: System.Func{System.Object,System.Object}
    content.vb: Public Property TransformCellValue As Func(Of Object, Object)
  overload: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions,System.Data.DataTable)
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions,System.Data.DataTable)
  parent: OfficeOpenXml.ExcelRangeBase
  isExternal: true
  name: ToDataTable(ToDataTableOptions, DataTable)
  nameWithType: ExcelRangeBase.ToDataTable(ToDataTableOptions, DataTable)
  fullName: OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions, System.Data.DataTable)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions,System.Data.DataTable)
    name: ToDataTable
    nameWithType: ExcelRangeBase.ToDataTable
    fullName: OfficeOpenXml.ExcelRangeBase.ToDataTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.ToDataTableOptions
    name: ToDataTableOptions
    nameWithType: ToDataTableOptions
    fullName: OfficeOpenXml.Export.ToDataTable.ToDataTableOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: System.Data.DataTable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions,System.Data.DataTable)
    name: ToDataTable
    nameWithType: ExcelRangeBase.ToDataTable
    fullName: OfficeOpenXml.ExcelRangeBase.ToDataTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Export.ToDataTable.ToDataTableOptions
    name: ToDataTableOptions
    nameWithType: ToDataTableOptions
    fullName: OfficeOpenXml.Export.ToDataTable.ToDataTableOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: System.Data.DataTable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Export.ToDataTable
  commentId: N:OfficeOpenXml.Export.ToDataTable
  name: OfficeOpenXml.Export.ToDataTable
  nameWithType: OfficeOpenXml.Export.ToDataTable
  fullName: OfficeOpenXml.Export.ToDataTable
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase
  commentId: T:OfficeOpenXml.ExcelRangeBase
  parent: OfficeOpenXml
  name: ExcelRangeBase
  nameWithType: ExcelRangeBase
  fullName: OfficeOpenXml.ExcelRangeBase
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: System.Data.DataColumn
  commentId: T:System.Data.DataColumn
  parent: System.Data
  isExternal: true
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumn*
  commentId: Overload:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumn
  name: DataColumn
  nameWithType: DataColumnMapping.DataColumn
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumn
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ZeroBasedColumnIndexInRange*
  commentId: Overload:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ZeroBasedColumnIndexInRange
  name: ZeroBasedColumnIndexInRange
  nameWithType: DataColumnMapping.ZeroBasedColumnIndexInRange
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ZeroBasedColumnIndexInRange
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataColumn.ColumnName
  commentId: P:System.Data.DataColumn.ColumnName
  isExternal: true
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumnName*
  commentId: Overload:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumnName
  name: DataColumnName
  nameWithType: DataColumnMapping.DataColumnName
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumnName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.DataColumn.DataType
  commentId: P:System.Data.DataColumn.DataType
  isExternal: true
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ColumnDataType*
  commentId: Overload:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ColumnDataType
  name: ColumnDataType
  nameWithType: DataColumnMapping.ColumnDataType
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ColumnDataType
- uid: System.Data.DataColumn.AllowDBNull
  commentId: P:System.Data.DataColumn.AllowDBNull
  isExternal: true
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.AllowNull*
  commentId: Overload:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.AllowNull
  name: AllowNull
  nameWithType: DataColumnMapping.AllowNull
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.AllowNull
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue*
  commentId: Overload:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue
  name: TransformCellValue
  nameWithType: DataColumnMapping.TransformCellValue
  fullName: OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue
- uid: System.Func{System.Object,System.Object}
  commentId: T:System.Func{System.Object,System.Object}
  parent: System
  definition: System.Func`2
  name: Func<Object, Object>
  nameWithType: Func<Object, Object>
  fullName: System.Func<System.Object, System.Object>
  nameWithType.vb: Func(Of Object, Object)
  fullName.vb: System.Func(Of System.Object, System.Object)
  name.vb: Func(Of Object, Object)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
