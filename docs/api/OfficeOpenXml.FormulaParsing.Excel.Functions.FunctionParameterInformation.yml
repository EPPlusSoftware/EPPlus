### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  id: FunctionParameterInformation
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  children:
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.AdjustParameterAddress
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.Condition
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.IgnoreAddress
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.IgnoreErrorInPreExecute
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.IsParameterVariable
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.Normal
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.UseIfConditionIsFalse
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.UseIfConditionIsTrue
  langs:
  - csharp
  - vb
  name: FunctionParameterInformation
  nameWithType: FunctionParameterInformation
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  type: Enum
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FunctionParameterInformation
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
    startLine: 20
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nInformation about an argument passed to a function used in the formula parser. \n"
  example: []
  syntax:
    content: >-
      [Flags]

      public enum FunctionParameterInformation
    content.vb: >-
      <Flags>

      Public Enum FunctionParameterInformation
  attributes:
  - type: System.FlagsAttribute
    ctor: System.FlagsAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.Normal
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.Normal
  id: Normal
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  langs:
  - csharp
  - vb
  name: Normal
  nameWithType: FunctionParameterInformation.Normal
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.Normal
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Normal
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
    startLine: 26
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThe argument will be handled as a normally.\n"
  example: []
  syntax:
    content: Normal = 1
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.IgnoreAddress
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.IgnoreAddress
  id: IgnoreAddress
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  langs:
  - csharp
  - vb
  name: IgnoreAddress
  nameWithType: FunctionParameterInformation.IgnoreAddress
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.IgnoreAddress
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IgnoreAddress
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
    startLine: 30
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf the argument is an address this address will be ignored in the dependency chain.\n"
  example: []
  syntax:
    content: IgnoreAddress = 2
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.Condition
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.Condition
  id: Condition
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  langs:
  - csharp
  - vb
  name: Condition
  nameWithType: FunctionParameterInformation.Condition
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.Condition
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Condition
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
    startLine: 34
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThis argument is a condition returning a boolean expression\n"
  example: []
  syntax:
    content: Condition = 4
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.UseIfConditionIsTrue
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.UseIfConditionIsTrue
  id: UseIfConditionIsTrue
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  langs:
  - csharp
  - vb
  name: UseIfConditionIsTrue
  nameWithType: FunctionParameterInformation.UseIfConditionIsTrue
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.UseIfConditionIsTrue
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: UseIfConditionIsTrue
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
    startLine: 38
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nUse this argument if the condtion is true. Requires a previous parameter to be <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.Condition\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: UseIfConditionIsTrue = 8
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.UseIfConditionIsFalse
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.UseIfConditionIsFalse
  id: UseIfConditionIsFalse
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  langs:
  - csharp
  - vb
  name: UseIfConditionIsFalse
  nameWithType: FunctionParameterInformation.UseIfConditionIsFalse
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.UseIfConditionIsFalse
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: UseIfConditionIsFalse
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
    startLine: 42
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nUse this argument if the condtion is false. Requires a previous parameter to be <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.Condition\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: UseIfConditionIsFalse = 16
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.IgnoreErrorInPreExecute
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.IgnoreErrorInPreExecute
  id: IgnoreErrorInPreExecute
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  langs:
  - csharp
  - vb
  name: IgnoreErrorInPreExecute
  nameWithType: FunctionParameterInformation.IgnoreErrorInPreExecute
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.IgnoreErrorInPreExecute
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IgnoreErrorInPreExecute
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
    startLine: 47
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nBy default errors found in parameters are returned as a compile result containing the error before calling the <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList%7bOfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument%7d%2cOfficeOpenXml.FormulaParsing.ParsingContext)\" data-throw-if-not-resolved=\"false\"></xref> method.\nSetting this value will allow the function to receive the error as an argument and process them.\n"
  example: []
  syntax:
    content: IgnoreErrorInPreExecute = 32
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.AdjustParameterAddress
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.AdjustParameterAddress
  id: AdjustParameterAddress
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  langs:
  - csharp
  - vb
  name: AdjustParameterAddress
  nameWithType: FunctionParameterInformation.AdjustParameterAddress
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.AdjustParameterAddress
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AdjustParameterAddress
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
    startLine: 51
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nIf the parameter is an address, call the <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress(System.Collections.Generic.IList%7bOfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult%7d%2cSystem.Int32%2cSystem.Collections.Generic.Queue%7bOfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress%7d%40)\" data-throw-if-not-resolved=\"false\"></xref> to adjust the address before dependency check.\n"
  example: []
  syntax:
    content: AdjustParameterAddress = 64
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.IsParameterVariable
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.IsParameterVariable
  id: IsParameterVariable
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  langs:
  - csharp
  - vb
  name: IsParameterVariable
  nameWithType: FunctionParameterInformation.IsParameterVariable
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.IsParameterVariable
  type: Field
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsParameterVariable
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionParameterInformation.cs
    startLine: 55
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nThe parameter is a variable which value is calculated by the next parameter.\n"
  example: []
  syntax:
    content: IsParameterVariable = 128
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions
  commentId: N:OfficeOpenXml.FormulaParsing.Excel.Functions
  name: OfficeOpenXml.FormulaParsing.Excel.Functions
  nameWithType: OfficeOpenXml.FormulaParsing.Excel.Functions
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: FunctionParameterInformation
  nameWithType: FunctionParameterInformation
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.Condition
  commentId: F:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation.Condition
  isExternal: true
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  isExternal: true
  name: Execute(IList<FunctionArgument>, ParsingContext)
  nameWithType: ExcelFunction.Execute(IList<FunctionArgument>, ParsingContext)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument>, OfficeOpenXml.FormulaParsing.ParsingContext)
  nameWithType.vb: ExcelFunction.Execute(IList(Of FunctionArgument), ParsingContext)
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument), OfficeOpenXml.FormulaParsing.ParsingContext)
  name.vb: Execute(IList(Of FunctionArgument), ParsingContext)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
    name: Execute
    nameWithType: ExcelFunction.Execute
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
    name: FunctionArgument
    nameWithType: FunctionArgument
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.ParsingContext
    name: ParsingContext
    nameWithType: ParsingContext
    fullName: OfficeOpenXml.FormulaParsing.ParsingContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)
    name: Execute
    nameWithType: ExcelFunction.Execute
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
    name: FunctionArgument
    nameWithType: FunctionArgument
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.ParsingContext
    name: ParsingContext
    nameWithType: ParsingContext
    fullName: OfficeOpenXml.FormulaParsing.ParsingContext
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: ExcelFunction
  nameWithType: ExcelFunction
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult},System.Int32,System.Collections.Generic.Queue{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}@)
  commentId: M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult},System.Int32,System.Collections.Generic.Queue{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}@)
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  isExternal: true
  name: GetNewParameterAddress(IList<CompileResult>, Int32, Queue<FormulaRangeAddress>)
  nameWithType: ExcelFunction.GetNewParameterAddress(IList<CompileResult>, Int32, Queue<FormulaRangeAddress>)
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress(System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult>, System.Int32, System.Collections.Generic.Queue<OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress>)
  nameWithType.vb: ExcelFunction.GetNewParameterAddress(IList(Of CompileResult), Int32, Queue(Of FormulaRangeAddress))
  fullName.vb: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress(System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult), System.Int32, System.Collections.Generic.Queue(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress))
  name.vb: GetNewParameterAddress(IList(Of CompileResult), Int32, Queue(Of FormulaRangeAddress))
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult},System.Int32,System.Collections.Generic.Queue{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}@)
    name: GetNewParameterAddress
    nameWithType: ExcelFunction.GetNewParameterAddress
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
    name: CompileResult
    nameWithType: CompileResult
    fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    name: FormulaRangeAddress
    nameWithType: FormulaRangeAddress
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress(System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult},System.Int32,System.Collections.Generic.Queue{OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress}@)
    name: GetNewParameterAddress
    nameWithType: ExcelFunction.GetNewParameterAddress
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetNewParameterAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
    name: CompileResult
    nameWithType: CompileResult
    fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
    name: FormulaRangeAddress
    nameWithType: FormulaRangeAddress
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
