### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl
  commentId: T:OfficeOpenXml.Drawing.Controls.ExcelControl
  id: ExcelControl
  parent: OfficeOpenXml.Drawing.Controls
  children:
  - OfficeOpenXml.Drawing.Controls.ExcelControl.AlternativeText
  - OfficeOpenXml.Drawing.Controls.ExcelControl.AutoFill
  - OfficeOpenXml.Drawing.Controls.ExcelControl.AutoPict
  - OfficeOpenXml.Drawing.Controls.ExcelControl.ControlPropertiesXml
  - OfficeOpenXml.Drawing.Controls.ExcelControl.ControlType
  - OfficeOpenXml.Drawing.Controls.ExcelControl.DefaultSize
  - OfficeOpenXml.Drawing.Controls.ExcelControl.Disabled
  - OfficeOpenXml.Drawing.Controls.ExcelControl.DrawingType
  - OfficeOpenXml.Drawing.Controls.ExcelControl.LinkedCell
  - OfficeOpenXml.Drawing.Controls.ExcelControl.Locked
  - OfficeOpenXml.Drawing.Controls.ExcelControl.Macro
  - OfficeOpenXml.Drawing.Controls.ExcelControl.Name
  - OfficeOpenXml.Drawing.Controls.ExcelControl.Print
  - OfficeOpenXml.Drawing.Controls.ExcelControl.ThreeDEffects
  langs:
  - csharp
  - vb
  name: ExcelControl
  nameWithType: ExcelControl
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl
  type: Class
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelControl
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 31
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nAn abstract class inherited by form controls\n"
  example: []
  syntax:
    content: 'public abstract class ExcelControl : ExcelDrawing, IDisposable'
    content.vb: >-
      Public MustInherit Class ExcelControl
          Inherits ExcelDrawing
          Implements IDisposable
  inheritance:
  - System.Object
  - OfficeOpenXml.XmlHelper
  - OfficeOpenXml.Drawing.ExcelDrawing
  derivedClasses:
  - OfficeOpenXml.Drawing.Controls.ExcelControlDialog
  - OfficeOpenXml.Drawing.Controls.ExcelControlList
  - OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar
  - OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton
  - OfficeOpenXml.Drawing.Controls.ExcelControlWithText
  implements:
  - System.IDisposable
  inheritedMembers:
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA
  - OfficeOpenXml.Drawing.ExcelDrawing.Description
  - OfficeOpenXml.Drawing.ExcelDrawing.EditAs
  - OfficeOpenXml.Drawing.ExcelDrawing.From
  - OfficeOpenXml.Drawing.ExcelDrawing.Position
  - OfficeOpenXml.Drawing.ExcelDrawing.Size
  - OfficeOpenXml.Drawing.ExcelDrawing.To
  - OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
  - OfficeOpenXml.Drawing.ExcelDrawing.As
  - OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
  - OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
  - OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  - OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  - OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
  - OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  - OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
  - OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  - OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  - OfficeOpenXml.Drawing.ExcelDrawing.Copy(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.ControlPropertiesXml
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.ControlPropertiesXml
  id: ControlPropertiesXml
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: ControlPropertiesXml
  nameWithType: ExcelControl.ControlPropertiesXml
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.ControlPropertiesXml
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ControlPropertiesXml
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 219
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nThe control property xml associated with the control\n"
  example: []
  syntax:
    content: public XmlDocument ControlPropertiesXml { get; }
    parameters: []
    return:
      type: System.Xml.XmlDocument
    content.vb: Public ReadOnly Property ControlPropertiesXml As XmlDocument
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.ControlPropertiesXml*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.ControlType
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.ControlType
  id: ControlType
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: ControlType
  nameWithType: ExcelControl.ControlType
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.ControlType
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ControlType
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 225
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nThe type of form control\n"
  example: []
  syntax:
    content: public abstract eControlType ControlType { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.Controls.eControlType
    content.vb: Public MustOverride ReadOnly Property ControlType As eControlType
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.ControlType*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.Name
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.Name
  id: Name
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ExcelControl.Name
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.Name
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Name
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 280
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nThe name of the control\n"
  example: []
  syntax:
    content: public override string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overrides Property Name As String
  overridden: OfficeOpenXml.Drawing.ExcelDrawing.Name
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.Name*
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.AlternativeText
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.AlternativeText
  id: AlternativeText
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: AlternativeText
  nameWithType: ExcelControl.AlternativeText
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.AlternativeText
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AlternativeText
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 330
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nGets or sets the alternative text for the control.\n"
  example: []
  syntax:
    content: public string AlternativeText { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property AlternativeText As String
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.AlternativeText*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.Macro
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.Macro
  id: Macro
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: Macro
  nameWithType: ExcelControl.Macro
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.Macro
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Macro
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 344
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nGets or sets the macro function assigned.\n"
  example: []
  syntax:
    content: public string Macro { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Macro As String
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.Macro*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.Print
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.Print
  id: Print
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: Print
  nameWithType: ExcelControl.Print
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.Print
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Print
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 371
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nThe object is printed when the document is printed.\n"
  example: []
  syntax:
    content: public override bool Print { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides Property Print As Boolean
  overridden: OfficeOpenXml.Drawing.ExcelDrawing.Print
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.Print*
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.Locked
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.Locked
  id: Locked
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: Locked
  nameWithType: ExcelControl.Locked
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.Locked
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Locked
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 387
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nThe object is locked when the sheet is protected..\n"
  example: []
  syntax:
    content: public override bool Locked { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides Property Locked As Boolean
  overridden: OfficeOpenXml.Drawing.ExcelDrawing.Locked
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.Locked*
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.AutoFill
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.AutoFill
  id: AutoFill
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: AutoFill
  nameWithType: ExcelControl.AutoFill
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.AutoFill
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AutoFill
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 402
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nIf the controls fill formatting is provided automatically\n"
  example: []
  syntax:
    content: public bool AutoFill { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AutoFill As Boolean
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.AutoFill*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.AutoPict
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.AutoPict
  id: AutoPict
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: AutoPict
  nameWithType: ExcelControl.AutoPict
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.AutoPict
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AutoPict
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 411
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nIf the controls size is formatted automatically.\n"
  example: []
  syntax:
    content: public bool AutoPict { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AutoPict As Boolean
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.AutoPict*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.DefaultSize
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.DefaultSize
  id: DefaultSize
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: DefaultSize
  nameWithType: ExcelControl.DefaultSize
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.DefaultSize
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: DefaultSize
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 420
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nReturns true if the object is at its default size.\n"
  example: []
  syntax:
    content: public bool DefaultSize { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property DefaultSize As Boolean
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.DefaultSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.Disabled
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.Disabled
  id: Disabled
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: Disabled
  nameWithType: ExcelControl.Disabled
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.Disabled
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Disabled
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 429
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nIf true, the object is allowed to run an attached macro\n"
  example: []
  syntax:
    content: public bool Disabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Disabled As Boolean
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.Disabled*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.ThreeDEffects
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.ThreeDEffects
  id: ThreeDEffects
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: ThreeDEffects
  nameWithType: ExcelControl.ThreeDEffects
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.ThreeDEffects
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ThreeDEffects
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 437
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nIf the control has 3D effects enabled.\n"
  example: []
  syntax:
    content: public bool ThreeDEffects { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ThreeDEffects As Boolean
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.ThreeDEffects*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.LinkedCell
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.LinkedCell
  id: LinkedCell
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: LinkedCell
  nameWithType: ExcelControl.LinkedCell
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.LinkedCell
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LinkedCell
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 477
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nGets or sets the address to the cell that is linked to the control. \n"
  example: []
  syntax:
    content: public ExcelAddressBase LinkedCell { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelAddressBase
    content.vb: Public Property LinkedCell As ExcelAddressBase
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.LinkedCell*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.DrawingType
  commentId: P:OfficeOpenXml.Drawing.Controls.ExcelControl.DrawingType
  id: DrawingType
  parent: OfficeOpenXml.Drawing.Controls.ExcelControl
  langs:
  - csharp
  - vb
  name: DrawingType
  nameWithType: ExcelControl.DrawingType
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.DrawingType
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/Controls/ExcelControl.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: DrawingType
    path: ../src/EPPlus/Drawing/Controls/ExcelControl.cs
    startLine: 620
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing.Controls
  summary: "\nThe type of drawing. Always set to <xref href=\"OfficeOpenXml.Drawing.eDrawingType.Control\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public override eDrawingType DrawingType { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.eDrawingType
    content.vb: Public Overrides ReadOnly Property DrawingType As eDrawingType
  overridden: OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
  overload: OfficeOpenXml.Drawing.Controls.ExcelControl.DrawingType*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: OfficeOpenXml.Drawing.Controls
  commentId: N:OfficeOpenXml.Drawing.Controls
  name: OfficeOpenXml.Drawing.Controls
  nameWithType: OfficeOpenXml.Drawing.Controls
  fullName: OfficeOpenXml.Drawing.Controls
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.XmlHelper
  commentId: T:OfficeOpenXml.XmlHelper
  parent: OfficeOpenXml
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: OfficeOpenXml.XmlHelper
- uid: OfficeOpenXml.Drawing.ExcelDrawing
  commentId: T:OfficeOpenXml.Drawing.ExcelDrawing
  parent: OfficeOpenXml.Drawing
  name: ExcelDrawing
  nameWithType: ExcelDrawing
  fullName: OfficeOpenXml.Drawing.ExcelDrawing
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EMU_PER_PIXEL
  nameWithType: ExcelDrawing.EMU_PER_PIXEL
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EMU_PER_POINT
  nameWithType: ExcelDrawing.EMU_PER_POINT
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EMU_PER_CM
  nameWithType: ExcelDrawing.EMU_PER_CM
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EMU_PER_MM
  nameWithType: ExcelDrawing.EMU_PER_MM
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EMU_PER_US_INCH
  nameWithType: ExcelDrawing.EMU_PER_US_INCH
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EMU_PER_PICA
  nameWithType: ExcelDrawing.EMU_PER_PICA
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Description
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Description
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Description
  nameWithType: ExcelDrawing.Description
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Description
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EditAs
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.EditAs
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: EditAs
  nameWithType: ExcelDrawing.EditAs
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EditAs
- uid: OfficeOpenXml.Drawing.ExcelDrawing.From
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.From
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: From
  nameWithType: ExcelDrawing.From
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.From
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Position
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Position
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Position
  nameWithType: ExcelDrawing.Position
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Position
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Size
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Size
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Size
  nameWithType: ExcelDrawing.Size
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Size
- uid: OfficeOpenXml.Drawing.ExcelDrawing.To
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.To
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: To
  nameWithType: ExcelDrawing.To
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.To
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Hyperlink
  nameWithType: ExcelDrawing.Hyperlink
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
- uid: OfficeOpenXml.Drawing.ExcelDrawing.As
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.As
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: As
  nameWithType: ExcelDrawing.As
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.As
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: SetPosition(Int32, Int32)
  nameWithType: ExcelDrawing.SetPosition(Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)
    name: SetPosition
    nameWithType: ExcelDrawing.SetPosition
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)
    name: SetPosition
    nameWithType: ExcelDrawing.SetPosition
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: CellAnchor
  nameWithType: ExcelDrawing.CellAnchor
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
- uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: ChangeCellAnchor(eEditAs, Int32, Int32, Int32, Int32)
  nameWithType: ExcelDrawing.ChangeCellAnchor(eEditAs, Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs, System.Int32, System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
    name: ChangeCellAnchor
    nameWithType: ExcelDrawing.ChangeCellAnchor
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.eEditAs
    name: eEditAs
    nameWithType: eEditAs
    fullName: OfficeOpenXml.Drawing.eEditAs
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
    name: ChangeCellAnchor
    nameWithType: ExcelDrawing.ChangeCellAnchor
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.eEditAs
    name: eEditAs
    nameWithType: eEditAs
    fullName: OfficeOpenXml.Drawing.eEditAs
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: ChangeCellAnchor(eEditAs)
  nameWithType: ExcelDrawing.ChangeCellAnchor(eEditAs)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
    name: ChangeCellAnchor
    nameWithType: ExcelDrawing.ChangeCellAnchor
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.eEditAs
    name: eEditAs
    nameWithType: eEditAs
    fullName: OfficeOpenXml.Drawing.eEditAs
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
    name: ChangeCellAnchor
    nameWithType: ExcelDrawing.ChangeCellAnchor
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.eEditAs
    name: eEditAs
    nameWithType: eEditAs
    fullName: OfficeOpenXml.Drawing.eEditAs
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: SetPosition(Int32, Int32, Int32, Int32)
  nameWithType: ExcelDrawing.SetPosition(Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32, System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
    name: SetPosition
    nameWithType: ExcelDrawing.SetPosition
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
    name: SetPosition
    nameWithType: ExcelDrawing.SetPosition
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: SetSize(Int32)
  nameWithType: ExcelDrawing.SetSize(Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
    name: SetSize
    nameWithType: ExcelDrawing.SetSize
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
    name: SetSize
    nameWithType: ExcelDrawing.SetSize
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: SetSize(Int32, Int32)
  nameWithType: ExcelDrawing.SetSize(Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)
    name: SetSize
    nameWithType: ExcelDrawing.SetSize
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)
    name: SetSize
    nameWithType: ExcelDrawing.SetSize
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: SendToBack()
  nameWithType: ExcelDrawing.SendToBack()
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack()
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
    name: SendToBack
    nameWithType: ExcelDrawing.SendToBack
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
    name: SendToBack
    nameWithType: ExcelDrawing.SendToBack
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: BringToFront()
  nameWithType: ExcelDrawing.BringToFront()
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront()
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
    name: BringToFront
    nameWithType: ExcelDrawing.BringToFront
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
    name: BringToFront
    nameWithType: ExcelDrawing.BringToFront
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Group(ExcelDrawing[])
  nameWithType: ExcelDrawing.Group(ExcelDrawing[])
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
  nameWithType.vb: ExcelDrawing.Group(ExcelDrawing())
  fullName.vb: OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing())
  name.vb: Group(ExcelDrawing())
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
    name: Group
    nameWithType: ExcelDrawing.Group
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.Group
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.ExcelDrawing
    name: ExcelDrawing
    nameWithType: ExcelDrawing
    fullName: OfficeOpenXml.Drawing.ExcelDrawing
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
    name: Group
    nameWithType: ExcelDrawing.Group
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.Group
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.ExcelDrawing
    name: ExcelDrawing
    nameWithType: ExcelDrawing
    fullName: OfficeOpenXml.Drawing.ExcelDrawing
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: UnGroup(Boolean)
  nameWithType: ExcelDrawing.UnGroup(Boolean)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
    name: UnGroup
    nameWithType: ExcelDrawing.UnGroup
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
    name: UnGroup
    nameWithType: ExcelDrawing.UnGroup
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: ParentGroup
  nameWithType: ExcelDrawing.ParentGroup
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Dispose()
  nameWithType: ExcelDrawing.Dispose()
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Dispose()
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.Dispose
    name: Dispose
    nameWithType: ExcelDrawing.Dispose
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.Dispose
    name: Dispose
    nameWithType: ExcelDrawing.Dispose
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: AdjustPositionAndSize()
  nameWithType: ExcelDrawing.AdjustPositionAndSize()
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize()
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
    name: AdjustPositionAndSize
    nameWithType: ExcelDrawing.AdjustPositionAndSize
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
    name: AdjustPositionAndSize
    nameWithType: ExcelDrawing.AdjustPositionAndSize
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Copy(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.Copy(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: Copy(ExcelWorksheet, Int32, Int32, Int32, Int32)
  nameWithType: ExcelDrawing.Copy(ExcelWorksheet, Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Copy(OfficeOpenXml.ExcelWorksheet, System.Int32, System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.Copy(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32)
    name: Copy
    nameWithType: ExcelDrawing.Copy
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.Copy
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.ExcelWorksheet
    name: ExcelWorksheet
    nameWithType: ExcelWorksheet
    fullName: OfficeOpenXml.ExcelWorksheet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.Copy(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32)
    name: Copy
    nameWithType: ExcelDrawing.Copy
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.Copy
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.ExcelWorksheet
    name: ExcelWorksheet
    nameWithType: ExcelWorksheet
    fullName: OfficeOpenXml.ExcelWorksheet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: OfficeOpenXml.Drawing
  commentId: N:OfficeOpenXml.Drawing
  name: OfficeOpenXml.Drawing
  nameWithType: OfficeOpenXml.Drawing
  fullName: OfficeOpenXml.Drawing
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.ControlPropertiesXml*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.ControlPropertiesXml
  name: ControlPropertiesXml
  nameWithType: ExcelControl.ControlPropertiesXml
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.ControlPropertiesXml
- uid: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  parent: System.Xml
  isExternal: true
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.ControlType*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.ControlType
  name: ControlType
  nameWithType: ExcelControl.ControlType
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.ControlType
- uid: OfficeOpenXml.Drawing.Controls.eControlType
  commentId: T:OfficeOpenXml.Drawing.Controls.eControlType
  parent: OfficeOpenXml.Drawing.Controls
  name: eControlType
  nameWithType: eControlType
  fullName: OfficeOpenXml.Drawing.Controls.eControlType
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Name
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Name
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Name
  nameWithType: ExcelDrawing.Name
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Name
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.Name*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.Name
  name: Name
  nameWithType: ExcelControl.Name
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.AlternativeText*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.AlternativeText
  name: AlternativeText
  nameWithType: ExcelControl.AlternativeText
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.AlternativeText
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.Macro*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.Macro
  name: Macro
  nameWithType: ExcelControl.Macro
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.Macro
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Print
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Print
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Print
  nameWithType: ExcelDrawing.Print
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Print
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.Print*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.Print
  name: Print
  nameWithType: ExcelControl.Print
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.Print
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Locked
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Locked
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: Locked
  nameWithType: ExcelDrawing.Locked
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Locked
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.Locked*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.Locked
  name: Locked
  nameWithType: ExcelControl.Locked
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.Locked
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.AutoFill*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.AutoFill
  name: AutoFill
  nameWithType: ExcelControl.AutoFill
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.AutoFill
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.AutoPict*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.AutoPict
  name: AutoPict
  nameWithType: ExcelControl.AutoPict
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.AutoPict
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.DefaultSize*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.DefaultSize
  name: DefaultSize
  nameWithType: ExcelControl.DefaultSize
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.DefaultSize
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.Disabled*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.Disabled
  name: Disabled
  nameWithType: ExcelControl.Disabled
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.Disabled
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.ThreeDEffects*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.ThreeDEffects
  name: ThreeDEffects
  nameWithType: ExcelControl.ThreeDEffects
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.ThreeDEffects
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.LinkedCell*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.LinkedCell
  name: LinkedCell
  nameWithType: ExcelControl.LinkedCell
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.LinkedCell
- uid: OfficeOpenXml.ExcelAddressBase
  commentId: T:OfficeOpenXml.ExcelAddressBase
  parent: OfficeOpenXml
  name: ExcelAddressBase
  nameWithType: ExcelAddressBase
  fullName: OfficeOpenXml.ExcelAddressBase
- uid: OfficeOpenXml.Drawing.eDrawingType.Control
  commentId: F:OfficeOpenXml.Drawing.eDrawingType.Control
  isExternal: true
- uid: OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: DrawingType
  nameWithType: ExcelDrawing.DrawingType
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
- uid: OfficeOpenXml.Drawing.Controls.ExcelControl.DrawingType*
  commentId: Overload:OfficeOpenXml.Drawing.Controls.ExcelControl.DrawingType
  name: DrawingType
  nameWithType: ExcelControl.DrawingType
  fullName: OfficeOpenXml.Drawing.Controls.ExcelControl.DrawingType
- uid: OfficeOpenXml.Drawing.eDrawingType
  commentId: T:OfficeOpenXml.Drawing.eDrawingType
  parent: OfficeOpenXml.Drawing
  name: eDrawingType
  nameWithType: eDrawingType
  fullName: OfficeOpenXml.Drawing.eDrawingType
