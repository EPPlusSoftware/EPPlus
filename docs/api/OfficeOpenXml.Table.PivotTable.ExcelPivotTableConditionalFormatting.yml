### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  commentId: T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  id: ExcelPivotTableConditionalFormatting
  parent: OfficeOpenXml.Table.PivotTable
  children:
  - OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Areas
  - OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.ConditionalFormatting
  - OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Scope
  - OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Type
  langs:
  - csharp
  - vb
  name: ExcelPivotTableConditionalFormatting
  nameWithType: ExcelPivotTableConditionalFormatting
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  type: Class
  source:
    remote:
      path: src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormatting.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelPivotTableConditionalFormatting
    path: ../src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormatting.cs
    startLine: 23
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table.PivotTable
  summary: "\nDefines a pivot table area of selection used for styling.\n"
  example: []
  syntax:
    content: 'public class ExcelPivotTableConditionalFormatting : XmlHelper'
    content.vb: >-
      Public Class ExcelPivotTableConditionalFormatting
          Inherits XmlHelper
  inheritance:
  - System.Object
  - OfficeOpenXml.XmlHelper
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Areas
  commentId: P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Areas
  id: Areas
  parent: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  langs:
  - csharp
  - vb
  name: Areas
  nameWithType: ExcelPivotTableConditionalFormatting.Areas
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Areas
  type: Property
  source:
    remote:
      path: src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormatting.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Areas
    path: ../src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormatting.cs
    startLine: 55
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table.PivotTable
  summary: "\nA collection of conditions for the conditional formattings. Conditions can be set for specific row-, column- or data fields. Specify labels, data grand totals and more.\n"
  example: []
  syntax:
    content: public ExcelPivotTableAreaConditionalFormattingCollection Areas { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaConditionalFormattingCollection
    content.vb: Public ReadOnly Property Areas As ExcelPivotTableAreaConditionalFormattingCollection
  overload: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Areas*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.ConditionalFormatting
  commentId: P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.ConditionalFormatting
  id: ConditionalFormatting
  parent: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  langs:
  - csharp
  - vb
  name: ConditionalFormatting
  nameWithType: ExcelPivotTableConditionalFormatting.ConditionalFormatting
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.ConditionalFormatting
  type: Property
  source:
    remote:
      path: src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormatting.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ConditionalFormatting
    path: ../src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormatting.cs
    startLine: 64
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table.PivotTable
  summary: "\nAccess to the style property for the pivot area\n"
  example: []
  syntax:
    content: public IExcelConditionalFormattingRule ConditionalFormatting { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
    content.vb: Public ReadOnly Property ConditionalFormatting As IExcelConditionalFormattingRule
  overload: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.ConditionalFormatting*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Type
  commentId: P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Type
  id: Type
  parent: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ExcelPivotTableConditionalFormatting.Type
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Type
  type: Property
  source:
    remote:
      path: src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormatting.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Type
    path: ../src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormatting.cs
    startLine: 99
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table.PivotTable
  summary: "\nThe condition type of the pivot table conditional formatting rule. Default is None.\nThis property only apply to condional formattings for above/below -average, -stdev amd top or bottom.\n"
  example: []
  syntax:
    content: public ConditionType Type { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.Table.PivotTable.ConditionType
    content.vb: Public Property Type As ConditionType
  overload: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Type*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If setting this property to Row or Column when having an unsupported conditional formatting rule.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Scope
  commentId: P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Scope
  id: Scope
  parent: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  langs:
  - csharp
  - vb
  name: Scope
  nameWithType: ExcelPivotTableConditionalFormatting.Scope
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Scope
  type: Property
  source:
    remote:
      path: src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormatting.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Scope
    path: ../src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormatting.cs
    startLine: 128
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table.PivotTable
  summary: "\nThe scope of the pivot table conditional formatting rule. Default is Selection.\n"
  example: []
  syntax:
    content: public ConditionScope Scope { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.Table.PivotTable.ConditionScope
    content.vb: Public Property Scope As ConditionScope
  overload: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Scope*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: OfficeOpenXml.Table.PivotTable
  commentId: N:OfficeOpenXml.Table.PivotTable
  name: OfficeOpenXml.Table.PivotTable
  nameWithType: OfficeOpenXml.Table.PivotTable
  fullName: OfficeOpenXml.Table.PivotTable
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.XmlHelper
  commentId: T:OfficeOpenXml.XmlHelper
  parent: OfficeOpenXml
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: OfficeOpenXml.XmlHelper
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Areas*
  commentId: Overload:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Areas
  name: Areas
  nameWithType: ExcelPivotTableConditionalFormatting.Areas
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Areas
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaConditionalFormattingCollection
  commentId: T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaConditionalFormattingCollection
  parent: OfficeOpenXml.Table.PivotTable
  name: ExcelPivotTableAreaConditionalFormattingCollection
  nameWithType: ExcelPivotTableAreaConditionalFormattingCollection
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaConditionalFormattingCollection
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.ConditionalFormatting*
  commentId: Overload:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.ConditionalFormatting
  name: ConditionalFormatting
  nameWithType: ExcelPivotTableConditionalFormatting.ConditionalFormatting
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.ConditionalFormatting
- uid: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  commentId: T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
  parent: OfficeOpenXml.ConditionalFormatting.Contracts
  name: IExcelConditionalFormattingRule
  nameWithType: IExcelConditionalFormattingRule
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule
- uid: OfficeOpenXml.ConditionalFormatting.Contracts
  commentId: N:OfficeOpenXml.ConditionalFormatting.Contracts
  name: OfficeOpenXml.ConditionalFormatting.Contracts
  nameWithType: OfficeOpenXml.ConditionalFormatting.Contracts
  fullName: OfficeOpenXml.ConditionalFormatting.Contracts
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Type*
  commentId: Overload:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Type
  name: Type
  nameWithType: ExcelPivotTableConditionalFormatting.Type
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Type
- uid: OfficeOpenXml.Table.PivotTable.ConditionType
  commentId: T:OfficeOpenXml.Table.PivotTable.ConditionType
  parent: OfficeOpenXml.Table.PivotTable
  name: ConditionType
  nameWithType: ConditionType
  fullName: OfficeOpenXml.Table.PivotTable.ConditionType
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Scope*
  commentId: Overload:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Scope
  name: Scope
  nameWithType: ExcelPivotTableConditionalFormatting.Scope
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Scope
- uid: OfficeOpenXml.Table.PivotTable.ConditionScope
  commentId: T:OfficeOpenXml.Table.PivotTable.ConditionScope
  parent: OfficeOpenXml.Table.PivotTable
  name: ConditionScope
  nameWithType: ConditionScope
  fullName: OfficeOpenXml.Table.PivotTable.ConditionScope
