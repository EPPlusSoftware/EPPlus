### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.ExcelRangeColumn
  commentId: T:OfficeOpenXml.ExcelRangeColumn
  id: ExcelRangeColumn
  parent: OfficeOpenXml
  children:
  - OfficeOpenXml.ExcelRangeColumn.AutoFit
  - OfficeOpenXml.ExcelRangeColumn.AutoFit(System.Double)
  - OfficeOpenXml.ExcelRangeColumn.AutoFit(System.Double,System.Double)
  - OfficeOpenXml.ExcelRangeColumn.BestFit
  - OfficeOpenXml.ExcelRangeColumn.CollapseChildren(System.Boolean)
  - OfficeOpenXml.ExcelRangeColumn.Collapsed
  - OfficeOpenXml.ExcelRangeColumn.Current
  - OfficeOpenXml.ExcelRangeColumn.Dispose
  - OfficeOpenXml.ExcelRangeColumn.EndColumn
  - OfficeOpenXml.ExcelRangeColumn.ExpandChildren(System.Boolean)
  - OfficeOpenXml.ExcelRangeColumn.GetEnumerator
  - OfficeOpenXml.ExcelRangeColumn.Group
  - OfficeOpenXml.ExcelRangeColumn.Hidden
  - OfficeOpenXml.ExcelRangeColumn.MoveNext
  - OfficeOpenXml.ExcelRangeColumn.OutlineLevel
  - OfficeOpenXml.ExcelRangeColumn.PageBreak
  - OfficeOpenXml.ExcelRangeColumn.Phonetic
  - OfficeOpenXml.ExcelRangeColumn.Range
  - OfficeOpenXml.ExcelRangeColumn.Reset
  - OfficeOpenXml.ExcelRangeColumn.SetVisibleOutlineLevel(System.Int32,System.Boolean)
  - OfficeOpenXml.ExcelRangeColumn.StartColumn
  - OfficeOpenXml.ExcelRangeColumn.Style
  - OfficeOpenXml.ExcelRangeColumn.StyleID
  - OfficeOpenXml.ExcelRangeColumn.StyleName
  - OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerable#GetEnumerator
  - OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerator#Current
  - OfficeOpenXml.ExcelRangeColumn.UnGroup
  - OfficeOpenXml.ExcelRangeColumn.Width
  langs:
  - csharp
  - vb
  name: ExcelRangeColumn
  nameWithType: ExcelRangeColumn
  fullName: OfficeOpenXml.ExcelRangeColumn
  type: Class
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelRangeColumn
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 93
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nRepresents a range of columns\n"
  example: []
  syntax:
    content: 'public class ExcelRangeColumn : IEnumerable<ExcelRangeColumn>, IEnumerable, IEnumerator<ExcelRangeColumn>, IEnumerator, IDisposable'
    content.vb: >-
      Public Class ExcelRangeColumn
          Implements IEnumerable(Of ExcelRangeColumn), IEnumerable, IEnumerator(Of ExcelRangeColumn), IEnumerator, IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - OfficeOpenXml.ExcelColumnCollection
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeColumn}
  - System.Collections.IEnumerable
  - System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeColumn}
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.ExcelRangeColumn.StartColumn
  commentId: P:OfficeOpenXml.ExcelRangeColumn.StartColumn
  id: StartColumn
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: StartColumn
  nameWithType: ExcelRangeColumn.StartColumn
  fullName: OfficeOpenXml.ExcelRangeColumn.StartColumn
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: StartColumn
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 106
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nThe first column in the collection\n"
  example: []
  syntax:
    content: public int StartColumn { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property StartColumn As Integer
  overload: OfficeOpenXml.ExcelRangeColumn.StartColumn*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeColumn.EndColumn
  commentId: P:OfficeOpenXml.ExcelRangeColumn.EndColumn
  id: EndColumn
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: EndColumn
  nameWithType: ExcelRangeColumn.EndColumn
  fullName: OfficeOpenXml.ExcelRangeColumn.EndColumn
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: EndColumn
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 116
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nThe last column in the collection\n"
  example: []
  syntax:
    content: public int EndColumn { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property EndColumn As Integer
  overload: OfficeOpenXml.ExcelRangeColumn.EndColumn*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeColumn.Collapsed
  commentId: P:OfficeOpenXml.ExcelRangeColumn.Collapsed
  id: Collapsed
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: Collapsed
  nameWithType: ExcelRangeColumn.Collapsed
  fullName: OfficeOpenXml.ExcelRangeColumn.Collapsed
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Collapsed
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 126
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nIf the column is collapsed in outline mode\n"
  example: []
  syntax:
    content: public bool Collapsed { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Collapsed As Boolean
  overload: OfficeOpenXml.ExcelRangeColumn.Collapsed*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.Group
  commentId: M:OfficeOpenXml.ExcelRangeColumn.Group
  id: Group
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: Group()
  nameWithType: ExcelRangeColumn.Group()
  fullName: OfficeOpenXml.ExcelRangeColumn.Group()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Group
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 140
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGroups the columns using an outline. Adds one to <xref href=\"OfficeOpenXml.ExcelRangeColumn.OutlineLevel\" data-throw-if-not-resolved=\"false\"></xref> for each column if the outline level is less than 8.\n"
  example: []
  syntax:
    content: public void Group()
    content.vb: Public Sub Group
  overload: OfficeOpenXml.ExcelRangeColumn.Group*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.UnGroup
  commentId: M:OfficeOpenXml.ExcelRangeColumn.UnGroup
  id: UnGroup
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: UnGroup()
  nameWithType: ExcelRangeColumn.UnGroup()
  fullName: OfficeOpenXml.ExcelRangeColumn.UnGroup()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: UnGroup
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 148
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nUngroups the columns from the outline. \nSubtracts one from <xref href=\"OfficeOpenXml.ExcelRangeColumn.OutlineLevel\" data-throw-if-not-resolved=\"false\"></xref> for each column if the outline level is larger that zero. \n"
  example: []
  syntax:
    content: public void UnGroup()
    content.vb: Public Sub UnGroup
  overload: OfficeOpenXml.ExcelRangeColumn.UnGroup*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.CollapseChildren(System.Boolean)
  commentId: M:OfficeOpenXml.ExcelRangeColumn.CollapseChildren(System.Boolean)
  id: CollapseChildren(System.Boolean)
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: CollapseChildren(Boolean)
  nameWithType: ExcelRangeColumn.CollapseChildren(Boolean)
  fullName: OfficeOpenXml.ExcelRangeColumn.CollapseChildren(System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CollapseChildren
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 157
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nCollapses and hides the column&apos;s children. Children are columns immegetaly to the right or left of the column depending on the <xref href=\"OfficeOpenXml.ExcelWorksheet.OutLineSummaryRight\" data-throw-if-not-resolved=\"false\"></xref>\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">allLevels</code>\n"
  example: []
  syntax:
    content: public void CollapseChildren(bool allLevels = true)
    parameters:
    - id: allLevels
      type: System.Boolean
    content.vb: Public Sub CollapseChildren(allLevels As Boolean = True)
  overload: OfficeOpenXml.ExcelRangeColumn.CollapseChildren*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.ExpandChildren(System.Boolean)
  commentId: M:OfficeOpenXml.ExcelRangeColumn.ExpandChildren(System.Boolean)
  id: ExpandChildren(System.Boolean)
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: ExpandChildren(Boolean)
  nameWithType: ExcelRangeColumn.ExpandChildren(Boolean)
  fullName: OfficeOpenXml.ExcelRangeColumn.ExpandChildren(System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExpandChildren
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 179
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nExpands and shows the column&apos;s children. Children are columns immegetaly to the right or left of the column depending on the <xref href=\"OfficeOpenXml.ExcelWorksheet.OutLineSummaryRight\" data-throw-if-not-resolved=\"false\"></xref>\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">allLevels</code>\n"
  example: []
  syntax:
    content: public void ExpandChildren(bool allLevels = true)
    parameters:
    - id: allLevels
      type: System.Boolean
    content.vb: Public Sub ExpandChildren(allLevels As Boolean = True)
  overload: OfficeOpenXml.ExcelRangeColumn.ExpandChildren*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.SetVisibleOutlineLevel(System.Int32,System.Boolean)
  commentId: M:OfficeOpenXml.ExcelRangeColumn.SetVisibleOutlineLevel(System.Int32,System.Boolean)
  id: SetVisibleOutlineLevel(System.Int32,System.Boolean)
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: SetVisibleOutlineLevel(Int32, Boolean)
  nameWithType: ExcelRangeColumn.SetVisibleOutlineLevel(Int32, Boolean)
  fullName: OfficeOpenXml.ExcelRangeColumn.SetVisibleOutlineLevel(System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SetVisibleOutlineLevel
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 202
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nExpands the rows to the <xref href=\"OfficeOpenXml.ExcelRangeColumn.OutlineLevel\" data-throw-if-not-resolved=\"false\"></xref> supplied. \n"
  example: []
  syntax:
    content: public void SetVisibleOutlineLevel(int level, bool collapseChildren = true)
    parameters:
    - id: level
      type: System.Int32
      description: Expands all rows with a <xref href="OfficeOpenXml.ExcelRangeColumn.OutlineLevel" data-throw-if-not-resolved="false"></xref> Equal or Greater than this number.
    - id: collapseChildren
      type: System.Boolean
      description: Collapses all children with a greater <xref href="OfficeOpenXml.ExcelRangeColumn.OutlineLevel" data-throw-if-not-resolved="false"></xref> than <code data-dev-comment-type="paramref" class="paramref">level</code>
    content.vb: Public Sub SetVisibleOutlineLevel(level As Integer, collapseChildren As Boolean = True)
  overload: OfficeOpenXml.ExcelRangeColumn.SetVisibleOutlineLevel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.OutlineLevel
  commentId: P:OfficeOpenXml.ExcelRangeColumn.OutlineLevel
  id: OutlineLevel
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: OutlineLevel
  nameWithType: ExcelRangeColumn.OutlineLevel
  fullName: OfficeOpenXml.ExcelRangeColumn.OutlineLevel
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: OutlineLevel
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 224
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nOutline level. Zero if no outline. Can not be negative.\n"
  example: []
  syntax:
    content: public int OutlineLevel { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property OutlineLevel As Integer
  overload: OfficeOpenXml.ExcelRangeColumn.OutlineLevel*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.Phonetic
  commentId: P:OfficeOpenXml.ExcelRangeColumn.Phonetic
  id: Phonetic
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: Phonetic
  nameWithType: ExcelRangeColumn.Phonetic
  fullName: OfficeOpenXml.ExcelRangeColumn.Phonetic
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Phonetic
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 238
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nTrue if the column should show phonetic\n"
  example: []
  syntax:
    content: public bool Phonetic { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Phonetic As Boolean
  overload: OfficeOpenXml.ExcelRangeColumn.Phonetic*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.BestFit
  commentId: P:OfficeOpenXml.ExcelRangeColumn.BestFit
  id: BestFit
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: BestFit
  nameWithType: ExcelRangeColumn.BestFit
  fullName: OfficeOpenXml.ExcelRangeColumn.BestFit
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: BestFit
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 253
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nIndicates that the column should resize when numbers are entered into the column to fit the size of the text.\nThis only applies to columns where the size has not been set.\n"
  example: []
  syntax:
    content: public bool BestFit { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property BestFit As Boolean
  overload: OfficeOpenXml.ExcelRangeColumn.BestFit*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.Hidden
  commentId: P:OfficeOpenXml.ExcelRangeColumn.Hidden
  id: Hidden
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: Hidden
  nameWithType: ExcelRangeColumn.Hidden
  fullName: OfficeOpenXml.ExcelRangeColumn.Hidden
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Hidden
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 268
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nIf the column is hidden.\n"
  example: []
  syntax:
    content: public bool Hidden { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Hidden As Boolean
  overload: OfficeOpenXml.ExcelRangeColumn.Hidden*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.Width
  commentId: P:OfficeOpenXml.ExcelRangeColumn.Width
  id: Width
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: Width
  nameWithType: ExcelRangeColumn.Width
  fullName: OfficeOpenXml.ExcelRangeColumn.Width
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Width
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 282
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nRow width of the column.\n"
  example: []
  syntax:
    content: public double Width { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property Width As Double
  overload: OfficeOpenXml.ExcelRangeColumn.Width*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.PageBreak
  commentId: P:OfficeOpenXml.ExcelRangeColumn.PageBreak
  id: PageBreak
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: PageBreak
  nameWithType: ExcelRangeColumn.PageBreak
  fullName: OfficeOpenXml.ExcelRangeColumn.PageBreak
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: PageBreak
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 304
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nAdds a manual page break after the column.\n"
  example: []
  syntax:
    content: public bool PageBreak { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property PageBreak As Boolean
  overload: OfficeOpenXml.ExcelRangeColumn.PageBreak*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.Style
  commentId: P:OfficeOpenXml.ExcelRangeColumn.Style
  id: Style
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: Style
  nameWithType: ExcelRangeColumn.Style
  fullName: OfficeOpenXml.ExcelRangeColumn.Style
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Style
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 320
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nThe Style applied to the whole column(s). Only effects cells with no individual style set. \nUse Range object if you want to set specific styles.\n"
  example: []
  syntax:
    content: public ExcelStyle Style { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Style.ExcelStyle
    content.vb: Public ReadOnly Property Style As ExcelStyle
  overload: OfficeOpenXml.ExcelRangeColumn.Style*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeColumn.StyleName
  commentId: P:OfficeOpenXml.ExcelRangeColumn.StyleName
  id: StyleName
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: StyleName
  nameWithType: ExcelRangeColumn.StyleName
  fullName: OfficeOpenXml.ExcelRangeColumn.StyleName
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: StyleName
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 333
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSets the style for the entire column using a style name.\n"
  example: []
  syntax:
    content: public string StyleName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property StyleName As String
  overload: OfficeOpenXml.ExcelRangeColumn.StyleName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.StyleID
  commentId: P:OfficeOpenXml.ExcelRangeColumn.StyleID
  id: StyleID
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: StyleID
  nameWithType: ExcelRangeColumn.StyleID
  fullName: OfficeOpenXml.ExcelRangeColumn.StyleID
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: StyleID
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 348
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSets the style for the entire column using the style ID.           \n"
  example: []
  syntax:
    content: public int StyleID { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property StyleID As Integer
  overload: OfficeOpenXml.ExcelRangeColumn.StyleID*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.Current
  commentId: P:OfficeOpenXml.ExcelRangeColumn.Current
  id: Current
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: ExcelRangeColumn.Current
  fullName: OfficeOpenXml.ExcelRangeColumn.Current
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Current
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 362
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nThe current range when enumerating\n"
  example: []
  syntax:
    content: public ExcelRangeColumn Current { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelRangeColumn
    content.vb: Public ReadOnly Property Current As ExcelRangeColumn
  overload: OfficeOpenXml.ExcelRangeColumn.Current*
  implements:
  - System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeColumn}.Current
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerator#Current
  commentId: P:OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: IEnumerator.Current
  nameWithType: ExcelRangeColumn.IEnumerator.Current
  fullName: OfficeOpenXml.ExcelRangeColumn.System.Collections.IEnumerator.Current
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: System.Collections.IEnumerator.Current
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 372
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nThe current range when enumerating\n"
  example: []
  syntax:
    content: object IEnumerator.Current { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property System.Collections.IEnumerator.Current As Object Implements IEnumerator.Current
  overload: OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerator#Current*
  implements:
  - System.Collections.IEnumerator.Current
  nameWithType.vb: ExcelRangeColumn.System.Collections.IEnumerator.Current
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IEnumerator.Current
- uid: OfficeOpenXml.ExcelRangeColumn.AutoFit
  commentId: M:OfficeOpenXml.ExcelRangeColumn.AutoFit
  id: AutoFit
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: AutoFit()
  nameWithType: ExcelRangeColumn.AutoFit()
  fullName: OfficeOpenXml.ExcelRangeColumn.AutoFit()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AutoFit
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 389
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSet the column width from the content of the range. Columns outside of the worksheets dimension are ignored.\nThe minimum width is the value of the ExcelWorksheet.defaultColumnWidth property.\n"
  remarks: "\nCells containing formulas must be calculated before autofit is called.\nWrapped and merged cells are also ignored.\n"
  example: []
  syntax:
    content: public void AutoFit()
    content.vb: Public Sub AutoFit
  overload: OfficeOpenXml.ExcelRangeColumn.AutoFit*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.AutoFit(System.Double)
  commentId: M:OfficeOpenXml.ExcelRangeColumn.AutoFit(System.Double)
  id: AutoFit(System.Double)
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: AutoFit(Double)
  nameWithType: ExcelRangeColumn.AutoFit(Double)
  fullName: OfficeOpenXml.ExcelRangeColumn.AutoFit(System.Double)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AutoFit
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 403
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSet the column width from the content of the range. Columns outside of the worksheets dimension are ignored.\n"
  remarks: "\nThis method will not work if you run in an environment that does not support GDI.\nCells containing formulas are ignored if no calculation is made.\nWrapped and merged cells are also ignored.\n"
  example: []
  syntax:
    content: public void AutoFit(double MinimumWidth)
    parameters:
    - id: MinimumWidth
      type: System.Double
      description: Minimum column width
    content.vb: Public Sub AutoFit(MinimumWidth As Double)
  overload: OfficeOpenXml.ExcelRangeColumn.AutoFit*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.AutoFit(System.Double,System.Double)
  commentId: M:OfficeOpenXml.ExcelRangeColumn.AutoFit(System.Double,System.Double)
  id: AutoFit(System.Double,System.Double)
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: AutoFit(Double, Double)
  nameWithType: ExcelRangeColumn.AutoFit(Double, Double)
  fullName: OfficeOpenXml.ExcelRangeColumn.AutoFit(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AutoFit
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 418
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSet the column width from the content of the range. Columns outside of the worksheets dimension are ignored.\n"
  remarks: "\nThis method will not work if you run in an environment that does not support GDI.\nCells containing formulas are ignored if no calculation is made.\nWrapped and merged cells are also ignored.\n"
  example: []
  syntax:
    content: public void AutoFit(double MinimumWidth, double MaximumWidth)
    parameters:
    - id: MinimumWidth
      type: System.Double
      description: Minimum column width
    - id: MaximumWidth
      type: System.Double
      description: Maximum column width
    content.vb: Public Sub AutoFit(MinimumWidth As Double, MaximumWidth As Double)
  overload: OfficeOpenXml.ExcelRangeColumn.AutoFit*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.Range
  commentId: P:OfficeOpenXml.ExcelRangeColumn.Range
  id: Range
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: Range
  nameWithType: ExcelRangeColumn.Range
  fullName: OfficeOpenXml.ExcelRangeColumn.Range
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Range
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 544
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReference to the cell range of the column(s)\n"
  example: []
  syntax:
    content: public ExcelRangeBase Range { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelRangeBase
    content.vb: Public ReadOnly Property Range As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeColumn.Range*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeColumn.GetEnumerator
  commentId: M:OfficeOpenXml.ExcelRangeColumn.GetEnumerator
  id: GetEnumerator
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ExcelRangeColumn.GetEnumerator()
  fullName: OfficeOpenXml.ExcelRangeColumn.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetEnumerator
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 555
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGets the enumerator\n"
  example: []
  syntax:
    content: public IEnumerator<ExcelRangeColumn> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeColumn}
    content.vb: Public Function GetEnumerator As IEnumerator(Of ExcelRangeColumn)
  overload: OfficeOpenXml.ExcelRangeColumn.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeColumn}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerable#GetEnumerator
  commentId: M:OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ExcelRangeColumn.IEnumerable.GetEnumerator()
  fullName: OfficeOpenXml.ExcelRangeColumn.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 563
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGets the enumerator\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExcelRangeColumn.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: OfficeOpenXml.ExcelRangeColumn.MoveNext
  commentId: M:OfficeOpenXml.ExcelRangeColumn.MoveNext
  id: MoveNext
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: ExcelRangeColumn.MoveNext()
  fullName: OfficeOpenXml.ExcelRangeColumn.MoveNext()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: MoveNext
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 572
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nIterate to the next row\n"
  example: []
  syntax:
    content: public bool MoveNext()
    return:
      type: System.Boolean
      description: False if no more row exists
    content.vb: Public Function MoveNext As Boolean
  overload: OfficeOpenXml.ExcelRangeColumn.MoveNext*
  implements:
  - System.Collections.IEnumerator.MoveNext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.Reset
  commentId: M:OfficeOpenXml.ExcelRangeColumn.Reset
  id: Reset
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: ExcelRangeColumn.Reset()
  fullName: OfficeOpenXml.ExcelRangeColumn.Reset()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Reset
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 612
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReset the enumerator\n"
  example: []
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: OfficeOpenXml.ExcelRangeColumn.Reset*
  implements:
  - System.Collections.IEnumerator.Reset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeColumn.Dispose
  commentId: M:OfficeOpenXml.ExcelRangeColumn.Dispose
  id: Dispose
  parent: OfficeOpenXml.ExcelRangeColumn
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ExcelRangeColumn.Dispose()
  fullName: OfficeOpenXml.ExcelRangeColumn.Dispose()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeColumn.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Dispose
    path: ../src/EPPlus/ExcelRangeColumn.cs
    startLine: 670
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nDisposes this object\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: OfficeOpenXml.ExcelRangeColumn.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeColumn}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeColumn}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ExcelRangeColumn>
  nameWithType: IEnumerable<ExcelRangeColumn>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelRangeColumn>
  nameWithType.vb: IEnumerable(Of ExcelRangeColumn)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.ExcelRangeColumn)
  name.vb: IEnumerable(Of ExcelRangeColumn)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.ExcelRangeColumn
    name: ExcelRangeColumn
    nameWithType: ExcelRangeColumn
    fullName: OfficeOpenXml.ExcelRangeColumn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.ExcelRangeColumn
    name: ExcelRangeColumn
    nameWithType: ExcelRangeColumn
    fullName: OfficeOpenXml.ExcelRangeColumn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeColumn}
  commentId: T:System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeColumn}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<ExcelRangeColumn>
  nameWithType: IEnumerator<ExcelRangeColumn>
  fullName: System.Collections.Generic.IEnumerator<OfficeOpenXml.ExcelRangeColumn>
  nameWithType.vb: IEnumerator(Of ExcelRangeColumn)
  fullName.vb: System.Collections.Generic.IEnumerator(Of OfficeOpenXml.ExcelRangeColumn)
  name.vb: IEnumerator(Of ExcelRangeColumn)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.ExcelRangeColumn
    name: ExcelRangeColumn
    nameWithType: ExcelRangeColumn
    fullName: OfficeOpenXml.ExcelRangeColumn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.ExcelRangeColumn
    name: ExcelRangeColumn
    nameWithType: ExcelRangeColumn
    fullName: OfficeOpenXml.ExcelRangeColumn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeColumn.StartColumn*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.StartColumn
  name: StartColumn
  nameWithType: ExcelRangeColumn.StartColumn
  fullName: OfficeOpenXml.ExcelRangeColumn.StartColumn
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.ExcelRangeColumn.EndColumn*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.EndColumn
  name: EndColumn
  nameWithType: ExcelRangeColumn.EndColumn
  fullName: OfficeOpenXml.ExcelRangeColumn.EndColumn
- uid: OfficeOpenXml.ExcelRangeColumn.Collapsed*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.Collapsed
  name: Collapsed
  nameWithType: ExcelRangeColumn.Collapsed
  fullName: OfficeOpenXml.ExcelRangeColumn.Collapsed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.ExcelRangeColumn.OutlineLevel
  commentId: P:OfficeOpenXml.ExcelRangeColumn.OutlineLevel
  parent: OfficeOpenXml.ExcelRangeColumn
  name: OutlineLevel
  nameWithType: ExcelRangeColumn.OutlineLevel
  fullName: OfficeOpenXml.ExcelRangeColumn.OutlineLevel
- uid: OfficeOpenXml.ExcelRangeColumn.Group*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.Group
  name: Group
  nameWithType: ExcelRangeColumn.Group
  fullName: OfficeOpenXml.ExcelRangeColumn.Group
- uid: OfficeOpenXml.ExcelRangeColumn
  commentId: T:OfficeOpenXml.ExcelRangeColumn
  parent: OfficeOpenXml
  name: ExcelRangeColumn
  nameWithType: ExcelRangeColumn
  fullName: OfficeOpenXml.ExcelRangeColumn
- uid: OfficeOpenXml.ExcelRangeColumn.UnGroup*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.UnGroup
  name: UnGroup
  nameWithType: ExcelRangeColumn.UnGroup
  fullName: OfficeOpenXml.ExcelRangeColumn.UnGroup
- uid: OfficeOpenXml.ExcelWorksheet.OutLineSummaryRight
  commentId: P:OfficeOpenXml.ExcelWorksheet.OutLineSummaryRight
  parent: OfficeOpenXml.ExcelWorksheet
  name: OutLineSummaryRight
  nameWithType: ExcelWorksheet.OutLineSummaryRight
  fullName: OfficeOpenXml.ExcelWorksheet.OutLineSummaryRight
- uid: OfficeOpenXml.ExcelRangeColumn.CollapseChildren*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.CollapseChildren
  name: CollapseChildren
  nameWithType: ExcelRangeColumn.CollapseChildren
  fullName: OfficeOpenXml.ExcelRangeColumn.CollapseChildren
- uid: OfficeOpenXml.ExcelWorksheet
  commentId: T:OfficeOpenXml.ExcelWorksheet
  parent: OfficeOpenXml
  name: ExcelWorksheet
  nameWithType: ExcelWorksheet
  fullName: OfficeOpenXml.ExcelWorksheet
- uid: OfficeOpenXml.ExcelRangeColumn.ExpandChildren*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.ExpandChildren
  name: ExpandChildren
  nameWithType: ExcelRangeColumn.ExpandChildren
  fullName: OfficeOpenXml.ExcelRangeColumn.ExpandChildren
- uid: OfficeOpenXml.ExcelRangeColumn.SetVisibleOutlineLevel*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.SetVisibleOutlineLevel
  name: SetVisibleOutlineLevel
  nameWithType: ExcelRangeColumn.SetVisibleOutlineLevel
  fullName: OfficeOpenXml.ExcelRangeColumn.SetVisibleOutlineLevel
- uid: OfficeOpenXml.ExcelRangeColumn.OutlineLevel*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.OutlineLevel
  name: OutlineLevel
  nameWithType: ExcelRangeColumn.OutlineLevel
  fullName: OfficeOpenXml.ExcelRangeColumn.OutlineLevel
- uid: OfficeOpenXml.ExcelRangeColumn.Phonetic*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.Phonetic
  name: Phonetic
  nameWithType: ExcelRangeColumn.Phonetic
  fullName: OfficeOpenXml.ExcelRangeColumn.Phonetic
- uid: OfficeOpenXml.ExcelRangeColumn.BestFit*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.BestFit
  name: BestFit
  nameWithType: ExcelRangeColumn.BestFit
  fullName: OfficeOpenXml.ExcelRangeColumn.BestFit
- uid: OfficeOpenXml.ExcelRangeColumn.Hidden*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.Hidden
  name: Hidden
  nameWithType: ExcelRangeColumn.Hidden
  fullName: OfficeOpenXml.ExcelRangeColumn.Hidden
- uid: OfficeOpenXml.ExcelRangeColumn.Width*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.Width
  name: Width
  nameWithType: ExcelRangeColumn.Width
  fullName: OfficeOpenXml.ExcelRangeColumn.Width
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: OfficeOpenXml.ExcelRangeColumn.PageBreak*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.PageBreak
  name: PageBreak
  nameWithType: ExcelRangeColumn.PageBreak
  fullName: OfficeOpenXml.ExcelRangeColumn.PageBreak
- uid: OfficeOpenXml.ExcelRangeColumn.Style*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.Style
  name: Style
  nameWithType: ExcelRangeColumn.Style
  fullName: OfficeOpenXml.ExcelRangeColumn.Style
- uid: OfficeOpenXml.Style.ExcelStyle
  commentId: T:OfficeOpenXml.Style.ExcelStyle
  parent: OfficeOpenXml.Style
  name: ExcelStyle
  nameWithType: ExcelStyle
  fullName: OfficeOpenXml.Style.ExcelStyle
- uid: OfficeOpenXml.Style
  commentId: N:OfficeOpenXml.Style
  name: OfficeOpenXml.Style
  nameWithType: OfficeOpenXml.Style
  fullName: OfficeOpenXml.Style
- uid: OfficeOpenXml.ExcelRangeColumn.StyleName*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.StyleName
  name: StyleName
  nameWithType: ExcelRangeColumn.StyleName
  fullName: OfficeOpenXml.ExcelRangeColumn.StyleName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.ExcelRangeColumn.StyleID*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.StyleID
  name: StyleID
  nameWithType: ExcelRangeColumn.StyleID
  fullName: OfficeOpenXml.ExcelRangeColumn.StyleID
- uid: OfficeOpenXml.ExcelRangeColumn.Current*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.Current
  name: Current
  nameWithType: ExcelRangeColumn.Current
  fullName: OfficeOpenXml.ExcelRangeColumn.Current
- uid: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeColumn}.Current
  commentId: P:System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeColumn}.Current
  parent: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeColumn}
  definition: System.Collections.Generic.IEnumerator`1.Current
  name: Current
  nameWithType: IEnumerator<ExcelRangeColumn>.Current
  fullName: System.Collections.Generic.IEnumerator<OfficeOpenXml.ExcelRangeColumn>.Current
  nameWithType.vb: IEnumerator(Of ExcelRangeColumn).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of OfficeOpenXml.ExcelRangeColumn).Current
- uid: System.Collections.Generic.IEnumerator`1.Current
  commentId: P:System.Collections.Generic.IEnumerator`1.Current
  isExternal: true
  name: Current
  nameWithType: IEnumerator<T>.Current
  fullName: System.Collections.Generic.IEnumerator<T>.Current
  nameWithType.vb: IEnumerator(Of T).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of T).Current
- uid: OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerator#Current*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerator#Current
  name: IEnumerator.Current
  nameWithType: ExcelRangeColumn.IEnumerator.Current
  fullName: OfficeOpenXml.ExcelRangeColumn.System.Collections.IEnumerator.Current
  nameWithType.vb: ExcelRangeColumn.System.Collections.IEnumerator.Current
  name.vb: System.Collections.IEnumerator.Current
- uid: System.Collections.IEnumerator.Current
  commentId: P:System.Collections.IEnumerator.Current
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Current
  nameWithType: IEnumerator.Current
  fullName: System.Collections.IEnumerator.Current
- uid: OfficeOpenXml.ExcelRangeColumn.AutoFit*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.AutoFit
  name: AutoFit
  nameWithType: ExcelRangeColumn.AutoFit
  fullName: OfficeOpenXml.ExcelRangeColumn.AutoFit
- uid: OfficeOpenXml.ExcelRangeColumn.Range*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.Range
  name: Range
  nameWithType: ExcelRangeColumn.Range
  fullName: OfficeOpenXml.ExcelRangeColumn.Range
- uid: OfficeOpenXml.ExcelRangeBase
  commentId: T:OfficeOpenXml.ExcelRangeBase
  parent: OfficeOpenXml
  name: ExcelRangeBase
  nameWithType: ExcelRangeBase
  fullName: OfficeOpenXml.ExcelRangeBase
- uid: OfficeOpenXml.ExcelRangeColumn.GetEnumerator*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.GetEnumerator
  name: GetEnumerator
  nameWithType: ExcelRangeColumn.GetEnumerator
  fullName: OfficeOpenXml.ExcelRangeColumn.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeColumn}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeColumn}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeColumn}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<ExcelRangeColumn>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelRangeColumn>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of ExcelRangeColumn).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.ExcelRangeColumn).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<ExcelRangeColumn>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelRangeColumn>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of ExcelRangeColumn).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.ExcelRangeColumn).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: ExcelRangeColumn.IEnumerable.GetEnumerator
  fullName: OfficeOpenXml.ExcelRangeColumn.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExcelRangeColumn.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeColumn.MoveNext*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.MoveNext
  name: MoveNext
  nameWithType: ExcelRangeColumn.MoveNext
  fullName: OfficeOpenXml.ExcelRangeColumn.MoveNext
- uid: System.Collections.IEnumerator.MoveNext
  commentId: M:System.Collections.IEnumerator.MoveNext
  parent: System.Collections.IEnumerator
  isExternal: true
  name: MoveNext()
  nameWithType: IEnumerator.MoveNext()
  fullName: System.Collections.IEnumerator.MoveNext()
  spec.csharp:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeColumn.Reset*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.Reset
  name: Reset
  nameWithType: ExcelRangeColumn.Reset
  fullName: OfficeOpenXml.ExcelRangeColumn.Reset
- uid: System.Collections.IEnumerator.Reset
  commentId: M:System.Collections.IEnumerator.Reset
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Reset()
  nameWithType: IEnumerator.Reset()
  fullName: System.Collections.IEnumerator.Reset()
  spec.csharp:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeColumn.Dispose*
  commentId: Overload:OfficeOpenXml.ExcelRangeColumn.Dispose
  name: Dispose
  nameWithType: ExcelRangeColumn.Dispose
  fullName: OfficeOpenXml.ExcelRangeColumn.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
