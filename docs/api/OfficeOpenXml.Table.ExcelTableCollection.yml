### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.Table.ExcelTableCollection
  commentId: T:OfficeOpenXml.Table.ExcelTableCollection
  id: ExcelTableCollection
  parent: OfficeOpenXml.Table
  children:
  - OfficeOpenXml.Table.ExcelTableCollection.Add(OfficeOpenXml.ExcelAddressBase,System.String)
  - OfficeOpenXml.Table.ExcelTableCollection.Count
  - OfficeOpenXml.Table.ExcelTableCollection.Delete(OfficeOpenXml.Table.ExcelTable,System.Boolean)
  - OfficeOpenXml.Table.ExcelTableCollection.Delete(System.Int32,System.Boolean)
  - OfficeOpenXml.Table.ExcelTableCollection.Delete(System.String,System.Boolean)
  - OfficeOpenXml.Table.ExcelTableCollection.GetEnumerator
  - OfficeOpenXml.Table.ExcelTableCollection.GetFromRange(OfficeOpenXml.ExcelRangeBase)
  - OfficeOpenXml.Table.ExcelTableCollection.Item(System.Int32)
  - OfficeOpenXml.Table.ExcelTableCollection.Item(System.String)
  - OfficeOpenXml.Table.ExcelTableCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: ExcelTableCollection
  nameWithType: ExcelTableCollection
  fullName: OfficeOpenXml.Table.ExcelTableCollection
  type: Class
  source:
    remote:
      path: src/EPPlus/Table/ExcelTableCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelTableCollection
    path: ../src/EPPlus/Table/ExcelTableCollection.cs
    startLine: 23
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table
  summary: "\nA collection of table objects\n"
  example: []
  syntax:
    content: 'public class ExcelTableCollection : IEnumerable<ExcelTable>, IEnumerable'
    content.vb: >-
      Public Class ExcelTableCollection
          Implements IEnumerable(Of ExcelTable), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.Table.ExcelTable}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.Table.ExcelTableCollection.Add(OfficeOpenXml.ExcelAddressBase,System.String)
  commentId: M:OfficeOpenXml.Table.ExcelTableCollection.Add(OfficeOpenXml.ExcelAddressBase,System.String)
  id: Add(OfficeOpenXml.ExcelAddressBase,System.String)
  parent: OfficeOpenXml.Table.ExcelTableCollection
  langs:
  - csharp
  - vb
  name: Add(ExcelAddressBase, String)
  nameWithType: ExcelTableCollection.Add(ExcelAddressBase, String)
  fullName: OfficeOpenXml.Table.ExcelTableCollection.Add(OfficeOpenXml.ExcelAddressBase, System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/Table/ExcelTableCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Add
    path: ../src/EPPlus/Table/ExcelTableCollection.cs
    startLine: 57
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table
  summary: "\nCreate a table on the supplied range\n"
  example: []
  syntax:
    content: public ExcelTable Add(ExcelAddressBase Range, string Name)
    parameters:
    - id: Range
      type: OfficeOpenXml.ExcelAddressBase
      description: The range address including header and total row
    - id: Name
      type: System.String
      description: 'The name of the table. Must be unique '
    return:
      type: OfficeOpenXml.Table.ExcelTable
      description: The table object
    content.vb: Public Function Add(Range As ExcelAddressBase, Name As String) As ExcelTable
  overload: OfficeOpenXml.Table.ExcelTableCollection.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Table.ExcelTableCollection.Delete(System.Int32,System.Boolean)
  commentId: M:OfficeOpenXml.Table.ExcelTableCollection.Delete(System.Int32,System.Boolean)
  id: Delete(System.Int32,System.Boolean)
  parent: OfficeOpenXml.Table.ExcelTableCollection
  langs:
  - csharp
  - vb
  name: Delete(Int32, Boolean)
  nameWithType: ExcelTableCollection.Delete(Int32, Boolean)
  fullName: OfficeOpenXml.Table.ExcelTableCollection.Delete(System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/Table/ExcelTableCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Delete
    path: ../src/EPPlus/Table/ExcelTableCollection.cs
    startLine: 120
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table
  summary: "\nDelete the table at the specified index\n"
  example: []
  syntax:
    content: public void Delete(int Index, bool ClearRange = false)
    parameters:
    - id: Index
      type: System.Int32
      description: The index
    - id: ClearRange
      type: System.Boolean
      description: Clear the rage if set to true
    content.vb: Public Sub Delete(Index As Integer, ClearRange As Boolean = False)
  overload: OfficeOpenXml.Table.ExcelTableCollection.Delete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Table.ExcelTableCollection.Delete(System.String,System.Boolean)
  commentId: M:OfficeOpenXml.Table.ExcelTableCollection.Delete(System.String,System.Boolean)
  id: Delete(System.String,System.Boolean)
  parent: OfficeOpenXml.Table.ExcelTableCollection
  langs:
  - csharp
  - vb
  name: Delete(String, Boolean)
  nameWithType: ExcelTableCollection.Delete(String, Boolean)
  fullName: OfficeOpenXml.Table.ExcelTableCollection.Delete(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/Table/ExcelTableCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Delete
    path: ../src/EPPlus/Table/ExcelTableCollection.cs
    startLine: 130
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table
  summary: "\nDelete the table with the specified name\n"
  example: []
  syntax:
    content: public void Delete(string Name, bool ClearRange = false)
    parameters:
    - id: Name
      type: System.String
      description: The name of the table to be deleted
    - id: ClearRange
      type: System.Boolean
      description: Clear the rage if set to true
    content.vb: Public Sub Delete(Name As String, ClearRange As Boolean = False)
  overload: OfficeOpenXml.Table.ExcelTableCollection.Delete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Table.ExcelTableCollection.Delete(OfficeOpenXml.Table.ExcelTable,System.Boolean)
  commentId: M:OfficeOpenXml.Table.ExcelTableCollection.Delete(OfficeOpenXml.Table.ExcelTable,System.Boolean)
  id: Delete(OfficeOpenXml.Table.ExcelTable,System.Boolean)
  parent: OfficeOpenXml.Table.ExcelTableCollection
  langs:
  - csharp
  - vb
  name: Delete(ExcelTable, Boolean)
  nameWithType: ExcelTableCollection.Delete(ExcelTable, Boolean)
  fullName: OfficeOpenXml.Table.ExcelTableCollection.Delete(OfficeOpenXml.Table.ExcelTable, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/Table/ExcelTableCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Delete
    path: ../src/EPPlus/Table/ExcelTableCollection.cs
    startLine: 145
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table
  summary: "\nDelete the table\n"
  example: []
  syntax:
    content: public void Delete(ExcelTable Table, bool ClearRange = false)
    parameters:
    - id: Table
      type: OfficeOpenXml.Table.ExcelTable
      description: The table object
    - id: ClearRange
      type: System.Boolean
      description: Clear the table range
    content.vb: Public Sub Delete(Table As ExcelTable, ClearRange As Boolean = False)
  overload: OfficeOpenXml.Table.ExcelTableCollection.Delete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Table.ExcelTableCollection.Count
  commentId: P:OfficeOpenXml.Table.ExcelTableCollection.Count
  id: Count
  parent: OfficeOpenXml.Table.ExcelTableCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ExcelTableCollection.Count
  fullName: OfficeOpenXml.Table.ExcelTableCollection.Count
  type: Property
  source:
    remote:
      path: src/EPPlus/Table/ExcelTableCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Count
    path: ../src/EPPlus/Table/ExcelTableCollection.cs
    startLine: 195
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table
  summary: "\nNumber of items in the collection\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: OfficeOpenXml.Table.ExcelTableCollection.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Table.ExcelTableCollection.GetFromRange(OfficeOpenXml.ExcelRangeBase)
  commentId: M:OfficeOpenXml.Table.ExcelTableCollection.GetFromRange(OfficeOpenXml.ExcelRangeBase)
  id: GetFromRange(OfficeOpenXml.ExcelRangeBase)
  parent: OfficeOpenXml.Table.ExcelTableCollection
  langs:
  - csharp
  - vb
  name: GetFromRange(ExcelRangeBase)
  nameWithType: ExcelTableCollection.GetFromRange(ExcelRangeBase)
  fullName: OfficeOpenXml.Table.ExcelTableCollection.GetFromRange(OfficeOpenXml.ExcelRangeBase)
  type: Method
  source:
    remote:
      path: src/EPPlus/Table/ExcelTableCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetFromRange
    path: ../src/EPPlus/Table/ExcelTableCollection.cs
    startLine: 207
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table
  summary: "\nGet the table object from a range.\n"
  example: []
  syntax:
    content: public ExcelTable GetFromRange(ExcelRangeBase Range)
    parameters:
    - id: Range
      type: OfficeOpenXml.ExcelRangeBase
      description: The range
    return:
      type: OfficeOpenXml.Table.ExcelTable
      description: The table. Null if no range matches
    content.vb: Public Function GetFromRange(Range As ExcelRangeBase) As ExcelTable
  overload: OfficeOpenXml.Table.ExcelTableCollection.GetFromRange*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Table.ExcelTableCollection.Item(System.Int32)
  commentId: P:OfficeOpenXml.Table.ExcelTableCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: OfficeOpenXml.Table.ExcelTableCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ExcelTableCollection.Item[Int32]
  fullName: OfficeOpenXml.Table.ExcelTableCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/EPPlus/Table/ExcelTableCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: this[]
    path: ../src/EPPlus/Table/ExcelTableCollection.cs
    startLine: 223
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table
  summary: "\nThe table Index. Base 0.\n"
  example: []
  syntax:
    content: public ExcelTable this[int Index] { get; }
    parameters:
    - id: Index
      type: System.Int32
      description: ''
    return:
      type: OfficeOpenXml.Table.ExcelTable
      description: ''
    content.vb: Public ReadOnly Property Item(Index As Integer) As ExcelTable
  overload: OfficeOpenXml.Table.ExcelTableCollection.Item*
  nameWithType.vb: ExcelTableCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: OfficeOpenXml.Table.ExcelTableCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: OfficeOpenXml.Table.ExcelTableCollection.Item(System.String)
  commentId: P:OfficeOpenXml.Table.ExcelTableCollection.Item(System.String)
  id: Item(System.String)
  parent: OfficeOpenXml.Table.ExcelTableCollection
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: ExcelTableCollection.Item[String]
  fullName: OfficeOpenXml.Table.ExcelTableCollection.Item[System.String]
  type: Property
  source:
    remote:
      path: src/EPPlus/Table/ExcelTableCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: this[]
    path: ../src/EPPlus/Table/ExcelTableCollection.cs
    startLine: 239
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table
  summary: "\nIndexer\n"
  example: []
  syntax:
    content: public ExcelTable this[string Name] { get; }
    parameters:
    - id: Name
      type: System.String
      description: The name of the table
    return:
      type: OfficeOpenXml.Table.ExcelTable
      description: The table. Null if the table name is not found in the collection
    content.vb: Public ReadOnly Property Item(Name As String) As ExcelTable
  overload: OfficeOpenXml.Table.ExcelTableCollection.Item*
  nameWithType.vb: ExcelTableCollection.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: OfficeOpenXml.Table.ExcelTableCollection.Item(System.String)
  name.vb: Item(String)
- uid: OfficeOpenXml.Table.ExcelTableCollection.GetEnumerator
  commentId: M:OfficeOpenXml.Table.ExcelTableCollection.GetEnumerator
  id: GetEnumerator
  parent: OfficeOpenXml.Table.ExcelTableCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ExcelTableCollection.GetEnumerator()
  fullName: OfficeOpenXml.Table.ExcelTableCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/Table/ExcelTableCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetEnumerator
    path: ../src/EPPlus/Table/ExcelTableCollection.cs
    startLine: 257
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table
  summary: "\nGets the enumerator for the collection\n"
  example: []
  syntax:
    content: public IEnumerator<ExcelTable> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{OfficeOpenXml.Table.ExcelTable}
      description: The enumerator
    content.vb: Public Function GetEnumerator As IEnumerator(Of ExcelTable)
  overload: OfficeOpenXml.Table.ExcelTableCollection.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.Table.ExcelTable}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Table.ExcelTableCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:OfficeOpenXml.Table.ExcelTableCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: OfficeOpenXml.Table.ExcelTableCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ExcelTableCollection.IEnumerable.GetEnumerator()
  fullName: OfficeOpenXml.Table.ExcelTableCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/Table/ExcelTableCollection.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../src/EPPlus/Table/ExcelTableCollection.cs
    startLine: 262
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: OfficeOpenXml.Table.ExcelTableCollection.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExcelTableCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: OfficeOpenXml.Table
  commentId: N:OfficeOpenXml.Table
  name: OfficeOpenXml.Table
  nameWithType: OfficeOpenXml.Table
  fullName: OfficeOpenXml.Table
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.Table.ExcelTable}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.Table.ExcelTable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ExcelTable>
  nameWithType: IEnumerable<ExcelTable>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.Table.ExcelTable>
  nameWithType.vb: IEnumerable(Of ExcelTable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.Table.ExcelTable)
  name.vb: IEnumerable(Of ExcelTable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Table.ExcelTable
    name: ExcelTable
    nameWithType: ExcelTable
    fullName: OfficeOpenXml.Table.ExcelTable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Table.ExcelTable
    name: ExcelTable
    nameWithType: ExcelTable
    fullName: OfficeOpenXml.Table.ExcelTable
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: OfficeOpenXml.Table.ExcelTableCollection.Add*
  commentId: Overload:OfficeOpenXml.Table.ExcelTableCollection.Add
  name: Add
  nameWithType: ExcelTableCollection.Add
  fullName: OfficeOpenXml.Table.ExcelTableCollection.Add
- uid: OfficeOpenXml.ExcelAddressBase
  commentId: T:OfficeOpenXml.ExcelAddressBase
  parent: OfficeOpenXml
  name: ExcelAddressBase
  nameWithType: ExcelAddressBase
  fullName: OfficeOpenXml.ExcelAddressBase
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.Table.ExcelTable
  commentId: T:OfficeOpenXml.Table.ExcelTable
  parent: OfficeOpenXml.Table
  name: ExcelTable
  nameWithType: ExcelTable
  fullName: OfficeOpenXml.Table.ExcelTable
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: OfficeOpenXml.Table.ExcelTableCollection.Delete*
  commentId: Overload:OfficeOpenXml.Table.ExcelTableCollection.Delete
  name: Delete
  nameWithType: ExcelTableCollection.Delete
  fullName: OfficeOpenXml.Table.ExcelTableCollection.Delete
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.Table.ExcelTableCollection.Count*
  commentId: Overload:OfficeOpenXml.Table.ExcelTableCollection.Count
  name: Count
  nameWithType: ExcelTableCollection.Count
  fullName: OfficeOpenXml.Table.ExcelTableCollection.Count
- uid: OfficeOpenXml.Table.ExcelTableCollection.GetFromRange*
  commentId: Overload:OfficeOpenXml.Table.ExcelTableCollection.GetFromRange
  name: GetFromRange
  nameWithType: ExcelTableCollection.GetFromRange
  fullName: OfficeOpenXml.Table.ExcelTableCollection.GetFromRange
- uid: OfficeOpenXml.ExcelRangeBase
  commentId: T:OfficeOpenXml.ExcelRangeBase
  parent: OfficeOpenXml
  name: ExcelRangeBase
  nameWithType: ExcelRangeBase
  fullName: OfficeOpenXml.ExcelRangeBase
- uid: OfficeOpenXml.Table.ExcelTableCollection.Item*
  commentId: Overload:OfficeOpenXml.Table.ExcelTableCollection.Item
  name: Item
  nameWithType: ExcelTableCollection.Item
  fullName: OfficeOpenXml.Table.ExcelTableCollection.Item
- uid: OfficeOpenXml.Table.ExcelTableCollection.GetEnumerator*
  commentId: Overload:OfficeOpenXml.Table.ExcelTableCollection.GetEnumerator
  name: GetEnumerator
  nameWithType: ExcelTableCollection.GetEnumerator
  fullName: OfficeOpenXml.Table.ExcelTableCollection.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.Table.ExcelTable}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{OfficeOpenXml.Table.ExcelTable}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{OfficeOpenXml.Table.ExcelTable}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<ExcelTable>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.Table.ExcelTable>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of ExcelTable).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.Table.ExcelTable).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<ExcelTable>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.Table.ExcelTable>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of ExcelTable).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.Table.ExcelTable).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{OfficeOpenXml.Table.ExcelTable}
  commentId: T:System.Collections.Generic.IEnumerator{OfficeOpenXml.Table.ExcelTable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<ExcelTable>
  nameWithType: IEnumerator<ExcelTable>
  fullName: System.Collections.Generic.IEnumerator<OfficeOpenXml.Table.ExcelTable>
  nameWithType.vb: IEnumerator(Of ExcelTable)
  fullName.vb: System.Collections.Generic.IEnumerator(Of OfficeOpenXml.Table.ExcelTable)
  name.vb: IEnumerator(Of ExcelTable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Table.ExcelTable
    name: ExcelTable
    nameWithType: ExcelTable
    fullName: OfficeOpenXml.Table.ExcelTable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Table.ExcelTable
    name: ExcelTable
    nameWithType: ExcelTable
    fullName: OfficeOpenXml.Table.ExcelTable
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Table.ExcelTableCollection.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:OfficeOpenXml.Table.ExcelTableCollection.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: ExcelTableCollection.IEnumerable.GetEnumerator
  fullName: OfficeOpenXml.Table.ExcelTableCollection.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExcelTableCollection.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
