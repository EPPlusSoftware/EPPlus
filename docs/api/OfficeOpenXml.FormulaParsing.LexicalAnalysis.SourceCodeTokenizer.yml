### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer
  id: SourceCodeTokenizer
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  children:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.#ctor(OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider,OfficeOpenXml.FormulaParsing.INameValueProvider,System.Boolean,System.Boolean)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Default
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.R1C1
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Tokenize(System.String)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Tokenize(System.String,System.String)
  langs:
  - csharp
  - vb
  name: SourceCodeTokenizer
  nameWithType: SourceCodeTokenizer
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/SourceCodeTokenizer.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SourceCodeTokenizer
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/SourceCodeTokenizer.cs
    startLine: 11
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: 'public class SourceCodeTokenizer : ISourceCodeTokenizer'
    content.vb: >-
      Public Class SourceCodeTokenizer
          Implements ISourceCodeTokenizer
  inheritance:
  - System.Object
  implements:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Default
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Default
  id: Default
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: SourceCodeTokenizer.Default
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Default
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/SourceCodeTokenizer.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Default
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/SourceCodeTokenizer.cs
    startLine: 63
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nThe default tokenizer. This tokenizer will remove and ignore whitespaces.\n"
  example: []
  syntax:
    content: public static ISourceCodeTokenizer Default { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer
    content.vb: Public Shared ReadOnly Property Default As ISourceCodeTokenizer
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Default*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.R1C1
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.R1C1
  id: R1C1
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer
  langs:
  - csharp
  - vb
  name: R1C1
  nameWithType: SourceCodeTokenizer.R1C1
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.R1C1
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/SourceCodeTokenizer.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: R1C1
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/SourceCodeTokenizer.cs
    startLine: 70
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nThe tokenizer used for r1c1 format. This tokenizer will keep whitespaces and add them as tokens.\n"
  example: []
  syntax:
    content: public static ISourceCodeTokenizer R1C1 { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer
    content.vb: Public Shared ReadOnly Property R1C1 As ISourceCodeTokenizer
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.R1C1*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.#ctor(OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider,OfficeOpenXml.FormulaParsing.INameValueProvider,System.Boolean,System.Boolean)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.#ctor(OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider,OfficeOpenXml.FormulaParsing.INameValueProvider,System.Boolean,System.Boolean)
  id: '#ctor(OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider,OfficeOpenXml.FormulaParsing.INameValueProvider,System.Boolean,System.Boolean)'
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer
  langs:
  - csharp
  - vb
  name: SourceCodeTokenizer(IFunctionNameProvider, INameValueProvider, Boolean, Boolean)
  nameWithType: SourceCodeTokenizer.SourceCodeTokenizer(IFunctionNameProvider, INameValueProvider, Boolean, Boolean)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.SourceCodeTokenizer(OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider, OfficeOpenXml.FormulaParsing.INameValueProvider, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/SourceCodeTokenizer.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/SourceCodeTokenizer.cs
    startLine: 75
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public SourceCodeTokenizer(IFunctionNameProvider functionRepository, INameValueProvider nameValueProvider, bool r1c1 = false, bool keepWhitespace = false)
    parameters:
    - id: functionRepository
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider
    - id: nameValueProvider
      type: OfficeOpenXml.FormulaParsing.INameValueProvider
    - id: r1c1
      type: System.Boolean
    - id: keepWhitespace
      type: System.Boolean
    content.vb: Public Sub New(functionRepository As IFunctionNameProvider, nameValueProvider As INameValueProvider, r1c1 As Boolean = False, keepWhitespace As Boolean = False)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Tokenize(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Tokenize(System.String)
  id: Tokenize(System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer
  langs:
  - csharp
  - vb
  name: Tokenize(String)
  nameWithType: SourceCodeTokenizer.Tokenize(String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Tokenize(System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/SourceCodeTokenizer.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Tokenize
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/SourceCodeTokenizer.cs
    startLine: 86
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nSplit the input string into tokens used by the formula parser\n"
  example: []
  syntax:
    content: public IList<Token> Tokenize(string input)
    parameters:
    - id: input
      type: System.String
      description: ''
    return:
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
      description: ''
    content.vb: Public Function Tokenize(input As String) As IList(Of Token)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Tokenize*
  implements:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Tokenize(System.String,System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Tokenize(System.String,System.String)
  id: Tokenize(System.String,System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer
  langs:
  - csharp
  - vb
  name: Tokenize(String, String)
  nameWithType: SourceCodeTokenizer.Tokenize(String, String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Tokenize(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/SourceCodeTokenizer.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Tokenize
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/SourceCodeTokenizer.cs
    startLine: 108
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public IList<Token> Tokenize(string input, string worksheet)
    parameters:
    - id: input
      type: System.String
    - id: worksheet
      type: System.String
    return:
      type: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
    content.vb: Public Function Tokenize(input As String, worksheet As String) As IList(Of Token)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Tokenize*
  implements:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: ISourceCodeTokenizer
  nameWithType: ISourceCodeTokenizer
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Default*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Default
  name: Default
  nameWithType: SourceCodeTokenizer.Default
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Default
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.R1C1*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.R1C1
  name: R1C1
  nameWithType: SourceCodeTokenizer.R1C1
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.R1C1
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.#ctor
  name: SourceCodeTokenizer
  nameWithType: SourceCodeTokenizer.SourceCodeTokenizer
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.SourceCodeTokenizer
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: IFunctionNameProvider
  nameWithType: IFunctionNameProvider
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider
- uid: OfficeOpenXml.FormulaParsing.INameValueProvider
  commentId: T:OfficeOpenXml.FormulaParsing.INameValueProvider
  parent: OfficeOpenXml.FormulaParsing
  name: INameValueProvider
  nameWithType: INameValueProvider
  fullName: OfficeOpenXml.FormulaParsing.INameValueProvider
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions
  commentId: N:OfficeOpenXml.FormulaParsing.Excel.Functions
  name: OfficeOpenXml.FormulaParsing.Excel.Functions
  nameWithType: OfficeOpenXml.FormulaParsing.Excel.Functions
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions
- uid: OfficeOpenXml.FormulaParsing
  commentId: N:OfficeOpenXml.FormulaParsing
  name: OfficeOpenXml.FormulaParsing
  nameWithType: OfficeOpenXml.FormulaParsing
  fullName: OfficeOpenXml.FormulaParsing
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Tokenize*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Tokenize
  name: Tokenize
  nameWithType: SourceCodeTokenizer.Tokenize
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer.Tokenize
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize(System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer
  isExternal: true
  name: Tokenize(String)
  nameWithType: ISourceCodeTokenizer.Tokenize(String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize(System.String)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize(System.String)
    name: Tokenize
    nameWithType: ISourceCodeTokenizer.Tokenize
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize(System.String)
    name: Tokenize
    nameWithType: ISourceCodeTokenizer.Tokenize
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  commentId: T:System.Collections.Generic.IList{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Token>
  nameWithType: IList<Token>
  fullName: System.Collections.Generic.IList<OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token>
  nameWithType.vb: IList(Of Token)
  fullName.vb: System.Collections.Generic.IList(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  name.vb: IList(Of Token)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize(System.String,System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize(System.String,System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer
  isExternal: true
  name: Tokenize(String, String)
  nameWithType: ISourceCodeTokenizer.Tokenize(String, String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize(System.String, System.String)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize(System.String,System.String)
    name: Tokenize
    nameWithType: ISourceCodeTokenizer.Tokenize
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize(System.String,System.String)
    name: Tokenize
    nameWithType: ISourceCodeTokenizer.Tokenize
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer.Tokenize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
