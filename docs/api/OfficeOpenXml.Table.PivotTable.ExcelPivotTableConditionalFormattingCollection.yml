### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormattingCollection
  commentId: T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormattingCollection
  id: ExcelPivotTableConditionalFormattingCollection
  parent: OfficeOpenXml.Table.PivotTable
  children:
  - OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormattingCollection.Add(OfficeOpenXml.ConditionalFormatting.eExcelPivotTableConditionalFormattingRuleType,OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField[])
  langs:
  - csharp
  - vb
  name: ExcelPivotTableConditionalFormattingCollection
  nameWithType: ExcelPivotTableConditionalFormattingCollection
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormattingCollection
  type: Class
  source:
    remote:
      path: src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormattingCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelPivotTableConditionalFormattingCollection
    path: ../src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormattingCollection.cs
    startLine: 22
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table.PivotTable
  summary: "\nA collection of pivot areas used for styling a pivot table.\n"
  example: []
  syntax:
    content: 'public class ExcelPivotTableConditionalFormattingCollection : EPPlusReadOnlyList<ExcelPivotTableConditionalFormatting>, IEnumerable<ExcelPivotTableConditionalFormatting>, IEnumerable'
    content.vb: >-
      Public Class ExcelPivotTableConditionalFormattingCollection
          Inherits EPPlusReadOnlyList(Of ExcelPivotTableConditionalFormatting)
          Implements IEnumerable(Of ExcelPivotTableConditionalFormatting), IEnumerable
  inheritance:
  - System.Object
  - OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}
  - System.Collections.IEnumerable
  inheritedMembers:
  - OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.System#Collections#IEnumerable#GetEnumerator
  - OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.Item(System.Int32)
  - OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.GetIndexByValue(OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting)
  - OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.Count
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormattingCollection.Add(OfficeOpenXml.ConditionalFormatting.eExcelPivotTableConditionalFormattingRuleType,OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField[])
  commentId: M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormattingCollection.Add(OfficeOpenXml.ConditionalFormatting.eExcelPivotTableConditionalFormattingRuleType,OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField[])
  id: Add(OfficeOpenXml.ConditionalFormatting.eExcelPivotTableConditionalFormattingRuleType,OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField[])
  parent: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormattingCollection
  langs:
  - csharp
  - vb
  name: Add(eExcelPivotTableConditionalFormattingRuleType, ExcelPivotTableDataField[])
  nameWithType: ExcelPivotTableConditionalFormattingCollection.Add(eExcelPivotTableConditionalFormattingRuleType, ExcelPivotTableDataField[])
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormattingCollection.Add(OfficeOpenXml.ConditionalFormatting.eExcelPivotTableConditionalFormattingRuleType, OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField[])
  type: Method
  source:
    remote:
      path: src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormattingCollection.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Add
    path: ../src/EPPlus/Table/PivotTable/PivotArea/ConditionalFormats/ExcelPivotTableConditionalFormattingCollection.cs
    startLine: 44
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Table.PivotTable
  summary: "\nAdds a conditional formatting pivot area for the pivot tables data field(cf).\nNote that only conditional formattings for data is support. Conditional formattings for Lables, data buttons and other pivot areas must be added using the <xref href=\"OfficeOpenXml.ExcelWorksheet.ConditionalFormatting\" data-throw-if-not-resolved=\"false\"></xref> collection.\n"
  example: []
  syntax:
    content: public ExcelPivotTableConditionalFormatting Add(eExcelPivotTableConditionalFormattingRuleType ruleType, params ExcelPivotTableDataField[] fields)
    parameters:
    - id: ruleType
      type: OfficeOpenXml.ConditionalFormatting.eExcelPivotTableConditionalFormattingRuleType
      description: The type of conditional formatting rule
    - id: fields
      type: OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField[]
      description: The data field(cf) in the pivot table to apply the rule. If no data field is provided, all data field in the collection will be added to the area.The area will be added to the <xref href="OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Areas" data-throw-if-not-resolved="false"></xref> collection
    return:
      type: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
      description: The rule
    content.vb: Public Function Add(ruleType As eExcelPivotTableConditionalFormattingRuleType, ParamArray fields As ExcelPivotTableDataField()) As ExcelPivotTableConditionalFormatting
  overload: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormattingCollection.Add*
  nameWithType.vb: ExcelPivotTableConditionalFormattingCollection.Add(eExcelPivotTableConditionalFormattingRuleType, ExcelPivotTableDataField())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormattingCollection.Add(OfficeOpenXml.ConditionalFormatting.eExcelPivotTableConditionalFormattingRuleType, OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField())
  name.vb: Add(eExcelPivotTableConditionalFormattingRuleType, ExcelPivotTableDataField())
references:
- uid: OfficeOpenXml.Table.PivotTable
  commentId: N:OfficeOpenXml.Table.PivotTable
  name: OfficeOpenXml.Table.PivotTable
  nameWithType: OfficeOpenXml.Table.PivotTable
  fullName: OfficeOpenXml.Table.PivotTable
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}
  commentId: T:OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}
  parent: OfficeOpenXml.Core
  definition: OfficeOpenXml.Core.EPPlusReadOnlyList`1
  name: EPPlusReadOnlyList<ExcelPivotTableConditionalFormatting>
  nameWithType: EPPlusReadOnlyList<ExcelPivotTableConditionalFormatting>
  fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting>
  nameWithType.vb: EPPlusReadOnlyList(Of ExcelPivotTableConditionalFormatting)
  fullName.vb: OfficeOpenXml.Core.EPPlusReadOnlyList(Of OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting)
  name.vb: EPPlusReadOnlyList(Of ExcelPivotTableConditionalFormatting)
  spec.csharp:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1
    name: EPPlusReadOnlyList
    nameWithType: EPPlusReadOnlyList
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
    name: ExcelPivotTableConditionalFormatting
    nameWithType: ExcelPivotTableConditionalFormatting
    fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1
    name: EPPlusReadOnlyList
    nameWithType: EPPlusReadOnlyList
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
    name: ExcelPivotTableConditionalFormatting
    nameWithType: ExcelPivotTableConditionalFormatting
    fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ExcelPivotTableConditionalFormatting>
  nameWithType: IEnumerable<ExcelPivotTableConditionalFormatting>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting>
  nameWithType.vb: IEnumerable(Of ExcelPivotTableConditionalFormatting)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting)
  name.vb: IEnumerable(Of ExcelPivotTableConditionalFormatting)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
    name: ExcelPivotTableConditionalFormatting
    nameWithType: ExcelPivotTableConditionalFormatting
    fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
    name: ExcelPivotTableConditionalFormatting
    nameWithType: ExcelPivotTableConditionalFormatting
    fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}
  definition: OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<ExcelPivotTableConditionalFormatting>.GetEnumerator()
  nameWithType: EPPlusReadOnlyList<ExcelPivotTableConditionalFormatting>.IEnumerable<ExcelPivotTableConditionalFormatting>.GetEnumerator()
  fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting>.System.Collections.Generic.IEnumerable<OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting>.GetEnumerator()
  nameWithType.vb: EPPlusReadOnlyList(Of ExcelPivotTableConditionalFormatting).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: OfficeOpenXml.Core.EPPlusReadOnlyList(Of OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<ExcelPivotTableConditionalFormatting>.GetEnumerator
    nameWithType: EPPlusReadOnlyList<ExcelPivotTableConditionalFormatting>.IEnumerable<ExcelPivotTableConditionalFormatting>.GetEnumerator
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting>.System.Collections.Generic.IEnumerable<OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: EPPlusReadOnlyList(Of ExcelPivotTableConditionalFormatting).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList(Of OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.System#Collections#IEnumerable#GetEnumerator
  parent: OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}
  definition: OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: EPPlusReadOnlyList<ExcelPivotTableConditionalFormatting>.IEnumerable.GetEnumerator()
  fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: EPPlusReadOnlyList(Of ExcelPivotTableConditionalFormatting).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: OfficeOpenXml.Core.EPPlusReadOnlyList(Of OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: EPPlusReadOnlyList<ExcelPivotTableConditionalFormatting>.IEnumerable.GetEnumerator
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: EPPlusReadOnlyList(Of ExcelPivotTableConditionalFormatting).System.Collections.IEnumerable.GetEnumerator
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList(Of OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.Item(System.Int32)
  commentId: P:OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.Item(System.Int32)
  parent: OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}
  definition: OfficeOpenXml.Core.EPPlusReadOnlyList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: EPPlusReadOnlyList<ExcelPivotTableConditionalFormatting>.Item[Int32]
  fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting>.Item[System.Int32]
  nameWithType.vb: EPPlusReadOnlyList(Of ExcelPivotTableConditionalFormatting).Item(Int32)
  fullName.vb: OfficeOpenXml.Core.EPPlusReadOnlyList(Of OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.Item(System.Int32)
    name: Item
    nameWithType: EPPlusReadOnlyList<ExcelPivotTableConditionalFormatting>.Item
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.Item(System.Int32)
    name: Item
    nameWithType: EPPlusReadOnlyList(Of ExcelPivotTableConditionalFormatting).Item
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList(Of OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.GetIndexByValue(OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting)
  commentId: M:OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.GetIndexByValue(OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting)
  parent: OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}
  definition: OfficeOpenXml.Core.EPPlusReadOnlyList`1.GetIndexByValue(`0)
  name: GetIndexByValue(ExcelPivotTableConditionalFormatting)
  nameWithType: EPPlusReadOnlyList<ExcelPivotTableConditionalFormatting>.GetIndexByValue(ExcelPivotTableConditionalFormatting)
  fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting>.GetIndexByValue(OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting)
  nameWithType.vb: EPPlusReadOnlyList(Of ExcelPivotTableConditionalFormatting).GetIndexByValue(ExcelPivotTableConditionalFormatting)
  fullName.vb: OfficeOpenXml.Core.EPPlusReadOnlyList(Of OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting).GetIndexByValue(OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting)
  spec.csharp:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.GetIndexByValue(`0)
    name: GetIndexByValue
    nameWithType: EPPlusReadOnlyList<ExcelPivotTableConditionalFormatting>.GetIndexByValue
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting>.GetIndexByValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
    name: ExcelPivotTableConditionalFormatting
    nameWithType: ExcelPivotTableConditionalFormatting
    fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.GetIndexByValue(`0)
    name: GetIndexByValue
    nameWithType: EPPlusReadOnlyList(Of ExcelPivotTableConditionalFormatting).GetIndexByValue
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList(Of OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting).GetIndexByValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
    name: ExcelPivotTableConditionalFormatting
    nameWithType: ExcelPivotTableConditionalFormatting
    fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.Count
  commentId: P:OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}.Count
  parent: OfficeOpenXml.Core.EPPlusReadOnlyList{OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting}
  definition: OfficeOpenXml.Core.EPPlusReadOnlyList`1.Count
  name: Count
  nameWithType: EPPlusReadOnlyList<ExcelPivotTableConditionalFormatting>.Count
  fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting>.Count
  nameWithType.vb: EPPlusReadOnlyList(Of ExcelPivotTableConditionalFormatting).Count
  fullName.vb: OfficeOpenXml.Core.EPPlusReadOnlyList(Of OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting).Count
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1
  commentId: T:OfficeOpenXml.Core.EPPlusReadOnlyList`1
  name: EPPlusReadOnlyList<T>
  nameWithType: EPPlusReadOnlyList<T>
  fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<T>
  nameWithType.vb: EPPlusReadOnlyList(Of T)
  fullName.vb: OfficeOpenXml.Core.EPPlusReadOnlyList(Of T)
  name.vb: EPPlusReadOnlyList(Of T)
  spec.csharp:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1
    name: EPPlusReadOnlyList
    nameWithType: EPPlusReadOnlyList
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1
    name: EPPlusReadOnlyList
    nameWithType: EPPlusReadOnlyList
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Core
  commentId: N:OfficeOpenXml.Core
  name: OfficeOpenXml.Core
  nameWithType: OfficeOpenXml.Core
  fullName: OfficeOpenXml.Core
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: EPPlusReadOnlyList<T>.IEnumerable<T>.GetEnumerator()
  fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: EPPlusReadOnlyList(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: OfficeOpenXml.Core.EPPlusReadOnlyList(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<T>.GetEnumerator
    nameWithType: EPPlusReadOnlyList<T>.IEnumerable<T>.GetEnumerator
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: EPPlusReadOnlyList(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: EPPlusReadOnlyList<T>.IEnumerable.GetEnumerator()
  fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: EPPlusReadOnlyList(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: OfficeOpenXml.Core.EPPlusReadOnlyList(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: EPPlusReadOnlyList<T>.IEnumerable.GetEnumerator
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<T>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: EPPlusReadOnlyList(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList(Of T).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.Item(System.Int32)
  commentId: P:OfficeOpenXml.Core.EPPlusReadOnlyList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: EPPlusReadOnlyList<T>.Item[Int32]
  fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<T>.Item[System.Int32]
  nameWithType.vb: EPPlusReadOnlyList(Of T).Item(Int32)
  fullName.vb: OfficeOpenXml.Core.EPPlusReadOnlyList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.Item(System.Int32)
    name: Item
    nameWithType: EPPlusReadOnlyList<T>.Item
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.Item(System.Int32)
    name: Item
    nameWithType: EPPlusReadOnlyList(Of T).Item
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.GetIndexByValue(`0)
  commentId: M:OfficeOpenXml.Core.EPPlusReadOnlyList`1.GetIndexByValue(`0)
  name: GetIndexByValue(T)
  nameWithType: EPPlusReadOnlyList<T>.GetIndexByValue(T)
  fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<T>.GetIndexByValue(T)
  nameWithType.vb: EPPlusReadOnlyList(Of T).GetIndexByValue(T)
  fullName.vb: OfficeOpenXml.Core.EPPlusReadOnlyList(Of T).GetIndexByValue(T)
  spec.csharp:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.GetIndexByValue(`0)
    name: GetIndexByValue
    nameWithType: EPPlusReadOnlyList<T>.GetIndexByValue
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<T>.GetIndexByValue
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.GetIndexByValue(`0)
    name: GetIndexByValue
    nameWithType: EPPlusReadOnlyList(Of T).GetIndexByValue
    fullName: OfficeOpenXml.Core.EPPlusReadOnlyList(Of T).GetIndexByValue
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Core.EPPlusReadOnlyList`1.Count
  commentId: P:OfficeOpenXml.Core.EPPlusReadOnlyList`1.Count
  name: Count
  nameWithType: EPPlusReadOnlyList<T>.Count
  fullName: OfficeOpenXml.Core.EPPlusReadOnlyList<T>.Count
  nameWithType.vb: EPPlusReadOnlyList(Of T).Count
  fullName.vb: OfficeOpenXml.Core.EPPlusReadOnlyList(Of T).Count
- uid: OfficeOpenXml.ExcelWorksheet.ConditionalFormatting
  commentId: P:OfficeOpenXml.ExcelWorksheet.ConditionalFormatting
  parent: OfficeOpenXml.ExcelWorksheet
  name: ConditionalFormatting
  nameWithType: ExcelWorksheet.ConditionalFormatting
  fullName: OfficeOpenXml.ExcelWorksheet.ConditionalFormatting
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Areas
  commentId: P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting.Areas
  isExternal: true
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormattingCollection.Add*
  commentId: Overload:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormattingCollection.Add
  name: Add
  nameWithType: ExcelPivotTableConditionalFormattingCollection.Add
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormattingCollection.Add
- uid: OfficeOpenXml.ConditionalFormatting.eExcelPivotTableConditionalFormattingRuleType
  commentId: T:OfficeOpenXml.ConditionalFormatting.eExcelPivotTableConditionalFormattingRuleType
  parent: OfficeOpenXml.ConditionalFormatting
  name: eExcelPivotTableConditionalFormattingRuleType
  nameWithType: eExcelPivotTableConditionalFormattingRuleType
  fullName: OfficeOpenXml.ConditionalFormatting.eExcelPivotTableConditionalFormattingRuleType
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField[]
  isExternal: true
  name: ExcelPivotTableDataField[]
  nameWithType: ExcelPivotTableDataField[]
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField[]
  nameWithType.vb: ExcelPivotTableDataField()
  fullName.vb: OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField()
  name.vb: ExcelPivotTableDataField()
  spec.csharp:
  - uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField
    name: ExcelPivotTableDataField
    nameWithType: ExcelPivotTableDataField
    fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField
    name: ExcelPivotTableDataField
    nameWithType: ExcelPivotTableDataField
    fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  commentId: T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
  parent: OfficeOpenXml.Table.PivotTable
  name: ExcelPivotTableConditionalFormatting
  nameWithType: ExcelPivotTableConditionalFormatting
  fullName: OfficeOpenXml.Table.PivotTable.ExcelPivotTableConditionalFormatting
- uid: OfficeOpenXml.ExcelWorksheet
  commentId: T:OfficeOpenXml.ExcelWorksheet
  parent: OfficeOpenXml
  name: ExcelWorksheet
  nameWithType: ExcelWorksheet
  fullName: OfficeOpenXml.ExcelWorksheet
- uid: OfficeOpenXml.ConditionalFormatting
  commentId: N:OfficeOpenXml.ConditionalFormatting
  name: OfficeOpenXml.ConditionalFormatting
  nameWithType: OfficeOpenXml.ConditionalFormatting
  fullName: OfficeOpenXml.ConditionalFormatting
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
