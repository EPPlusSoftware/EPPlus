### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.Drawing.ExcelDrawing
  commentId: T:OfficeOpenXml.Drawing.ExcelDrawing
  id: ExcelDrawing
  parent: OfficeOpenXml.Drawing
  children:
  - OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  - OfficeOpenXml.Drawing.ExcelDrawing.As
  - OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  - OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
  - OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
  - OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.Copy(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.Description
  - OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  - OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
  - OfficeOpenXml.Drawing.ExcelDrawing.EditAs
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT
  - OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH
  - OfficeOpenXml.Drawing.ExcelDrawing.From
  - OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
  - OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
  - OfficeOpenXml.Drawing.ExcelDrawing.Locked
  - OfficeOpenXml.Drawing.ExcelDrawing.Name
  - OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
  - OfficeOpenXml.Drawing.ExcelDrawing.Position
  - OfficeOpenXml.Drawing.ExcelDrawing.Print
  - OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  - OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)
  - OfficeOpenXml.Drawing.ExcelDrawing.Size
  - OfficeOpenXml.Drawing.ExcelDrawing.To
  - OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  langs:
  - csharp
  - vb
  name: ExcelDrawing
  nameWithType: ExcelDrawing
  fullName: OfficeOpenXml.Drawing.ExcelDrawing
  type: Class
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelDrawing
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 44
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nBase class for drawings. \nDrawings are Charts, Shapes and Pictures.\n"
  example: []
  syntax:
    content: 'public class ExcelDrawing : XmlHelper, IDisposable'
    content.vb: >-
      Public Class ExcelDrawing
          Inherits XmlHelper
          Implements IDisposable
  inheritance:
  - System.Object
  - OfficeOpenXml.XmlHelper
  derivedClasses:
  - OfficeOpenXml.Drawing.Chart.ExcelChart
  - OfficeOpenXml.Drawing.Controls.ExcelControl
  - OfficeOpenXml.Drawing.ExcelGroupShape
  - OfficeOpenXml.Drawing.ExcelPicture
  - OfficeOpenXml.Drawing.ExcelShapeBase
  - OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL
  id: EMU_PER_PIXEL
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: EMU_PER_PIXEL
  nameWithType: ExcelDrawing.EMU_PER_PIXEL
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL
  type: Field
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: EMU_PER_PIXEL
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 55
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nThe ratio between EMU and Pixels\n"
  example: []
  syntax:
    content: public const int EMU_PER_PIXEL = 9525
    return:
      type: System.Int32
    content.vb: Public Const EMU_PER_PIXEL As Integer = 9525
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT
  id: EMU_PER_POINT
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: EMU_PER_POINT
  nameWithType: ExcelDrawing.EMU_PER_POINT
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT
  type: Field
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: EMU_PER_POINT
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 59
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nThe ratio between EMU and Points\n"
  example: []
  syntax:
    content: public const int EMU_PER_POINT = 12700
    return:
      type: System.Int32
    content.vb: Public Const EMU_PER_POINT As Integer = 12700
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM
  id: EMU_PER_CM
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: EMU_PER_CM
  nameWithType: ExcelDrawing.EMU_PER_CM
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM
  type: Field
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: EMU_PER_CM
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 63
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nThe ratio between EMU and centimeters\n"
  example: []
  syntax:
    content: public const int EMU_PER_CM = 360000
    return:
      type: System.Int32
    content.vb: Public Const EMU_PER_CM As Integer = 360000
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM
  id: EMU_PER_MM
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: EMU_PER_MM
  nameWithType: ExcelDrawing.EMU_PER_MM
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM
  type: Field
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: EMU_PER_MM
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 67
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nThe ratio between EMU and milimeters\n"
  example: []
  syntax:
    content: public const int EMU_PER_MM = 3600000
    return:
      type: System.Int32
    content.vb: Public Const EMU_PER_MM As Integer = 3600000
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH
  id: EMU_PER_US_INCH
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: EMU_PER_US_INCH
  nameWithType: ExcelDrawing.EMU_PER_US_INCH
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH
  type: Field
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: EMU_PER_US_INCH
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 71
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nThe ratio between EMU and US Inches\n"
  example: []
  syntax:
    content: public const int EMU_PER_US_INCH = 914400
    return:
      type: System.Int32
    content.vb: Public Const EMU_PER_US_INCH As Integer = 914400
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA
  commentId: F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA
  id: EMU_PER_PICA
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: EMU_PER_PICA
  nameWithType: ExcelDrawing.EMU_PER_PICA
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA
  type: Field
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: EMU_PER_PICA
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 75
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nThe ratio between EMU and pica\n"
  example: []
  syntax:
    content: public const int EMU_PER_PICA = 152400
    return:
      type: System.Int32
    content.vb: Public Const EMU_PER_PICA As Integer = 152400
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
  id: DrawingType
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: DrawingType
  nameWithType: ExcelDrawing.DrawingType
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: DrawingType
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 303
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nThe type of drawing\n"
  example: []
  syntax:
    content: public virtual eDrawingType DrawingType { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.eDrawingType
    content.vb: Public Overridable ReadOnly Property DrawingType As eDrawingType
  overload: OfficeOpenXml.Drawing.ExcelDrawing.DrawingType*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Name
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Name
  id: Name
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ExcelDrawing.Name
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Name
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Name
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 313
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nThe name of the drawing object\n"
  example: []
  syntax:
    content: public virtual string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property Name As String
  overload: OfficeOpenXml.Drawing.ExcelDrawing.Name*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Description
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Description
  id: Description
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: ExcelDrawing.Description
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Description
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Description
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 355
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nA description of the drawing object\n"
  example: []
  syntax:
    content: public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Description As String
  overload: OfficeOpenXml.Drawing.ExcelDrawing.Description*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EditAs
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.EditAs
  id: EditAs
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: EditAs
  nameWithType: ExcelDrawing.EditAs
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EditAs
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: EditAs
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 385
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nHow Excel resize drawings when the column width is changed within Excel.\n"
  example: []
  syntax:
    content: public eEditAs EditAs { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.eEditAs
    content.vb: Public Property EditAs As eEditAs
  overload: OfficeOpenXml.Drawing.ExcelDrawing.EditAs*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Locked
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Locked
  id: Locked
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: Locked
  nameWithType: ExcelDrawing.Locked
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Locked
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Locked
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 446
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nLock drawing\n"
  example: []
  syntax:
    content: public virtual bool Locked { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property Locked As Boolean
  overload: OfficeOpenXml.Drawing.ExcelDrawing.Locked*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Print
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Print
  id: Print
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: Print
  nameWithType: ExcelDrawing.Print
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Print
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Print
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 461
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nPrint drawing with sheet\n"
  example: []
  syntax:
    content: public virtual bool Print { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property Print As Boolean
  overload: OfficeOpenXml.Drawing.ExcelDrawing.Print*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.Drawing.ExcelDrawing.From
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.From
  id: From
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: From
  nameWithType: ExcelDrawing.From
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.From
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: From
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 476
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nTop Left position, if the shape is of the one- or two- cell anchor type\nOtherwise this propery is set to null\n"
  example: []
  syntax:
    content: public ExcelPosition From { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.ExcelPosition
    content.vb: Public ReadOnly Property From As ExcelPosition
  overload: OfficeOpenXml.Drawing.ExcelDrawing.From*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Position
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Position
  id: Position
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: ExcelDrawing.Position
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Position
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Position
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 484
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nTop Left position, if the shape is of the absolute anchor type\n"
  example: []
  syntax:
    content: public ExcelDrawingCoordinate Position { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.ExcelDrawingCoordinate
    content.vb: Public ReadOnly Property Position As ExcelDrawingCoordinate
  overload: OfficeOpenXml.Drawing.ExcelDrawing.Position*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Size
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Size
  id: Size
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: ExcelDrawing.Size
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Size
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Size
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 493
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nThe extent of the shape, if the shape is of the one- or absolute- anchor type.\nOtherwise this propery is set to null\n"
  example: []
  syntax:
    content: public ExcelDrawingSize Size { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.ExcelDrawingSize
    content.vb: Public ReadOnly Property Size As ExcelDrawingSize
  overload: OfficeOpenXml.Drawing.ExcelDrawing.Size*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Drawing.ExcelDrawing.To
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.To
  id: To
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: To
  nameWithType: ExcelDrawing.To
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.To
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: To
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 501
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nBottom right position\n"
  example: []
  syntax:
    content: public ExcelPosition To { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.ExcelPosition
    content.vb: Public ReadOnly Property To As ExcelPosition
  overload: OfficeOpenXml.Drawing.ExcelDrawing.To*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
  id: Hyperlink
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: Hyperlink
  nameWithType: ExcelDrawing.Hyperlink
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Hyperlink
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 506
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nHyperlink\n"
  example: []
  syntax:
    content: public Uri Hyperlink { get; set; }
    parameters: []
    return:
      type: System.Uri
    content.vb: Public Property Hyperlink As Uri
  overload: OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.ExcelDrawing.As
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.As
  id: As
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: As
  nameWithType: ExcelDrawing.As
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.As
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: As
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 546
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nProvides access to type conversion for all top-level drawing classes.\n"
  example: []
  syntax:
    content: public ExcelDrawingAsType As { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.ExcelDrawingAsType
    content.vb: Public ReadOnly Property As As ExcelDrawingAsType
  overload: OfficeOpenXml.Drawing.ExcelDrawing.As*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)
  id: SetPosition(System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: SetPosition(Int32, Int32)
  nameWithType: ExcelDrawing.SetPosition(Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SetPosition
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 965
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nSet the top left corner of a drawing. \nNote that resizing columns / rows after using this function will effect the position of the drawing\n"
  example: []
  syntax:
    content: public void SetPosition(int PixelTop, int PixelLeft)
    parameters:
    - id: PixelTop
      type: System.Int32
      description: Top pixel
    - id: PixelLeft
      type: System.Int32
      description: Left pixel
    content.vb: Public Sub SetPosition(PixelTop As Integer, PixelLeft As Integer)
  overload: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
  id: CellAnchor
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: CellAnchor
  nameWithType: ExcelDrawing.CellAnchor
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CellAnchor
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1002
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nHow the drawing is anchored to the cells.\nThis effect how the drawing will be resize\n<xref href=\"OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs%2cSystem.Int32%2cSystem.Int32%2cSystem.Int32%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public eEditAs CellAnchor { get; protected set; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.eEditAs
    content.vb: Public Property CellAnchor As eEditAs
  overload: OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
  id: ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: ChangeCellAnchor(eEditAs, Int32, Int32, Int32, Int32)
  nameWithType: ExcelDrawing.ChangeCellAnchor(eEditAs, Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ChangeCellAnchor
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1015
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nThis will change the cell anchor type, move and resize the drawing.\n"
  example: []
  syntax:
    content: public void ChangeCellAnchor(eEditAs type, int PixelTop, int PixelLeft, int width, int height)
    parameters:
    - id: type
      type: OfficeOpenXml.Drawing.eEditAs
      description: The cell anchor type to change to
    - id: PixelTop
      type: System.Int32
      description: The topmost pixel
    - id: PixelLeft
      type: System.Int32
      description: The leftmost pixel
    - id: width
      type: System.Int32
      description: The width in pixels
    - id: height
      type: System.Int32
      description: The height in pixels
    content.vb: Public Sub ChangeCellAnchor(type As eEditAs, PixelTop As Integer, PixelLeft As Integer, width As Integer, height As Integer)
  overload: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
  id: ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: ChangeCellAnchor(eEditAs)
  nameWithType: ExcelDrawing.ChangeCellAnchor(eEditAs)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ChangeCellAnchor
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1025
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nThis will change the cell anchor type without modifiying the position and size.\n"
  example: []
  syntax:
    content: public void ChangeCellAnchor(eEditAs type)
    parameters:
    - id: type
      type: OfficeOpenXml.Drawing.eEditAs
      description: The cell anchor type to change to
    content.vb: Public Sub ChangeCellAnchor(type As eEditAs)
  overload: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
  id: SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: SetPosition(Int32, Int32, Int32, Int32)
  nameWithType: ExcelDrawing.SetPosition(Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SetPosition
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1115
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nSet the top left corner of a drawing. \nNote that resizing columns / rows after using this function will effect the position of the drawing\n"
  example: []
  syntax:
    content: public void SetPosition(int Row, int RowOffsetPixels, int Column, int ColumnOffsetPixels)
    parameters:
    - id: Row
      type: System.Int32
      description: Start row - 0-based index.
    - id: RowOffsetPixels
      type: System.Int32
      description: Offset in pixels
    - id: Column
      type: System.Int32
      description: Start Column - 0-based index.
    - id: ColumnOffsetPixels
      type: System.Int32
      description: Offset in pixels
    content.vb: Public Sub SetPosition(Row As Integer, RowOffsetPixels As Integer, Column As Integer, ColumnOffsetPixels As Integer)
  overload: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
  id: SetSize(System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: SetSize(Int32)
  nameWithType: ExcelDrawing.SetSize(Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SetSize
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1145
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nSet size in Percent.\nNote that resizing columns / rows after using this function will effect the size of the drawing\n"
  example: []
  syntax:
    content: public virtual void SetSize(int Percent)
    parameters:
    - id: Percent
      type: System.Int32
      description: ''
    content.vb: Public Overridable Sub SetSize(Percent As Integer)
  overload: OfficeOpenXml.Drawing.ExcelDrawing.SetSize*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)
  id: SetSize(System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: SetSize(Int32, Int32)
  nameWithType: ExcelDrawing.SetSize(Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SetSize
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1167
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nSet size in pixels\nNote that resizing columns / rows after using this function will effect the size of the drawing\n"
  example: []
  syntax:
    content: public void SetSize(int PixelWidth, int PixelHeight)
    parameters:
    - id: PixelWidth
      type: System.Int32
      description: Width in pixels
    - id: PixelHeight
      type: System.Int32
      description: Height in pixels
    content.vb: Public Sub SetSize(PixelWidth As Integer, PixelHeight As Integer)
  overload: OfficeOpenXml.Drawing.ExcelDrawing.SetSize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  id: SendToBack
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: SendToBack()
  nameWithType: ExcelDrawing.SendToBack()
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SendToBack
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1181
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nSends the drawing to the back of any overlapping drawings.\n"
  example: []
  syntax:
    content: public void SendToBack()
    content.vb: Public Sub SendToBack
  overload: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  id: BringToFront
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: BringToFront()
  nameWithType: ExcelDrawing.BringToFront()
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: BringToFront
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1188
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nBrings the drawing to the front of any overlapping drawings.\n"
  example: []
  syntax:
    content: public void BringToFront()
    content.vb: Public Sub BringToFront
  overload: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
  id: Group(OfficeOpenXml.Drawing.ExcelDrawing[])
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: Group(ExcelDrawing[])
  nameWithType: ExcelDrawing.Group(ExcelDrawing[])
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Group
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1199
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nGroup the drawing together with a list of other drawings. \n<xref href=\"OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\n<xref href=\"OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public ExcelGroupShape Group(params ExcelDrawing[] drawing)
    parameters:
    - id: drawing
      type: OfficeOpenXml.Drawing.ExcelDrawing[]
      description: The drawings to group
    return:
      type: OfficeOpenXml.Drawing.ExcelGroupShape
      description: The group shape
    content.vb: Public Function Group(ParamArray drawing As ExcelDrawing()) As ExcelGroupShape
  overload: OfficeOpenXml.Drawing.ExcelDrawing.Group*
  nameWithType.vb: ExcelDrawing.Group(ExcelDrawing())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing())
  name.vb: Group(ExcelDrawing())
- uid: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  id: UnGroup(System.Boolean)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: UnGroup(Boolean)
  nameWithType: ExcelDrawing.UnGroup(Boolean)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: UnGroup
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1247
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nWill ungroup this drawing or the entire group, if this drawing is grouped together with other drawings.\nIf this drawings is not grouped an InvalidOperationException will be returned.\n"
  example: []
  syntax:
    content: public void UnGroup(bool ungroupThisItemOnly = true)
    parameters:
    - id: ungroupThisItemOnly
      type: System.Boolean
      description: "If true this drawing will be removed from the group. \nIf it is false, the whole group will be disbanded. If true only this drawing will be removed.\n"
    content.vb: Public Sub UnGroup(ungroupThisItemOnly As Boolean = True)
  overload: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
  id: ParentGroup
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: ParentGroup
  nameWithType: ExcelDrawing.ParentGroup
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
  type: Property
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ParentGroup
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1266
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nIf the drawing is grouped this property contains the Group drawing containing the group.\nOtherwise this property is null\n"
  example: []
  syntax:
    content: public ExcelGroupShape ParentGroup { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Drawing.ExcelGroupShape
    content.vb: Public ReadOnly Property ParentGroup As ExcelGroupShape
  overload: OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  id: Dispose
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ExcelDrawing.Dispose()
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Dispose()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Dispose
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1281
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nDispose the object\n"
  example: []
  syntax:
    content: public virtual void Dispose()
    content.vb: Public Overridable Sub Dispose
  overload: OfficeOpenXml.Drawing.ExcelDrawing.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  id: AdjustPositionAndSize
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: AdjustPositionAndSize()
  nameWithType: ExcelDrawing.AdjustPositionAndSize()
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize()
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AdjustPositionAndSize
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1297
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nWill adjust the position and size of the drawing according to changes in font of rows and to the Normal style.\nThis method will be called before save, so use it only if you need the coordinates of the drawing.\n"
  example: []
  syntax:
    content: public void AdjustPositionAndSize()
    content.vb: Public Sub AdjustPositionAndSize
  overload: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Copy(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.Copy(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32)
  id: Copy(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  langs:
  - csharp
  - vb
  name: Copy(ExcelWorksheet, Int32, Int32, Int32, Int32)
  nameWithType: ExcelDrawing.Copy(ExcelWorksheet, Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Copy(OfficeOpenXml.ExcelWorksheet, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/Drawing/ExcelDrawing.cs
      branch: fix/comments-and-warings
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Copy
    path: ../src/EPPlus/Drawing/ExcelDrawing.cs
    startLine: 1348
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.Drawing
  summary: "\nCopies the drawing to the supplied worksheets. The copy will be positioned using the <code data-dev-comment-type=\"paramref\" class=\"paramref\">row</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">col</code> parameters\n"
  example: []
  syntax:
    content: public void Copy(ExcelWorksheet worksheet, int row, int col, int rowOffset = -2147483648, int colOffset = -2147483648)
    parameters:
    - id: worksheet
      type: OfficeOpenXml.ExcelWorksheet
      description: The worksheet where the drawing will be placed.
    - id: row
      type: System.Int32
      description: The top row where the drawing will be placed.
    - id: col
      type: System.Int32
      description: The left column where the drawing will be placed.
    - id: rowOffset
      type: System.Int32
      description: 'Row offset in pixels from the row start positions. int.MinValue '
    - id: colOffset
      type: System.Int32
      description: Column offset in pixels fromp the column start position
    content.vb: Public Sub Copy(worksheet As ExcelWorksheet, row As Integer, col As Integer, rowOffset As Integer = -2147483648, colOffset As Integer = -2147483648)
  overload: OfficeOpenXml.Drawing.ExcelDrawing.Copy*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: OfficeOpenXml.Drawing
  commentId: N:OfficeOpenXml.Drawing
  name: OfficeOpenXml.Drawing
  nameWithType: OfficeOpenXml.Drawing
  fullName: OfficeOpenXml.Drawing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.XmlHelper
  commentId: T:OfficeOpenXml.XmlHelper
  parent: OfficeOpenXml
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: OfficeOpenXml.XmlHelper
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.Drawing.ExcelDrawing.DrawingType*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
  name: DrawingType
  nameWithType: ExcelDrawing.DrawingType
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.DrawingType
- uid: OfficeOpenXml.Drawing.eDrawingType
  commentId: T:OfficeOpenXml.Drawing.eDrawingType
  parent: OfficeOpenXml.Drawing
  name: eDrawingType
  nameWithType: eDrawingType
  fullName: OfficeOpenXml.Drawing.eDrawingType
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Name*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.Name
  name: Name
  nameWithType: ExcelDrawing.Name
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Description*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.Description
  name: Description
  nameWithType: ExcelDrawing.Description
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Description
- uid: OfficeOpenXml.Drawing.ExcelDrawing.EditAs*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.EditAs
  name: EditAs
  nameWithType: ExcelDrawing.EditAs
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.EditAs
- uid: OfficeOpenXml.Drawing.eEditAs
  commentId: T:OfficeOpenXml.Drawing.eEditAs
  parent: OfficeOpenXml.Drawing
  name: eEditAs
  nameWithType: eEditAs
  fullName: OfficeOpenXml.Drawing.eEditAs
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Locked*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.Locked
  name: Locked
  nameWithType: ExcelDrawing.Locked
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Locked
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Print*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.Print
  name: Print
  nameWithType: ExcelDrawing.Print
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Print
- uid: OfficeOpenXml.Drawing.ExcelDrawing.From*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.From
  name: From
  nameWithType: ExcelDrawing.From
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.From
- uid: OfficeOpenXml.Drawing.ExcelPosition
  commentId: T:OfficeOpenXml.Drawing.ExcelPosition
  parent: OfficeOpenXml.Drawing
  name: ExcelPosition
  nameWithType: ExcelPosition
  fullName: OfficeOpenXml.Drawing.ExcelPosition
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Position*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.Position
  name: Position
  nameWithType: ExcelDrawing.Position
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Position
- uid: OfficeOpenXml.Drawing.ExcelDrawingCoordinate
  commentId: T:OfficeOpenXml.Drawing.ExcelDrawingCoordinate
  parent: OfficeOpenXml.Drawing
  name: ExcelDrawingCoordinate
  nameWithType: ExcelDrawingCoordinate
  fullName: OfficeOpenXml.Drawing.ExcelDrawingCoordinate
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Size*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.Size
  name: Size
  nameWithType: ExcelDrawing.Size
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Size
- uid: OfficeOpenXml.Drawing.ExcelDrawingSize
  commentId: T:OfficeOpenXml.Drawing.ExcelDrawingSize
  parent: OfficeOpenXml.Drawing
  name: ExcelDrawingSize
  nameWithType: ExcelDrawingSize
  fullName: OfficeOpenXml.Drawing.ExcelDrawingSize
- uid: OfficeOpenXml.Drawing.ExcelDrawing.To*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.To
  name: To
  nameWithType: ExcelDrawing.To
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.To
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
  name: Hyperlink
  nameWithType: ExcelDrawing.Hyperlink
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: OfficeOpenXml.Drawing.ExcelDrawing.As*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.As
  name: As
  nameWithType: ExcelDrawing.As
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.As
- uid: OfficeOpenXml.Drawing.ExcelDrawingAsType
  commentId: T:OfficeOpenXml.Drawing.ExcelDrawingAsType
  parent: OfficeOpenXml.Drawing
  name: ExcelDrawingAsType
  nameWithType: ExcelDrawingAsType
  fullName: OfficeOpenXml.Drawing.ExcelDrawingAsType
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.SetPosition
  name: SetPosition
  nameWithType: ExcelDrawing.SetPosition
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetPosition
- uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: ChangeCellAnchor(eEditAs, Int32, Int32, Int32, Int32)
  nameWithType: ExcelDrawing.ChangeCellAnchor(eEditAs, Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs, System.Int32, System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
    name: ChangeCellAnchor
    nameWithType: ExcelDrawing.ChangeCellAnchor
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.eEditAs
    name: eEditAs
    nameWithType: eEditAs
    fullName: OfficeOpenXml.Drawing.eEditAs
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)
    name: ChangeCellAnchor
    nameWithType: ExcelDrawing.ChangeCellAnchor
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.Drawing.eEditAs
    name: eEditAs
    nameWithType: eEditAs
    fullName: OfficeOpenXml.Drawing.eEditAs
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
  name: CellAnchor
  nameWithType: ExcelDrawing.CellAnchor
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor
- uid: OfficeOpenXml.Drawing.ExcelDrawing
  commentId: T:OfficeOpenXml.Drawing.ExcelDrawing
  parent: OfficeOpenXml.Drawing
  name: ExcelDrawing
  nameWithType: ExcelDrawing
  fullName: OfficeOpenXml.Drawing.ExcelDrawing
- uid: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor
  name: ChangeCellAnchor
  nameWithType: ExcelDrawing.ChangeCellAnchor
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SetSize*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.SetSize
  name: SetSize
  nameWithType: ExcelDrawing.SetSize
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SetSize
- uid: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
  name: SendToBack
  nameWithType: ExcelDrawing.SendToBack
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.SendToBack
- uid: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
  name: BringToFront
  nameWithType: ExcelDrawing.BringToFront
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.BringToFront
- uid: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  commentId: M:OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  isExternal: true
  name: UnGroup(Boolean)
  nameWithType: ExcelDrawing.UnGroup(Boolean)
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
    name: UnGroup
    nameWithType: ExcelDrawing.UnGroup
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)
    name: UnGroup
    nameWithType: ExcelDrawing.UnGroup
    fullName: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
  commentId: P:OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
  parent: OfficeOpenXml.Drawing.ExcelDrawing
  name: ParentGroup
  nameWithType: ExcelDrawing.ParentGroup
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Group*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.Group
  name: Group
  nameWithType: ExcelDrawing.Group
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Group
- uid: OfficeOpenXml.Drawing.ExcelDrawing[]
  isExternal: true
  name: ExcelDrawing[]
  nameWithType: ExcelDrawing[]
  fullName: OfficeOpenXml.Drawing.ExcelDrawing[]
  nameWithType.vb: ExcelDrawing()
  fullName.vb: OfficeOpenXml.Drawing.ExcelDrawing()
  name.vb: ExcelDrawing()
  spec.csharp:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing
    name: ExcelDrawing
    nameWithType: ExcelDrawing
    fullName: OfficeOpenXml.Drawing.ExcelDrawing
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: OfficeOpenXml.Drawing.ExcelDrawing
    name: ExcelDrawing
    nameWithType: ExcelDrawing
    fullName: OfficeOpenXml.Drawing.ExcelDrawing
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: OfficeOpenXml.Drawing.ExcelGroupShape
  commentId: T:OfficeOpenXml.Drawing.ExcelGroupShape
  parent: OfficeOpenXml.Drawing
  name: ExcelGroupShape
  nameWithType: ExcelGroupShape
  fullName: OfficeOpenXml.Drawing.ExcelGroupShape
- uid: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.UnGroup
  name: UnGroup
  nameWithType: ExcelDrawing.UnGroup
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.UnGroup
- uid: OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
  name: ParentGroup
  nameWithType: ExcelDrawing.ParentGroup
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Dispose*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.Dispose
  name: Dispose
  nameWithType: ExcelDrawing.Dispose
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
  name: AdjustPositionAndSize
  nameWithType: ExcelDrawing.AdjustPositionAndSize
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize
- uid: OfficeOpenXml.Drawing.ExcelDrawing.Copy*
  commentId: Overload:OfficeOpenXml.Drawing.ExcelDrawing.Copy
  name: Copy
  nameWithType: ExcelDrawing.Copy
  fullName: OfficeOpenXml.Drawing.ExcelDrawing.Copy
- uid: OfficeOpenXml.ExcelWorksheet
  commentId: T:OfficeOpenXml.ExcelWorksheet
  parent: OfficeOpenXml
  name: ExcelWorksheet
  nameWithType: ExcelWorksheet
  fullName: OfficeOpenXml.ExcelWorksheet
