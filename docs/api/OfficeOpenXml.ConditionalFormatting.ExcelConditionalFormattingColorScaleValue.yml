### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue
  commentId: T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue
  id: ExcelConditionalFormattingColorScaleValue
  parent: OfficeOpenXml.ConditionalFormatting
  children:
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Color
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Formula
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Type
  - OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Value
  langs:
  - csharp
  - vb
  name: ExcelConditionalFormattingColorScaleValue
  nameWithType: ExcelConditionalFormattingColorScaleValue
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue
  type: Class
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/ExcelConditionalFormattingColorScaleValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelConditionalFormattingColorScaleValue
    path: ../src/EPPlus/ConditionalFormatting/ExcelConditionalFormattingColorScaleValue.cs
    startLine: 29
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\n18.3.1.11 cfvo (Conditional Format Value Object)\nDescribes the values of the interpolation points in a gradient scale.\n"
  example: []
  syntax:
    content: 'public class ExcelConditionalFormattingColorScaleValue : XmlHelper'
    content.vb: >-
      Public Class ExcelConditionalFormattingColorScaleValue
          Inherits XmlHelper
  inheritance:
  - System.Object
  - OfficeOpenXml.XmlHelper
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Type
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Type
  id: Type
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ExcelConditionalFormattingColorScaleValue.Type
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Type
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/ExcelConditionalFormattingColorScaleValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Type
    path: ../src/EPPlus/ConditionalFormatting/ExcelConditionalFormattingColorScaleValue.cs
    startLine: 334
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nThe value type\n"
  example: []
  syntax:
    content: public eExcelConditionalFormattingValueObjectType Type { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType
    content.vb: Public Property Type As eExcelConditionalFormattingValueObjectType
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Type*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Color
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Color
  id: Color
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue
  langs:
  - csharp
  - vb
  name: Color
  nameWithType: ExcelConditionalFormattingColorScaleValue.Color
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Color
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/ExcelConditionalFormattingColorScaleValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Color
    path: ../src/EPPlus/ConditionalFormatting/ExcelConditionalFormattingColorScaleValue.cs
    startLine: 394
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nThe color to be used\n"
  example: []
  syntax:
    content: public Color Color { get; set; }
    parameters: []
    return:
      type: System.Drawing.Color
    content.vb: Public Property Color As Color
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Color*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Value
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Value
  id: Value
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ExcelConditionalFormattingColorScaleValue.Value
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Value
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/ExcelConditionalFormattingColorScaleValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Value
    path: ../src/EPPlus/ConditionalFormatting/ExcelConditionalFormattingColorScaleValue.cs
    startLine: 424
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nThe value of the conditional formatting\n"
  example: []
  syntax:
    content: public double Value { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property Value As Double
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Value*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Formula
  commentId: P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Formula
  id: Formula
  parent: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue
  langs:
  - csharp
  - vb
  name: Formula
  nameWithType: ExcelConditionalFormattingColorScaleValue.Formula
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Formula
  type: Property
  source:
    remote:
      path: src/EPPlus/ConditionalFormatting/ExcelConditionalFormattingColorScaleValue.cs
      branch: develop7
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Formula
    path: ../src/EPPlus/ConditionalFormatting/ExcelConditionalFormattingColorScaleValue.cs
    startLine: 460
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.ConditionalFormatting
  summary: "\nThe Formula of the Object Value (uses the same attribute as the Value)\n"
  example: []
  syntax:
    content: public string Formula { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Formula As String
  overload: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Formula*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: OfficeOpenXml.ConditionalFormatting
  commentId: N:OfficeOpenXml.ConditionalFormatting
  name: OfficeOpenXml.ConditionalFormatting
  nameWithType: OfficeOpenXml.ConditionalFormatting
  fullName: OfficeOpenXml.ConditionalFormatting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.XmlHelper
  commentId: T:OfficeOpenXml.XmlHelper
  parent: OfficeOpenXml
  name: XmlHelper
  nameWithType: XmlHelper
  fullName: OfficeOpenXml.XmlHelper
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Type*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Type
  name: Type
  nameWithType: ExcelConditionalFormattingColorScaleValue.Type
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Type
- uid: OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType
  commentId: T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType
  parent: OfficeOpenXml.ConditionalFormatting
  name: eExcelConditionalFormattingValueObjectType
  nameWithType: eExcelConditionalFormattingValueObjectType
  fullName: OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Color*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Color
  name: Color
  nameWithType: ExcelConditionalFormattingColorScaleValue.Color
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Color
- uid: System.Drawing.Color
  commentId: T:System.Drawing.Color
  parent: System.Drawing
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Value*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Value
  name: Value
  nameWithType: ExcelConditionalFormattingColorScaleValue.Value
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Value
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Formula*
  commentId: Overload:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Formula
  name: Formula
  nameWithType: ExcelConditionalFormattingColorScaleValue.Formula
  fullName: OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Formula
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
