### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule
  id: FunctionsModule
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  children:
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.CustomCompilers
  - OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.Functions
  langs:
  - csharp
  - vb
  name: FunctionsModule
  nameWithType: FunctionsModule
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionsModule.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FunctionsModule
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionsModule.cs
    startLine: 21
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nBase class \n"
  example: []
  syntax:
    content: 'public abstract class FunctionsModule : IFunctionModule'
    content.vb: >-
      Public MustInherit Class FunctionsModule
          Implements IFunctionModule
  inheritance:
  - System.Object
  derivedClasses:
  - OfficeOpenXml.FormulaParsing.Excel.Functions.BuiltInFunctions
  implements:
  - OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.Functions
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.Functions
  id: Functions
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule
  langs:
  - csharp
  - vb
  name: Functions
  nameWithType: FunctionsModule.Functions
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.Functions
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionsModule.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Functions
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionsModule.cs
    startLine: 29
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nGets a dictionary of custom function implementations.\n"
  example: []
  syntax:
    content: public IDictionary<string, ExcelFunction> Functions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction}
    content.vb: Public ReadOnly Property Functions As IDictionary(Of String, ExcelFunction)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.Functions*
  implements:
  - OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule.Functions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.CustomCompilers
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.CustomCompilers
  id: CustomCompilers
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule
  langs:
  - csharp
  - vb
  name: CustomCompilers
  nameWithType: FunctionsModule.CustomCompilers
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.CustomCompilers
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/Excel/Functions/FunctionsModule.cs
      branch: bug/issue1566
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CustomCompilers
    path: ../src/EPPlus/FormulaParsing/Excel/Functions/FunctionsModule.cs
    startLine: 41
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.Excel.Functions
  summary: "\nGets a dictionary of custom function compilers. A function compiler is not \nnecessary for a custom function, unless the default expression evaluation is not\nsufficient for the implementation of the custom function. When a FunctionCompiler instance\nis created, it should be given a reference to the same function instance that exists\nin the Functions collection of this module.\n"
  example: []
  syntax:
    content: public IDictionary<Type, FunctionCompiler> CustomCompilers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.Type,OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.FunctionCompiler}
    content.vb: Public ReadOnly Property CustomCompilers As IDictionary(Of Type, FunctionCompiler)
  overload: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.CustomCompilers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions
  commentId: N:OfficeOpenXml.FormulaParsing.Excel.Functions
  name: OfficeOpenXml.FormulaParsing.Excel.Functions
  nameWithType: OfficeOpenXml.FormulaParsing.Excel.Functions
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: IFunctionModule
  nameWithType: IFunctionModule
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.Functions*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.Functions
  name: Functions
  nameWithType: FunctionsModule.Functions
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.Functions
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule.Functions
  commentId: P:OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule.Functions
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule
  name: Functions
  nameWithType: IFunctionModule.Functions
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule.Functions
- uid: System.Collections.Generic.IDictionary{System.String,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction}
  commentId: T:System.Collections.Generic.IDictionary{System.String,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, ExcelFunction>
  nameWithType: IDictionary<String, ExcelFunction>
  fullName: System.Collections.Generic.IDictionary<System.String, OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction>
  nameWithType.vb: IDictionary(Of String, ExcelFunction)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction)
  name.vb: IDictionary(Of String, ExcelFunction)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
    name: ExcelFunction
    nameWithType: ExcelFunction
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
    name: ExcelFunction
    nameWithType: ExcelFunction
    fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.CustomCompilers*
  commentId: Overload:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.CustomCompilers
  name: CustomCompilers
  nameWithType: FunctionsModule.CustomCompilers
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.CustomCompilers
- uid: System.Collections.Generic.IDictionary{System.Type,OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.FunctionCompiler}
  commentId: T:System.Collections.Generic.IDictionary{System.Type,OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.FunctionCompiler}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Type, FunctionCompiler>
  nameWithType: IDictionary<Type, FunctionCompiler>
  fullName: System.Collections.Generic.IDictionary<System.Type, OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.FunctionCompiler>
  nameWithType.vb: IDictionary(Of Type, FunctionCompiler)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Type, OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.FunctionCompiler)
  name.vb: IDictionary(Of Type, FunctionCompiler)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.FunctionCompiler
    name: FunctionCompiler
    nameWithType: FunctionCompiler
    fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.FunctionCompiler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.FunctionCompiler
    name: FunctionCompiler
    nameWithType: FunctionCompiler
    fullName: OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.FunctionCompiler
  - name: )
    nameWithType: )
    fullName: )
