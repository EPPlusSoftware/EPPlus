### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.ExcelRangeBase
  commentId: T:OfficeOpenXml.ExcelRangeBase
  id: ExcelRangeBase
  parent: OfficeOpenXml
  children:
  - OfficeOpenXml.ExcelRangeBase._rtc
  - OfficeOpenXml.ExcelRangeBase._worksheet
  - OfficeOpenXml.ExcelRangeBase.AddComment(System.String,System.String)
  - OfficeOpenXml.ExcelRangeBase.AddThreadedComment
  - OfficeOpenXml.ExcelRangeBase.AutoFilter
  - OfficeOpenXml.ExcelRangeBase.AutoFitColumns
  - OfficeOpenXml.ExcelRangeBase.AutoFitColumns(System.Double)
  - OfficeOpenXml.ExcelRangeBase.AutoFitColumns(System.Double,System.Double)
  - OfficeOpenXml.ExcelRangeBase.ChangeAddress
  - OfficeOpenXml.ExcelRangeBase.Clear
  - OfficeOpenXml.ExcelRangeBase.ClearFormulas
  - OfficeOpenXml.ExcelRangeBase.ClearFormulaValues
  - OfficeOpenXml.ExcelRangeBase.Comment
  - OfficeOpenXml.ExcelRangeBase.ConditionalFormatting
  - OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase)
  - OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeCopyOptionFlags[])
  - OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase,System.Nullable{OfficeOpenXml.ExcelRangeCopyOptionFlags})
  - OfficeOpenXml.ExcelRangeBase.CopyStyles(OfficeOpenXml.ExcelRangeBase)
  - OfficeOpenXml.ExcelRangeBase.CreateArrayFormula(System.String)
  - OfficeOpenXml.ExcelRangeBase.CreateHtmlExporter
  - OfficeOpenXml.ExcelRangeBase.Current
  - OfficeOpenXml.ExcelRangeBase.DataValidation
  - OfficeOpenXml.ExcelRangeBase.Delete(OfficeOpenXml.eShiftTypeDelete)
  - OfficeOpenXml.ExcelRangeBase.Dispose
  - OfficeOpenXml.ExcelRangeBase.EntireColumn
  - OfficeOpenXml.ExcelRangeBase.EntireRow
  - OfficeOpenXml.ExcelRangeBase.FillDateTime
  - OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillDateParams})
  - OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Nullable{System.DateTime},OfficeOpenXml.eDateTimeUnit,System.Int32)
  - OfficeOpenXml.ExcelRangeBase.FillList``1(System.Collections.Generic.IEnumerable{``0})
  - OfficeOpenXml.ExcelRangeBase.FillList``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillListParams})
  - OfficeOpenXml.ExcelRangeBase.FillNumber
  - OfficeOpenXml.ExcelRangeBase.FillNumber(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams})
  - OfficeOpenXml.ExcelRangeBase.FillNumber(System.Nullable{System.Double},System.Double)
  - OfficeOpenXml.ExcelRangeBase.Formula
  - OfficeOpenXml.ExcelRangeBase.FormulaR1C1
  - OfficeOpenXml.ExcelRangeBase.FullAddress
  - OfficeOpenXml.ExcelRangeBase.FullAddressAbsolute
  - OfficeOpenXml.ExcelRangeBase.GetCellValue``1
  - OfficeOpenXml.ExcelRangeBase.GetCellValue``1(System.Int32)
  - OfficeOpenXml.ExcelRangeBase.GetCellValue``1(System.Int32,System.Int32)
  - OfficeOpenXml.ExcelRangeBase.GetEnumerator
  - OfficeOpenXml.ExcelRangeBase.GetTable
  - OfficeOpenXml.ExcelRangeBase.GetValue``1
  - OfficeOpenXml.ExcelRangeBase.Hyperlink
  - OfficeOpenXml.ExcelRangeBase.Insert(OfficeOpenXml.eShiftTypeInsert)
  - OfficeOpenXml.ExcelRangeBase.IsArrayFormula
  - OfficeOpenXml.ExcelRangeBase.IsRichText
  - OfficeOpenXml.ExcelRangeBase.IsTable
  - OfficeOpenXml.ExcelRangeBase.LoadFromArrays(System.Collections.Generic.IEnumerable{System.Object[]})
  - OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})
  - OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams})
  - OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
  - OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})
  - OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Reflection.BindingFlags,System.Reflection.MemberInfo[])
  - OfficeOpenXml.ExcelRangeBase.LoadFromDataReader(System.Data.IDataReader,System.Boolean)
  - OfficeOpenXml.ExcelRangeBase.LoadFromDataReader(System.Data.IDataReader,System.Boolean,System.String,OfficeOpenXml.Table.TableStyles)
  - OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean)
  - OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean,System.String,OfficeOpenXml.Table.TableStyles,System.Nullable{System.Threading.CancellationToken})
  - OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken)
  - OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable)
  - OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams})
  - OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Boolean)
  - OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})
  - OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}})
  - OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams})
  - OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean)
  - OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})
  - OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Collections.Generic.IEnumerable{System.String})
  - OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Object},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams})
  - OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Object},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Collections.Generic.IEnumerable{System.String})
  - OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo)
  - OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat)
  - OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Boolean)
  - OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String)
  - OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat)
  - OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Boolean)
  - OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo)
  - OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat)
  - OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat,OfficeOpenXml.Table.TableStyles,System.Boolean)
  - OfficeOpenXml.ExcelRangeBase.Merge
  - OfficeOpenXml.ExcelRangeBase.MoveNext
  - OfficeOpenXml.ExcelRangeBase.Offset(System.Int32,System.Int32)
  - OfficeOpenXml.ExcelRangeBase.Offset(System.Int32,System.Int32,System.Int32,System.Int32)
  - OfficeOpenXml.ExcelRangeBase.Reset
  - OfficeOpenXml.ExcelRangeBase.RichText
  - OfficeOpenXml.ExcelRangeBase.SaveToJson(System.IO.Stream)
  - OfficeOpenXml.ExcelRangeBase.SaveToJson(System.IO.Stream,System.Action{OfficeOpenXml.JsonRangeExportSettings})
  - OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync(System.IO.Stream)
  - OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync(System.IO.Stream,System.Action{OfficeOpenXml.JsonRangeExportSettings})
  - OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)
  - OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)
  - OfficeOpenXml.ExcelRangeBase.SaveToTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)
  - OfficeOpenXml.ExcelRangeBase.SaveToTextAsync(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)
  - OfficeOpenXml.ExcelRangeBase.SetCellValue(System.Int32,System.Int32,System.Object)
  - OfficeOpenXml.ExcelRangeBase.SetErrorValue(OfficeOpenXml.eErrorType)
  - OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelHyperLink)
  - OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelRange)
  - OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelRange,System.String)
  - OfficeOpenXml.ExcelRangeBase.SetHyperlink(System.Uri)
  - OfficeOpenXml.ExcelRangeBase.Sort
  - OfficeOpenXml.ExcelRangeBase.Sort(OfficeOpenXml.Sorting.RangeSortOptions)
  - OfficeOpenXml.ExcelRangeBase.Sort(System.Action{OfficeOpenXml.Sorting.RangeSortOptions})
  - OfficeOpenXml.ExcelRangeBase.Sort(System.Int32,System.Boolean)
  - OfficeOpenXml.ExcelRangeBase.Sort(System.Int32[],System.Boolean[],System.Globalization.CultureInfo,System.Globalization.CompareOptions)
  - OfficeOpenXml.ExcelRangeBase.Style
  - OfficeOpenXml.ExcelRangeBase.StyleID
  - OfficeOpenXml.ExcelRangeBase.StyleName
  - OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerable#GetEnumerator
  - OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerator#Current
  - OfficeOpenXml.ExcelRangeBase.Text
  - OfficeOpenXml.ExcelRangeBase.ThreadedComment
  - OfficeOpenXml.ExcelRangeBase.ToCollection``1
  - OfficeOpenXml.ExcelRangeBase.ToCollection``1(OfficeOpenXml.ToCollectionRangeOptions)
  - OfficeOpenXml.ExcelRangeBase.ToCollection``1(System.Action{OfficeOpenXml.ToCollectionRangeOptions})
  - OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0})
  - OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0},OfficeOpenXml.ToCollectionRangeOptions)
  - OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0},System.Action{OfficeOpenXml.ToCollectionRangeOptions})
  - OfficeOpenXml.ExcelRangeBase.ToDataTable
  - OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions)
  - OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions,System.Data.DataTable)
  - OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions})
  - OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions},System.Data.DataTable)
  - OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Data.DataTable)
  - OfficeOpenXml.ExcelRangeBase.ToJson
  - OfficeOpenXml.ExcelRangeBase.ToJson(System.Action{OfficeOpenXml.JsonRangeExportSettings})
  - OfficeOpenXml.ExcelRangeBase.ToText
  - OfficeOpenXml.ExcelRangeBase.ToText(OfficeOpenXml.ExcelOutputTextFormat)
  - OfficeOpenXml.ExcelRangeBase.ToTextAsync
  - OfficeOpenXml.ExcelRangeBase.ToTextAsync(OfficeOpenXml.ExcelOutputTextFormat)
  - OfficeOpenXml.ExcelRangeBase.Value
  - OfficeOpenXml.ExcelRangeBase.Worksheet
  langs:
  - csharp
  - vb
  name: ExcelRangeBase
  nameWithType: ExcelRangeBase
  fullName: OfficeOpenXml.ExcelRangeBase
  type: Class
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelRangeBase
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 36
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nA range of cells \n"
  example: []
  syntax:
    content: 'public class ExcelRangeBase : ExcelAddress, IEnumerable<ExcelRangeBase>, IEnumerable, IEnumerator<ExcelRangeBase>, IEnumerator, IDisposable'
    content.vb: >-
      Public Class ExcelRangeBase
          Inherits ExcelAddress
          Implements IEnumerable(Of ExcelRangeBase), IEnumerable, IEnumerator(Of ExcelRangeBase), IEnumerator, IDisposable
  inheritance:
  - System.Object
  - OfficeOpenXml.ExcelCellBase
  - OfficeOpenXml.ExcelAddressBase
  - OfficeOpenXml.ExcelAddress
  derivedClasses:
  - OfficeOpenXml.ExcelNamedRange
  - OfficeOpenXml.ExcelRange
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeBase}
  - System.Collections.IEnumerable
  - System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeBase}
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - OfficeOpenXml.ExcelAddress.Address
  - OfficeOpenXml.ExcelAddressBase.SetAddress(System.String,OfficeOpenXml.ExcelWorkbook,System.String)
  - OfficeOpenXml.ExcelAddressBase.Start
  - OfficeOpenXml.ExcelAddressBase.End
  - OfficeOpenXml.ExcelAddressBase.ExternalReferenceIndex
  - OfficeOpenXml.ExcelAddressBase.Table
  - OfficeOpenXml.ExcelAddressBase.IsName
  - OfficeOpenXml.ExcelAddressBase.ToString
  - OfficeOpenXml.ExcelAddressBase.GetHashCode
  - OfficeOpenXml.ExcelAddressBase.Validate
  - OfficeOpenXml.ExcelAddressBase.Rows
  - OfficeOpenXml.ExcelAddressBase.Columns
  - OfficeOpenXml.ExcelAddressBase.IsFullRow
  - OfficeOpenXml.ExcelAddressBase.IsFullColumn
  - OfficeOpenXml.ExcelAddressBase.LocalAddress
  - OfficeOpenXml.ExcelAddressBase.Equals(System.Object)
  - OfficeOpenXml.ExcelAddressBase.IsExternal
  - OfficeOpenXml.ExcelCellBase.TranslateFromR1C1(System.String,System.Int32,System.Int32)
  - OfficeOpenXml.ExcelCellBase.TranslateToR1C1(System.String,System.Int32,System.Int32)
  - OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32)
  - OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32,System.Boolean)
  - OfficeOpenXml.ExcelCellBase.GetAddressRow(System.Int32,System.Boolean)
  - OfficeOpenXml.ExcelCellBase.GetAddressCol(System.Int32,System.Boolean)
  - OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32)
  - OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Boolean,System.Int32,System.Boolean)
  - OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Boolean)
  - OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32)
  - OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)
  - OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String)
  - OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String,System.String)
  - OfficeOpenXml.ExcelCellBase.IsSimpleAddress(System.String)
  - OfficeOpenXml.ExcelCellBase.IsValidAddress(System.String)
  - OfficeOpenXml.ExcelCellBase.IsValidCellAddress(System.String)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - OfficeOpenXml.ExcelRangeBase.OfficeOpenXml.CalculationExtension.Calculate
  - OfficeOpenXml.ExcelRangeBase.OfficeOpenXml.CalculationExtension.Calculate(System.Action{OfficeOpenXml.FormulaParsing.ExcelCalculationOption})
  - OfficeOpenXml.ExcelRangeBase.OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.FormulaParsing.ExcelCalculationOption)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.ExcelRangeBase._worksheet
  commentId: F:OfficeOpenXml.ExcelRangeBase._worksheet
  id: _worksheet
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: _worksheet
  nameWithType: ExcelRangeBase._worksheet
  fullName: OfficeOpenXml.ExcelRangeBase._worksheet
  type: Field
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: _worksheet
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 57
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReference to the worksheet\n"
  example: []
  syntax:
    content: protected ExcelWorksheet _worksheet
    return:
      type: OfficeOpenXml.ExcelWorksheet
    content.vb: Protected _worksheet As ExcelWorksheet
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.ExcelRangeBase.ChangeAddress
  commentId: M:OfficeOpenXml.ExcelRangeBase.ChangeAddress
  id: ChangeAddress
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ChangeAddress()
  nameWithType: ExcelRangeBase.ChangeAddress()
  fullName: OfficeOpenXml.ExcelRangeBase.ChangeAddress()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ChangeAddress
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 99
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nOn change address handler\n"
  example: []
  syntax:
    content: protected override void ChangeAddress()
    content.vb: Protected Overrides Sub ChangeAddress
  overridden: OfficeOpenXml.ExcelAddressBase.ChangeAddress
  overload: OfficeOpenXml.ExcelRangeBase.ChangeAddress*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: OfficeOpenXml.ExcelRangeBase.Style
  commentId: P:OfficeOpenXml.ExcelRangeBase.Style
  id: Style
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Style
  nameWithType: ExcelRangeBase.Style
  fullName: OfficeOpenXml.ExcelRangeBase.Style
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Style
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 431
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nThe style object for the range.\n"
  example: []
  syntax:
    content: public ExcelStyle Style { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Style.ExcelStyle
    content.vb: Public ReadOnly Property Style As ExcelStyle
  overload: OfficeOpenXml.ExcelRangeBase.Style*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.StyleName
  commentId: P:OfficeOpenXml.ExcelRangeBase.StyleName
  id: StyleName
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: StyleName
  nameWithType: ExcelRangeBase.StyleName
  fullName: OfficeOpenXml.ExcelRangeBase.StyleName
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: StyleName
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 458
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nThe named style\n"
  example: []
  syntax:
    content: public string StyleName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property StyleName As String
  overload: OfficeOpenXml.ExcelRangeBase.StyleName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.StyleID
  commentId: P:OfficeOpenXml.ExcelRangeBase.StyleID
  id: StyleID
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: StyleID
  nameWithType: ExcelRangeBase.StyleID
  fullName: OfficeOpenXml.ExcelRangeBase.StyleID
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: StyleID
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 633
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nThe style ID. \nIt is not recomended to use this one. Use Named styles as an alternative.\nIf you do, make sure that you use the Style.UpdateXml() method to update any new styles added to the workbook.\n"
  example: []
  syntax:
    content: public int StyleID { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property StyleID As Integer
  overload: OfficeOpenXml.ExcelRangeBase.StyleID*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Value
  commentId: P:OfficeOpenXml.ExcelRangeBase.Value
  id: Value
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ExcelRangeBase.Value
  fullName: OfficeOpenXml.ExcelRangeBase.Value
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Value
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 655
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSet the range to a specific value\n"
  example: []
  syntax:
    content: public object Value { get; set; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public Property Value As Object
  overload: OfficeOpenXml.ExcelRangeBase.Value*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.SetErrorValue(OfficeOpenXml.eErrorType)
  commentId: M:OfficeOpenXml.ExcelRangeBase.SetErrorValue(OfficeOpenXml.eErrorType)
  id: SetErrorValue(OfficeOpenXml.eErrorType)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SetErrorValue(eErrorType)
  nameWithType: ExcelRangeBase.SetErrorValue(eErrorType)
  fullName: OfficeOpenXml.ExcelRangeBase.SetErrorValue(OfficeOpenXml.eErrorType)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SetErrorValue
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 705
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSets the range to an Error value\n"
  example: []
  syntax:
    content: public void SetErrorValue(eErrorType errorType)
    parameters:
    - id: errorType
      type: OfficeOpenXml.eErrorType
      description: The type of error
    content.vb: Public Sub SetErrorValue(errorType As eErrorType)
  overload: OfficeOpenXml.ExcelRangeBase.SetErrorValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Text
  commentId: P:OfficeOpenXml.ExcelRangeBase.Text
  id: Text
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Text
  nameWithType: ExcelRangeBase.Text
  fullName: OfficeOpenXml.ExcelRangeBase.Text
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Text
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 784
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns the formatted value.\n"
  example: []
  syntax:
    content: public string Text { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Text As String
  overload: OfficeOpenXml.ExcelRangeBase.Text*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.AutoFitColumns
  commentId: M:OfficeOpenXml.ExcelRangeBase.AutoFitColumns
  id: AutoFitColumns
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: AutoFitColumns()
  nameWithType: ExcelRangeBase.AutoFitColumns()
  fullName: OfficeOpenXml.ExcelRangeBase.AutoFitColumns()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AutoFitColumns
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 806
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSet the column width from the content of the range. Columns outside of the worksheets dimension are ignored.\nThe minimum width is the value of the ExcelWorksheet.defaultColumnWidth property.\n"
  remarks: "\nCells containing formulas must be calculated before autofit is called.\nWrapped and merged cells are also ignored.\n"
  example: []
  syntax:
    content: public void AutoFitColumns()
    content.vb: Public Sub AutoFitColumns
  overload: OfficeOpenXml.ExcelRangeBase.AutoFitColumns*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.AutoFitColumns(System.Double)
  commentId: M:OfficeOpenXml.ExcelRangeBase.AutoFitColumns(System.Double)
  id: AutoFitColumns(System.Double)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: AutoFitColumns(Double)
  nameWithType: ExcelRangeBase.AutoFitColumns(Double)
  fullName: OfficeOpenXml.ExcelRangeBase.AutoFitColumns(System.Double)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AutoFitColumns
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 819
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSet the column width from the content of the range. Columns outside of the worksheets dimension are ignored.\n"
  remarks: "\nThis method will not work if you run in an environment that does not support GDI.\nCells containing formulas are ignored if no calculation is made.\nWrapped and merged cells are also ignored.\n"
  example: []
  syntax:
    content: public void AutoFitColumns(double MinimumWidth)
    parameters:
    - id: MinimumWidth
      type: System.Double
      description: Minimum column width
    content.vb: Public Sub AutoFitColumns(MinimumWidth As Double)
  overload: OfficeOpenXml.ExcelRangeBase.AutoFitColumns*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.AutoFitColumns(System.Double,System.Double)
  commentId: M:OfficeOpenXml.ExcelRangeBase.AutoFitColumns(System.Double,System.Double)
  id: AutoFitColumns(System.Double,System.Double)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: AutoFitColumns(Double, Double)
  nameWithType: ExcelRangeBase.AutoFitColumns(Double, Double)
  fullName: OfficeOpenXml.ExcelRangeBase.AutoFitColumns(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AutoFitColumns
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 834
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSet the column width from the content of the range. Columns outside of the worksheets dimension are ignored.\n"
  remarks: "\nThis method will not work if you run in an environment that does not support GDI.\nCells containing formulas are ignored if no calculation is made.\nWrapped and merged cells are also ignored.\n"
  example: []
  syntax:
    content: public void AutoFitColumns(double MinimumWidth, double MaximumWidth)
    parameters:
    - id: MinimumWidth
      type: System.Double
      description: Minimum column width
    - id: MaximumWidth
      type: System.Double
      description: Maximum column width
    content.vb: Public Sub AutoFitColumns(MinimumWidth As Double, MaximumWidth As Double)
  overload: OfficeOpenXml.ExcelRangeBase.AutoFitColumns*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Formula
  commentId: P:OfficeOpenXml.ExcelRangeBase.Formula
  id: Formula
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Formula
  nameWithType: ExcelRangeBase.Formula
  fullName: OfficeOpenXml.ExcelRangeBase.Formula
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Formula
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 857
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGets or sets a formula for a range.\n"
  example: []
  syntax:
    content: public string Formula { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Formula As String
  overload: OfficeOpenXml.ExcelRangeBase.Formula*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.FormulaR1C1
  commentId: P:OfficeOpenXml.ExcelRangeBase.FormulaR1C1
  id: FormulaR1C1
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: FormulaR1C1
  nameWithType: ExcelRangeBase.FormulaR1C1
  fullName: OfficeOpenXml.ExcelRangeBase.FormulaR1C1
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FormulaR1C1
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 985
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGets or Set a formula in R1C1 format.\n"
  example: []
  syntax:
    content: public string FormulaR1C1 { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property FormulaR1C1 As String
  overload: OfficeOpenXml.ExcelRangeBase.FormulaR1C1*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.CreateHtmlExporter
  commentId: M:OfficeOpenXml.ExcelRangeBase.CreateHtmlExporter
  id: CreateHtmlExporter
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: CreateHtmlExporter()
  nameWithType: ExcelRangeBase.CreateHtmlExporter()
  fullName: OfficeOpenXml.ExcelRangeBase.CreateHtmlExporter()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CreateHtmlExporter
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1034
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nCreates an <xref href=\"OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter\" data-throw-if-not-resolved=\"false\"></xref> for html export of this range.\n"
  example: []
  syntax:
    content: public IExcelHtmlRangeExporter CreateHtmlExporter()
    return:
      type: OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter
      description: A html exporter
    content.vb: Public Function CreateHtmlExporter As IExcelHtmlRangeExporter
  overload: OfficeOpenXml.ExcelRangeBase.CreateHtmlExporter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Hyperlink
  commentId: P:OfficeOpenXml.ExcelRangeBase.Hyperlink
  id: Hyperlink
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Hyperlink
  nameWithType: ExcelRangeBase.Hyperlink
  fullName: OfficeOpenXml.ExcelRangeBase.Hyperlink
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Hyperlink
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1046
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSet the Hyperlink property for a range of cells\n"
  example: []
  syntax:
    content: public Uri Hyperlink { get; set; }
    parameters: []
    return:
      type: System.Uri
    content.vb: Public Property Hyperlink As Uri
  overload: OfficeOpenXml.ExcelRangeBase.Hyperlink*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.SetHyperlink(System.Uri)
  commentId: M:OfficeOpenXml.ExcelRangeBase.SetHyperlink(System.Uri)
  id: SetHyperlink(System.Uri)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SetHyperlink(Uri)
  nameWithType: ExcelRangeBase.SetHyperlink(Uri)
  fullName: OfficeOpenXml.ExcelRangeBase.SetHyperlink(System.Uri)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SetHyperlink
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1062
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSets the hyperlink property\n"
  example: []
  syntax:
    content: public void SetHyperlink(Uri uri)
    parameters:
    - id: uri
      type: System.Uri
      description: The URI to set
    content.vb: Public Sub SetHyperlink(uri As Uri)
  overload: OfficeOpenXml.ExcelRangeBase.SetHyperlink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelHyperLink)
  commentId: M:OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelHyperLink)
  id: SetHyperlink(OfficeOpenXml.ExcelHyperLink)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SetHyperlink(ExcelHyperLink)
  nameWithType: ExcelRangeBase.SetHyperlink(ExcelHyperLink)
  fullName: OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelHyperLink)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SetHyperlink
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1070
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSets the Hyperlink property using the ExcelHyperLink class.\n"
  example: []
  syntax:
    content: public void SetHyperlink(ExcelHyperLink uri)
    parameters:
    - id: uri
      type: OfficeOpenXml.ExcelHyperLink
      description: The <xref href="OfficeOpenXml.ExcelHyperLink" data-throw-if-not-resolved="false"></xref> uri to set
    content.vb: Public Sub SetHyperlink(uri As ExcelHyperLink)
  overload: OfficeOpenXml.ExcelRangeBase.SetHyperlink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelRange,System.String)
  commentId: M:OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelRange,System.String)
  id: SetHyperlink(OfficeOpenXml.ExcelRange,System.String)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SetHyperlink(ExcelRange, String)
  nameWithType: ExcelRangeBase.SetHyperlink(ExcelRange, String)
  fullName: OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelRange, System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SetHyperlink
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1079
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSets the Hyperlink property to an url within the workbook.\n"
  example: []
  syntax:
    content: public void SetHyperlink(ExcelRange range, string display)
    parameters:
    - id: range
      type: OfficeOpenXml.ExcelRange
      description: A reference within the same workbook
    - id: display
      type: System.String
      description: The displayed text in the cell. If display is null or empty, the address of the range will be set.
    content.vb: Public Sub SetHyperlink(range As ExcelRange, display As String)
  overload: OfficeOpenXml.ExcelRangeBase.SetHyperlink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelRange)
  commentId: M:OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelRange)
  id: SetHyperlink(OfficeOpenXml.ExcelRange)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SetHyperlink(ExcelRange)
  nameWithType: ExcelRangeBase.SetHyperlink(ExcelRange)
  fullName: OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelRange)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SetHyperlink
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1091
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSets the Hyperlink property to an url within the workbook. The hyperlink will display the value of the cell.\n"
  example: []
  syntax:
    content: public void SetHyperlink(ExcelRange range)
    parameters:
    - id: range
      type: OfficeOpenXml.ExcelRange
      description: A reference within the same workbook
    content.vb: Public Sub SetHyperlink(range As ExcelRange)
  overload: OfficeOpenXml.ExcelRangeBase.SetHyperlink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Merge
  commentId: P:OfficeOpenXml.ExcelRangeBase.Merge
  id: Merge
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Merge
  nameWithType: ExcelRangeBase.Merge
  fullName: OfficeOpenXml.ExcelRangeBase.Merge
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Merge
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1117
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nIf the cells in the range are merged.\n"
  example: []
  syntax:
    content: public bool Merge { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Merge As Boolean
  overload: OfficeOpenXml.ExcelRangeBase.Merge*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.AutoFilter
  commentId: P:OfficeOpenXml.ExcelRangeBase.AutoFilter
  id: AutoFilter
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: AutoFilter
  nameWithType: ExcelRangeBase.AutoFilter
  fullName: OfficeOpenXml.ExcelRangeBase.AutoFilter
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AutoFilter
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1179
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSet an autofilter for the range\n"
  example: []
  syntax:
    content: public bool AutoFilter { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AutoFilter As Boolean
  overload: OfficeOpenXml.ExcelRangeBase.AutoFilter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.IsRichText
  commentId: P:OfficeOpenXml.ExcelRangeBase.IsRichText
  id: IsRichText
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: IsRichText
  nameWithType: ExcelRangeBase.IsRichText
  fullName: OfficeOpenXml.ExcelRangeBase.IsRichText
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsRichText
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1259
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nIf the value is in richtext format.\n"
  example: []
  syntax:
    content: public bool IsRichText { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsRichText As Boolean
  overload: OfficeOpenXml.ExcelRangeBase.IsRichText*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.IsTable
  commentId: P:OfficeOpenXml.ExcelRangeBase.IsTable
  id: IsTable
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: IsTable
  nameWithType: ExcelRangeBase.IsTable
  fullName: OfficeOpenXml.ExcelRangeBase.IsTable
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsTable
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1275
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns true if the range is a table. If the range partly matches a table range false will be returned.\n<xref href=\"OfficeOpenXml.ExcelRangeBase.IsTable\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool IsTable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsTable As Boolean
  overload: OfficeOpenXml.ExcelRangeBase.IsTable*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.GetTable
  commentId: M:OfficeOpenXml.ExcelRangeBase.GetTable
  id: GetTable
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: GetTable()
  nameWithType: ExcelRangeBase.GetTable()
  fullName: OfficeOpenXml.ExcelRangeBase.GetTable()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetTable
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1287
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns the <xref href=\"OfficeOpenXml.Table.ExcelTable\" data-throw-if-not-resolved=\"false\"></xref> if the range is a table. \nIf the range doesn&apos;t or partly matches a table range, null is returned.\n<xref href=\"OfficeOpenXml.ExcelRangeBase.IsTable\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public ExcelTable GetTable()
    return:
      type: OfficeOpenXml.Table.ExcelTable
    content.vb: Public Function GetTable As ExcelTable
  overload: OfficeOpenXml.ExcelRangeBase.GetTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Insert(OfficeOpenXml.eShiftTypeInsert)
  commentId: M:OfficeOpenXml.ExcelRangeBase.Insert(OfficeOpenXml.eShiftTypeInsert)
  id: Insert(OfficeOpenXml.eShiftTypeInsert)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Insert(eShiftTypeInsert)
  nameWithType: ExcelRangeBase.Insert(eShiftTypeInsert)
  fullName: OfficeOpenXml.ExcelRangeBase.Insert(OfficeOpenXml.eShiftTypeInsert)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Insert
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1300
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nInsert cells into the worksheet and shift the cells to the selected direction.\n"
  example: []
  syntax:
    content: public void Insert(eShiftTypeInsert shift)
    parameters:
    - id: shift
      type: OfficeOpenXml.eShiftTypeInsert
      description: The direction that the cells will shift.
    content.vb: Public Sub Insert(shift As eShiftTypeInsert)
  overload: OfficeOpenXml.ExcelRangeBase.Insert*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Delete(OfficeOpenXml.eShiftTypeDelete)
  commentId: M:OfficeOpenXml.ExcelRangeBase.Delete(OfficeOpenXml.eShiftTypeDelete)
  id: Delete(OfficeOpenXml.eShiftTypeDelete)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Delete(eShiftTypeDelete)
  nameWithType: ExcelRangeBase.Delete(eShiftTypeDelete)
  fullName: OfficeOpenXml.ExcelRangeBase.Delete(OfficeOpenXml.eShiftTypeDelete)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Delete
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1319
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nDelete the range from the worksheet and shift affected cells in the selected direction.\n"
  example: []
  syntax:
    content: public void Delete(eShiftTypeDelete shift)
    parameters:
    - id: shift
      type: OfficeOpenXml.eShiftTypeDelete
      description: The direction that the cells will shift.
    content.vb: Public Sub Delete(shift As eShiftTypeDelete)
  overload: OfficeOpenXml.ExcelRangeBase.Delete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.IsArrayFormula
  commentId: P:OfficeOpenXml.ExcelRangeBase.IsArrayFormula
  id: IsArrayFormula
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: IsArrayFormula
  nameWithType: ExcelRangeBase.IsArrayFormula
  fullName: OfficeOpenXml.ExcelRangeBase.IsArrayFormula
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsArrayFormula
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1338
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nIs the range a part of an Arrayformula\n"
  example: []
  syntax:
    content: public bool IsArrayFormula { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsArrayFormula As Boolean
  overload: OfficeOpenXml.ExcelRangeBase.IsArrayFormula*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase._rtc
  commentId: F:OfficeOpenXml.ExcelRangeBase._rtc
  id: _rtc
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: _rtc
  nameWithType: ExcelRangeBase._rtc
  fullName: OfficeOpenXml.ExcelRangeBase._rtc
  type: Field
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: _rtc
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1349
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nThe richtext collection\n"
  example: []
  syntax:
    content: protected ExcelRichTextCollection _rtc
    return:
      type: OfficeOpenXml.Style.ExcelRichTextCollection
    content.vb: Protected _rtc As ExcelRichTextCollection
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: OfficeOpenXml.ExcelRangeBase.RichText
  commentId: P:OfficeOpenXml.ExcelRangeBase.RichText
  id: RichText
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: RichText
  nameWithType: ExcelRangeBase.RichText
  fullName: OfficeOpenXml.ExcelRangeBase.RichText
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: RichText
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1354
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nThe cell value is rich text formatted. \nThe RichText-property only apply to the left-top cell of the range.\n"
  example: []
  syntax:
    content: public ExcelRichTextCollection RichText { get; }
    parameters: []
    return:
      type: OfficeOpenXml.Style.ExcelRichTextCollection
    content.vb: Public ReadOnly Property RichText As ExcelRichTextCollection
  overload: OfficeOpenXml.ExcelRangeBase.RichText*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.Comment
  commentId: P:OfficeOpenXml.ExcelRangeBase.Comment
  id: Comment
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Comment
  nameWithType: ExcelRangeBase.Comment
  fullName: OfficeOpenXml.ExcelRangeBase.Comment
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Comment
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1370
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns the comment object of the first cell in the range\n"
  example: []
  syntax:
    content: public ExcelComment Comment { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelComment
    content.vb: Public ReadOnly Property Comment As ExcelComment
  overload: OfficeOpenXml.ExcelRangeBase.Comment*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.ThreadedComment
  commentId: P:OfficeOpenXml.ExcelRangeBase.ThreadedComment
  id: ThreadedComment
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ThreadedComment
  nameWithType: ExcelRangeBase.ThreadedComment
  fullName: OfficeOpenXml.ExcelRangeBase.ThreadedComment
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ThreadedComment
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1389
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns the threaded comment object of the first cell in the range\n"
  example: []
  syntax:
    content: public ExcelThreadedCommentThread ThreadedComment { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread
    content.vb: Public ReadOnly Property ThreadedComment As ExcelThreadedCommentThread
  overload: OfficeOpenXml.ExcelRangeBase.ThreadedComment*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.Worksheet
  commentId: P:OfficeOpenXml.ExcelRangeBase.Worksheet
  id: Worksheet
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Worksheet
  nameWithType: ExcelRangeBase.Worksheet
  fullName: OfficeOpenXml.ExcelRangeBase.Worksheet
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Worksheet
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1408
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nWorkSheet object \n"
  example: []
  syntax:
    content: public ExcelWorksheet Worksheet { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelWorksheet
    content.vb: Public ReadOnly Property Worksheet As ExcelWorksheet
  overload: OfficeOpenXml.ExcelRangeBase.Worksheet*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.FullAddress
  commentId: P:OfficeOpenXml.ExcelRangeBase.FullAddress
  id: FullAddress
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: FullAddress
  nameWithType: ExcelRangeBase.FullAddress
  fullName: OfficeOpenXml.ExcelRangeBase.FullAddress
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FullAddress
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1418
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nAddress including sheet name\n"
  example: []
  syntax:
    content: public string FullAddress { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FullAddress As String
  overload: OfficeOpenXml.ExcelRangeBase.FullAddress*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.FullAddressAbsolute
  commentId: P:OfficeOpenXml.ExcelRangeBase.FullAddressAbsolute
  id: FullAddressAbsolute
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: FullAddressAbsolute
  nameWithType: ExcelRangeBase.FullAddressAbsolute
  fullName: OfficeOpenXml.ExcelRangeBase.FullAddressAbsolute
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FullAddressAbsolute
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1440
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nAddress including sheetname\n"
  example: []
  syntax:
    content: public string FullAddressAbsolute { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FullAddressAbsolute As String
  overload: OfficeOpenXml.ExcelRangeBase.FullAddressAbsolute*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.ClearFormulas
  commentId: M:OfficeOpenXml.ExcelRangeBase.ClearFormulas
  id: ClearFormulas
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ClearFormulas()
  nameWithType: ExcelRangeBase.ClearFormulas()
  fullName: OfficeOpenXml.ExcelRangeBase.ClearFormulas()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ClearFormulas
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1677
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nRemoves all formulas within the range, but keeps the calculated values.\n"
  example: []
  syntax:
    content: public void ClearFormulas()
    content.vb: Public Sub ClearFormulas
  overload: OfficeOpenXml.ExcelRangeBase.ClearFormulas*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.ClearFormulaValues
  commentId: M:OfficeOpenXml.ExcelRangeBase.ClearFormulaValues
  id: ClearFormulaValues
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ClearFormulaValues()
  nameWithType: ExcelRangeBase.ClearFormulaValues()
  fullName: OfficeOpenXml.ExcelRangeBase.ClearFormulaValues()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ClearFormulaValues
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1726
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nRemoves all values of cells with formulas, but keeps the formulas.\n"
  example: []
  syntax:
    content: public void ClearFormulaValues()
    content.vb: Public Sub ClearFormulaValues
  overload: OfficeOpenXml.ExcelRangeBase.ClearFormulaValues*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.ConditionalFormatting
  commentId: P:OfficeOpenXml.ExcelRangeBase.ConditionalFormatting
  id: ConditionalFormatting
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ConditionalFormatting
  nameWithType: ExcelRangeBase.ConditionalFormatting
  fullName: OfficeOpenXml.ExcelRangeBase.ConditionalFormatting
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ConditionalFormatting
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1812
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nConditional Formatting for this range.\n"
  example: []
  syntax:
    content: public IRangeConditionalFormatting ConditionalFormatting { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting
    content.vb: Public ReadOnly Property ConditionalFormatting As IRangeConditionalFormatting
  overload: OfficeOpenXml.ExcelRangeBase.ConditionalFormatting*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.DataValidation
  commentId: P:OfficeOpenXml.ExcelRangeBase.DataValidation
  id: DataValidation
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: DataValidation
  nameWithType: ExcelRangeBase.DataValidation
  fullName: OfficeOpenXml.ExcelRangeBase.DataValidation
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: DataValidation
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1824
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nData validation for this range.\n"
  example: []
  syntax:
    content: public IRangeDataValidation DataValidation { get; }
    parameters: []
    return:
      type: OfficeOpenXml.DataValidation.IRangeDataValidation
    content.vb: Public ReadOnly Property DataValidation As IRangeDataValidation
  overload: OfficeOpenXml.ExcelRangeBase.DataValidation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.GetValue``1
  commentId: M:OfficeOpenXml.ExcelRangeBase.GetValue``1
  id: GetValue``1
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: GetValue<T>()
  nameWithType: ExcelRangeBase.GetValue<T>()
  fullName: OfficeOpenXml.ExcelRangeBase.GetValue<T>()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetValue
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1857
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nConvert cell value to desired type, including nullable structs.\nWhen converting blank string to nullable struct (e.g. &apos; &apos; to int?) null is returned.\nWhen attempted conversion fails exception is passed through.\n"
  remarks: "\nIf  <xref href=\"OfficeOpenXml.ExcelRangeBase.Value\" data-throw-if-not-resolved=\"false\"></xref> is string, parsing is performed for output types of DateTime and TimeSpan, which if fails throws <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>.\nAnother special case for output types of DateTime and TimeSpan is when input is double, in which case <xref href=\"System.DateTime.FromOADate(System.Double)\" data-throw-if-not-resolved=\"false\"></xref>\nis used for conversion. This special case does not work through other types convertible to double (e.g. integer or string with number).\nIn all other cases &apos;direct&apos; conversion <xref href=\"System.Convert.ChangeType(System.Object%2cSystem.Type)\" data-throw-if-not-resolved=\"false\"></xref> is performed.\n"
  example: []
  syntax:
    content: public T GetValue<T>()
    typeParameters:
    - id: T
      description: "\nThe type to convert to.\n"
    return:
      type: '{T}'
      description: "\nThe <xref href=\"OfficeOpenXml.ExcelRangeBase.Value\" data-throw-if-not-resolved=\"false\"></xref> converted to <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n"
    content.vb: Public Function GetValue(Of T) As T
  overload: OfficeOpenXml.ExcelRangeBase.GetValue*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<xref href=\"OfficeOpenXml.ExcelRangeBase.Value\" data-throw-if-not-resolved=\"false\"></xref> is string and its format is invalid for conversion (parsing fails)\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<xref href=\"OfficeOpenXml.ExcelRangeBase.Value\" data-throw-if-not-resolved=\"false\"></xref> is not string and direct conversion fails\n"
  nameWithType.vb: ExcelRangeBase.GetValue(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.GetValue(Of T)()
  name.vb: GetValue(Of T)()
- uid: OfficeOpenXml.ExcelRangeBase.Offset(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.ExcelRangeBase.Offset(System.Int32,System.Int32)
  id: Offset(System.Int32,System.Int32)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Offset(Int32, Int32)
  nameWithType: ExcelRangeBase.Offset(Int32, Int32)
  fullName: OfficeOpenXml.ExcelRangeBase.Offset(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Offset
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1869
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGet a range with an offset from the top left cell.\nThe new range has the same dimensions as the current range\n"
  example: []
  syntax:
    content: public ExcelRangeBase Offset(int RowOffset, int ColumnOffset)
    parameters:
    - id: RowOffset
      type: System.Int32
      description: Row Offset
    - id: ColumnOffset
      type: System.Int32
      description: Column Offset
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: ''
    content.vb: Public Function Offset(RowOffset As Integer, ColumnOffset As Integer) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.Offset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Offset(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.ExcelRangeBase.Offset(System.Int32,System.Int32,System.Int32,System.Int32)
  id: Offset(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Offset(Int32, Int32, Int32, Int32)
  nameWithType: ExcelRangeBase.Offset(Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.ExcelRangeBase.Offset(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Offset
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1886
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGet a range with an offset from the top left cell.\n"
  example: []
  syntax:
    content: public ExcelRangeBase Offset(int RowOffset, int ColumnOffset, int NumberOfRows, int NumberOfColumns)
    parameters:
    - id: RowOffset
      type: System.Int32
      description: Row Offset
    - id: ColumnOffset
      type: System.Int32
      description: Column Offset
    - id: NumberOfRows
      type: System.Int32
      description: Number of rows. Minimum 1
    - id: NumberOfColumns
      type: System.Int32
      description: Number of colums. Minimum 1
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: ''
    content.vb: Public Function Offset(RowOffset As Integer, ColumnOffset As Integer, NumberOfRows As Integer, NumberOfColumns As Integer) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.Offset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.AddComment(System.String,System.String)
  commentId: M:OfficeOpenXml.ExcelRangeBase.AddComment(System.String,System.String)
  id: AddComment(System.String,System.String)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: AddComment(String, String)
  nameWithType: ExcelRangeBase.AddComment(String, String)
  fullName: OfficeOpenXml.ExcelRangeBase.AddComment(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AddComment
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1909
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nAdds a new comment for the range.\nIf this range contains more than one cell, the top left comment is returned by the method.\n"
  example: []
  syntax:
    content: public ExcelComment AddComment(string Text, string Author = null)
    parameters:
    - id: Text
      type: System.String
      description: The text for the comment
    - id: Author
      type: System.String
      description: The author for the comment. If this property is null or blank EPPlus will set it to the identity of the ClaimsPrincipal if available otherwise to &quot;Anonymous&quot;
    return:
      type: OfficeOpenXml.ExcelComment
      description: A reference comment of the top left cell
    content.vb: Public Function AddComment(Text As String, Author As String = Nothing) As ExcelComment
  overload: OfficeOpenXml.ExcelRangeBase.AddComment*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.AddThreadedComment
  commentId: M:OfficeOpenXml.ExcelRangeBase.AddThreadedComment
  id: AddThreadedComment
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: AddThreadedComment()
  nameWithType: ExcelRangeBase.AddThreadedComment()
  fullName: OfficeOpenXml.ExcelRangeBase.AddThreadedComment()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AddThreadedComment
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1923
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nAdds a new threaded comment for the range.\nIf this range contains more than one cell, the top left comment is returned by the method.\n"
  example: []
  syntax:
    content: public ExcelThreadedCommentThread AddThreadedComment()
    return:
      type: OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread
      description: A reference comment of the top left cell
    content.vb: Public Function AddThreadedComment As ExcelThreadedCommentThread
  overload: OfficeOpenXml.ExcelRangeBase.AddThreadedComment*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase)
  commentId: M:OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase)
  id: Copy(OfficeOpenXml.ExcelRangeBase)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Copy(ExcelRangeBase)
  nameWithType: ExcelRangeBase.Copy(ExcelRangeBase)
  fullName: OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Copy
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1937
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nCopies the range of cells to another range. \n"
  example: []
  syntax:
    content: public void Copy(ExcelRangeBase Destination)
    parameters:
    - id: Destination
      type: OfficeOpenXml.ExcelRangeBase
      description: The top-left cell where the range will be copied.
    content.vb: Public Sub Copy(Destination As ExcelRangeBase)
  overload: OfficeOpenXml.ExcelRangeBase.Copy*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase,System.Nullable{OfficeOpenXml.ExcelRangeCopyOptionFlags})
  commentId: M:OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase,System.Nullable{OfficeOpenXml.ExcelRangeCopyOptionFlags})
  id: Copy(OfficeOpenXml.ExcelRangeBase,System.Nullable{OfficeOpenXml.ExcelRangeCopyOptionFlags})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Copy(ExcelRangeBase, Nullable<ExcelRangeCopyOptionFlags>)
  nameWithType: ExcelRangeBase.Copy(ExcelRangeBase, Nullable<ExcelRangeCopyOptionFlags>)
  fullName: OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase, System.Nullable<OfficeOpenXml.ExcelRangeCopyOptionFlags>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Copy
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1948
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nCopies the range of cells to an other range\n"
  example: []
  syntax:
    content: public void Copy(ExcelRangeBase Destination, ExcelRangeCopyOptionFlags? excelRangeCopyOptionFlags)
    parameters:
    - id: Destination
      type: OfficeOpenXml.ExcelRangeBase
      description: The start cell where the range will be copied.
    - id: excelRangeCopyOptionFlags
      type: System.Nullable{OfficeOpenXml.ExcelRangeCopyOptionFlags}
      description: Cell properties that will not be copied.
    content.vb: Public Sub Copy(Destination As ExcelRangeBase, excelRangeCopyOptionFlags As ExcelRangeCopyOptionFlags?)
  overload: OfficeOpenXml.ExcelRangeBase.Copy*
  nameWithType.vb: ExcelRangeBase.Copy(ExcelRangeBase, Nullable(Of ExcelRangeCopyOptionFlags))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase, System.Nullable(Of OfficeOpenXml.ExcelRangeCopyOptionFlags))
  name.vb: Copy(ExcelRangeBase, Nullable(Of ExcelRangeCopyOptionFlags))
- uid: OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeCopyOptionFlags[])
  commentId: M:OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeCopyOptionFlags[])
  id: Copy(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeCopyOptionFlags[])
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Copy(ExcelRangeBase, ExcelRangeCopyOptionFlags[])
  nameWithType: ExcelRangeBase.Copy(ExcelRangeBase, ExcelRangeCopyOptionFlags[])
  fullName: OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase, OfficeOpenXml.ExcelRangeCopyOptionFlags[])
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Copy
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1958
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nCopies the range of cells to an other range\n"
  example: []
  syntax:
    content: public void Copy(ExcelRangeBase Destination, params ExcelRangeCopyOptionFlags[] excelRangeCopyOptionFlags)
    parameters:
    - id: Destination
      type: OfficeOpenXml.ExcelRangeBase
      description: The start cell where the range will be copied.
    - id: excelRangeCopyOptionFlags
      type: OfficeOpenXml.ExcelRangeCopyOptionFlags[]
      description: Cell properties that will not be copied.
    content.vb: Public Sub Copy(Destination As ExcelRangeBase, ParamArray excelRangeCopyOptionFlags As ExcelRangeCopyOptionFlags())
  overload: OfficeOpenXml.ExcelRangeBase.Copy*
  nameWithType.vb: ExcelRangeBase.Copy(ExcelRangeBase, ExcelRangeCopyOptionFlags())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase, OfficeOpenXml.ExcelRangeCopyOptionFlags())
  name.vb: Copy(ExcelRangeBase, ExcelRangeCopyOptionFlags())
- uid: OfficeOpenXml.ExcelRangeBase.CopyStyles(OfficeOpenXml.ExcelRangeBase)
  commentId: M:OfficeOpenXml.ExcelRangeBase.CopyStyles(OfficeOpenXml.ExcelRangeBase)
  id: CopyStyles(OfficeOpenXml.ExcelRangeBase)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: CopyStyles(ExcelRangeBase)
  nameWithType: ExcelRangeBase.CopyStyles(ExcelRangeBase)
  fullName: OfficeOpenXml.ExcelRangeBase.CopyStyles(OfficeOpenXml.ExcelRangeBase)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CopyStyles
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1973
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nCopy the styles from the source range to the destination range.\nIf the destination range is larger than the source range, the styles of the column to the right and the row at the bottom will be expanded to the destination.\n"
  example: []
  syntax:
    content: public void CopyStyles(ExcelRangeBase Destination)
    parameters:
    - id: Destination
      type: OfficeOpenXml.ExcelRangeBase
      description: The destination range
    content.vb: Public Sub CopyStyles(Destination As ExcelRangeBase)
  overload: OfficeOpenXml.ExcelRangeBase.CopyStyles*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Clear
  commentId: M:OfficeOpenXml.ExcelRangeBase.Clear
  id: Clear
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ExcelRangeBase.Clear()
  fullName: OfficeOpenXml.ExcelRangeBase.Clear()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Clear
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1981
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nClear all cells\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: OfficeOpenXml.ExcelRangeBase.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.CreateArrayFormula(System.String)
  commentId: M:OfficeOpenXml.ExcelRangeBase.CreateArrayFormula(System.String)
  id: CreateArrayFormula(System.String)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: CreateArrayFormula(String)
  nameWithType: ExcelRangeBase.CreateArrayFormula(String)
  fullName: OfficeOpenXml.ExcelRangeBase.CreateArrayFormula(System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CreateArrayFormula
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 1989
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nCreates an array-formula.\n"
  example: []
  syntax:
    content: public void CreateArrayFormula(string ArrayFormula)
    parameters:
    - id: ArrayFormula
      type: System.String
      description: The formula
    content.vb: Public Sub CreateArrayFormula(ArrayFormula As String)
  overload: OfficeOpenXml.ExcelRangeBase.CreateArrayFormula*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Dispose
  commentId: M:OfficeOpenXml.ExcelRangeBase.Dispose
  id: Dispose
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ExcelRangeBase.Dispose()
  fullName: OfficeOpenXml.ExcelRangeBase.Dispose()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Dispose
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2137
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nDisposes the object\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: OfficeOpenXml.ExcelRangeBase.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.GetEnumerator
  commentId: M:OfficeOpenXml.ExcelRangeBase.GetEnumerator
  id: GetEnumerator
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ExcelRangeBase.GetEnumerator()
  fullName: OfficeOpenXml.ExcelRangeBase.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetEnumerator
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2149
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGets the enumerator for the collection\n"
  example: []
  syntax:
    content: public IEnumerator<ExcelRangeBase> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeBase}
      description: The enumerator
    content.vb: Public Function GetEnumerator As IEnumerator(Of ExcelRangeBase)
  overload: OfficeOpenXml.ExcelRangeBase.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeBase}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerable#GetEnumerator
  commentId: M:OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ExcelRangeBase.IEnumerable.GetEnumerator()
  fullName: OfficeOpenXml.ExcelRangeBase.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2155
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExcelRangeBase.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: OfficeOpenXml.ExcelRangeBase.Current
  commentId: P:OfficeOpenXml.ExcelRangeBase.Current
  id: Current
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: ExcelRangeBase.Current
  fullName: OfficeOpenXml.ExcelRangeBase.Current
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Current
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2164
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nThe current range when enumerating\n"
  example: []
  syntax:
    content: public ExcelRangeBase Current { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelRangeBase
    content.vb: Public ReadOnly Property Current As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.Current*
  implements:
  - System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeBase}.Current
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerator#Current
  commentId: P:OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: IEnumerator.Current
  nameWithType: ExcelRangeBase.IEnumerator.Current
  fullName: OfficeOpenXml.ExcelRangeBase.System.Collections.IEnumerator.Current
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: System.Collections.IEnumerator.Current
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2179
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nThe current range when enumerating\n"
  example: []
  syntax:
    content: object IEnumerator.Current { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property System.Collections.IEnumerator.Current As Object Implements IEnumerator.Current
  overload: OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerator#Current*
  implements:
  - System.Collections.IEnumerator.Current
  nameWithType.vb: ExcelRangeBase.System.Collections.IEnumerator.Current
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IEnumerator.Current
- uid: OfficeOpenXml.ExcelRangeBase.MoveNext
  commentId: M:OfficeOpenXml.ExcelRangeBase.MoveNext
  id: MoveNext
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: ExcelRangeBase.MoveNext()
  fullName: OfficeOpenXml.ExcelRangeBase.MoveNext()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: MoveNext
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2198
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nIterate to the next cell\n"
  example: []
  syntax:
    content: public bool MoveNext()
    return:
      type: System.Boolean
      description: False if no more cells exists
    content.vb: Public Function MoveNext As Boolean
  overload: OfficeOpenXml.ExcelRangeBase.MoveNext*
  implements:
  - System.Collections.IEnumerator.MoveNext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Reset
  commentId: M:OfficeOpenXml.ExcelRangeBase.Reset
  id: Reset
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: ExcelRangeBase.Reset()
  fullName: OfficeOpenXml.ExcelRangeBase.Reset()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Reset
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2231
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReset the enumerator\n"
  example: []
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: OfficeOpenXml.ExcelRangeBase.Reset*
  implements:
  - System.Collections.IEnumerator.Reset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Sort
  commentId: M:OfficeOpenXml.ExcelRangeBase.Sort
  id: Sort
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Sort()
  nameWithType: ExcelRangeBase.Sort()
  fullName: OfficeOpenXml.ExcelRangeBase.Sort()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Sort
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2241
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSort the range by value of the first column, Ascending.\n"
  example: []
  syntax:
    content: public void Sort()
    content.vb: Public Sub Sort
  overload: OfficeOpenXml.ExcelRangeBase.Sort*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Sort(System.Int32,System.Boolean)
  commentId: M:OfficeOpenXml.ExcelRangeBase.Sort(System.Int32,System.Boolean)
  id: Sort(System.Int32,System.Boolean)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Sort(Int32, Boolean)
  nameWithType: ExcelRangeBase.Sort(Int32, Boolean)
  fullName: OfficeOpenXml.ExcelRangeBase.Sort(System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Sort
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2250
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSort the range by value of the supplied column, Ascending.\n<param name=\"column\">The column to sort by within the range. Zerobased</param>\n<param name=\"descending\">Descending if true, otherwise Ascending. Default Ascending. Zerobased</param>\n"
  example: []
  syntax:
    content: public void Sort(int column, bool descending = false)
    parameters:
    - id: column
      type: System.Int32
    - id: descending
      type: System.Boolean
    content.vb: Public Sub Sort(column As Integer, descending As Boolean = False)
  overload: OfficeOpenXml.ExcelRangeBase.Sort*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.Sort(System.Int32[],System.Boolean[],System.Globalization.CultureInfo,System.Globalization.CompareOptions)
  commentId: M:OfficeOpenXml.ExcelRangeBase.Sort(System.Int32[],System.Boolean[],System.Globalization.CultureInfo,System.Globalization.CompareOptions)
  id: Sort(System.Int32[],System.Boolean[],System.Globalization.CultureInfo,System.Globalization.CompareOptions)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Sort(Int32[], Boolean[], CultureInfo, CompareOptions)
  nameWithType: ExcelRangeBase.Sort(Int32[], Boolean[], CultureInfo, CompareOptions)
  fullName: OfficeOpenXml.ExcelRangeBase.Sort(System.Int32[], System.Boolean[], System.Globalization.CultureInfo, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Sort
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2261
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSort the range by value\n"
  example: []
  syntax:
    content: public void Sort(int[] columns, bool[] descending = null, CultureInfo culture = null, CompareOptions compareOptions = CompareOptions.None)
    parameters:
    - id: columns
      type: System.Int32[]
      description: The column(s) to sort by within the range. Zerobased
    - id: descending
      type: System.Boolean[]
      description: Descending if true, otherwise Ascending. Default Ascending. Zerobased
    - id: culture
      type: System.Globalization.CultureInfo
      description: The CultureInfo used to compare values. A null value means CurrentCulture
    - id: compareOptions
      type: System.Globalization.CompareOptions
      description: String compare option
    content.vb: Public Sub Sort(columns As Integer(), descending As Boolean() = Nothing, culture As CultureInfo = Nothing, compareOptions As CompareOptions = CompareOptions.None)
  overload: OfficeOpenXml.ExcelRangeBase.Sort*
  nameWithType.vb: ExcelRangeBase.Sort(Int32(), Boolean(), CultureInfo, CompareOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.Sort(System.Int32(), System.Boolean(), System.Globalization.CultureInfo, System.Globalization.CompareOptions)
  name.vb: Sort(Int32(), Boolean(), CultureInfo, CompareOptions)
- uid: OfficeOpenXml.ExcelRangeBase.Sort(System.Action{OfficeOpenXml.Sorting.RangeSortOptions})
  commentId: M:OfficeOpenXml.ExcelRangeBase.Sort(System.Action{OfficeOpenXml.Sorting.RangeSortOptions})
  id: Sort(System.Action{OfficeOpenXml.Sorting.RangeSortOptions})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Sort(Action<RangeSortOptions>)
  nameWithType: ExcelRangeBase.Sort(Action<RangeSortOptions>)
  fullName: OfficeOpenXml.ExcelRangeBase.Sort(System.Action<OfficeOpenXml.Sorting.RangeSortOptions>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Sort
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2345
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSort the range by value. Supports top-down and left to right sort.\n"
  example:
  - "\n<pre><code>// 1. Sort rows (top-down)\n\n// The Column function takes the zero based column index in the range\nworksheet.Cells[&quot;A1:D15&quot;].Sort(x => x.SortBy.Column(0).ThenSortBy.Column(1, eSortOrder.Descending));\n\n// 2. Sort columns(left to right)\n// The Row function takes the zero based row index in the range\nworksheet.Cells[&quot;A1:D15&quot;].Sort(x => x.SortLeftToRightBy.Row(0));\n\n// 3. Sort using a custom list\nworksheet.Cells[&quot;A1:D15&quot;].Sort(x => x.SortBy.Column(0).UsingCustomList(&quot;S&quot;, &quot;M&quot;, &quot;L&quot;, &quot;XL&quot;));\nworksheet.Cells[&quot;A1:D15&quot;].Sort(x => x.SortLeftToRightBy.Row(0).UsingCustomList(&quot;S&quot;, &quot;M&quot;, &quot;L&quot;, &quot;XL&quot;));</code></pre>\n"
  syntax:
    content: public void Sort(Action<RangeSortOptions> configuration)
    parameters:
    - id: configuration
      type: System.Action{OfficeOpenXml.Sorting.RangeSortOptions}
      description: An action of <xref href="OfficeOpenXml.Sorting.RangeSortOptions" data-throw-if-not-resolved="false"></xref> where sort parameters can be set.
    content.vb: Public Sub Sort(configuration As Action(Of RangeSortOptions))
  overload: OfficeOpenXml.ExcelRangeBase.Sort*
  nameWithType.vb: ExcelRangeBase.Sort(Action(Of RangeSortOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.Sort(System.Action(Of OfficeOpenXml.Sorting.RangeSortOptions))
  name.vb: Sort(Action(Of RangeSortOptions))
- uid: OfficeOpenXml.ExcelRangeBase.Sort(OfficeOpenXml.Sorting.RangeSortOptions)
  commentId: M:OfficeOpenXml.ExcelRangeBase.Sort(OfficeOpenXml.Sorting.RangeSortOptions)
  id: Sort(OfficeOpenXml.Sorting.RangeSortOptions)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: Sort(RangeSortOptions)
  nameWithType: ExcelRangeBase.Sort(RangeSortOptions)
  fullName: OfficeOpenXml.ExcelRangeBase.Sort(OfficeOpenXml.Sorting.RangeSortOptions)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Sort
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2366
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSort the range by value. Use RangeSortOptions.Create() to create an instance of the sort options, then\nuse the <xref href=\"OfficeOpenXml.Sorting.RangeSortOptions.SortBy\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"OfficeOpenXml.Sorting.RangeSortOptions.SortLeftToRightBy\" data-throw-if-not-resolved=\"false\"></xref> properties to build up your sort parameters.\n"
  example:
  - "\n<pre><code>var options = RangeSortOptions.Create();\nvar builder = options.SortBy.Column(0);\nbuilder.ThenSortBy.Column(2).UsingCustomList(&quot;S&quot;, &quot;M&quot;, &quot;L&quot;, &quot;XL&quot;);\nbuilder.ThenSortBy.Column(3);\nworksheet.Cells[&quot;A1:D15&quot;].Sort(options);</code></pre>\n"
  syntax:
    content: public void Sort(RangeSortOptions options)
    parameters:
    - id: options
      type: OfficeOpenXml.Sorting.RangeSortOptions
      description: <xref href="OfficeOpenXml.Sorting.RangeSortOptions?text=Options" data-throw-if-not-resolved="false"></xref> for the sort
    content.vb: Public Sub Sort(options As RangeSortOptions)
  overload: OfficeOpenXml.ExcelRangeBase.Sort*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.EntireColumn
  commentId: P:OfficeOpenXml.ExcelRangeBase.EntireColumn
  id: EntireColumn
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: EntireColumn
  nameWithType: ExcelRangeBase.EntireColumn
  fullName: OfficeOpenXml.ExcelRangeBase.EntireColumn
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: EntireColumn
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2401
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nA reference to the column properties for column(s= referenced by this range.\nIf multiple ranges are addressed (e.g a1:a2,c1:c3), only the first address is used.\n"
  example: []
  syntax:
    content: public ExcelRangeColumn EntireColumn { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelRangeColumn
    content.vb: Public ReadOnly Property EntireColumn As ExcelRangeColumn
  overload: OfficeOpenXml.ExcelRangeBase.EntireColumn*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.EntireRow
  commentId: P:OfficeOpenXml.ExcelRangeBase.EntireRow
  id: EntireRow
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: EntireRow
  nameWithType: ExcelRangeBase.EntireRow
  fullName: OfficeOpenXml.ExcelRangeBase.EntireRow
  type: Property
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: EntireRow
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2417
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nA reference to the row properties for row(s) referenced by this range.\nIf multiple ranges are addressed (e.g a1:a2,c1:c3), only the first address is used.\n"
  example: []
  syntax:
    content: public ExcelRangeRow EntireRow { get; }
    parameters: []
    return:
      type: OfficeOpenXml.ExcelRangeRow
    content.vb: Public ReadOnly Property EntireRow As ExcelRangeRow
  overload: OfficeOpenXml.ExcelRangeBase.EntireRow*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.ExcelRangeBase.GetCellValue``1
  commentId: M:OfficeOpenXml.ExcelRangeBase.GetCellValue``1
  id: GetCellValue``1
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: GetCellValue<T>()
  nameWithType: ExcelRangeBase.GetCellValue<T>()
  fullName: OfficeOpenXml.ExcelRangeBase.GetCellValue<T>()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetCellValue
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2433
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGets the typed value of a cell \n"
  example: []
  syntax:
    content: public T GetCellValue<T>()
    typeParameters:
    - id: T
      description: The returned type
    return:
      type: '{T}'
      description: The value of the cell
    content.vb: Public Function GetCellValue(Of T) As T
  overload: OfficeOpenXml.ExcelRangeBase.GetCellValue*
  nameWithType.vb: ExcelRangeBase.GetCellValue(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.GetCellValue(Of T)()
  name.vb: GetCellValue(Of T)()
- uid: OfficeOpenXml.ExcelRangeBase.GetCellValue``1(System.Int32)
  commentId: M:OfficeOpenXml.ExcelRangeBase.GetCellValue``1(System.Int32)
  id: GetCellValue``1(System.Int32)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: GetCellValue<T>(Int32)
  nameWithType: ExcelRangeBase.GetCellValue<T>(Int32)
  fullName: OfficeOpenXml.ExcelRangeBase.GetCellValue<T>(System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetCellValue
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2442
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGets the value of a cell using an offset from the top-left cell in the range.\n"
  example: []
  syntax:
    content: public T GetCellValue<T>(int columnOffset)
    parameters:
    - id: columnOffset
      type: System.Int32
      description: Column offset from the top-left cell in the range
    typeParameters:
    - id: T
      description: The returned type
    return:
      type: '{T}'
    content.vb: Public Function GetCellValue(Of T)(columnOffset As Integer) As T
  overload: OfficeOpenXml.ExcelRangeBase.GetCellValue*
  nameWithType.vb: ExcelRangeBase.GetCellValue(Of T)(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.GetCellValue(Of T)(System.Int32)
  name.vb: GetCellValue(Of T)(Int32)
- uid: OfficeOpenXml.ExcelRangeBase.GetCellValue``1(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.ExcelRangeBase.GetCellValue``1(System.Int32,System.Int32)
  id: GetCellValue``1(System.Int32,System.Int32)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: GetCellValue<T>(Int32, Int32)
  nameWithType: ExcelRangeBase.GetCellValue<T>(Int32, Int32)
  fullName: OfficeOpenXml.ExcelRangeBase.GetCellValue<T>(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetCellValue
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2452
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nGets the value of a cell using an offset from the top-left cell in the range.\n"
  example: []
  syntax:
    content: public T GetCellValue<T>(int rowOffset, int columnOffset)
    parameters:
    - id: rowOffset
      type: System.Int32
      description: Row offset from the top-left cell in the range
    - id: columnOffset
      type: System.Int32
      description: Column offset from the top-left cell in the range
    typeParameters:
    - id: T
      description: The returned type
    return:
      type: '{T}'
    content.vb: Public Function GetCellValue(Of T)(rowOffset As Integer, columnOffset As Integer) As T
  overload: OfficeOpenXml.ExcelRangeBase.GetCellValue*
  nameWithType.vb: ExcelRangeBase.GetCellValue(Of T)(Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.GetCellValue(Of T)(System.Int32, System.Int32)
  name.vb: GetCellValue(Of T)(Int32, Int32)
- uid: OfficeOpenXml.ExcelRangeBase.SetCellValue(System.Int32,System.Int32,System.Object)
  commentId: M:OfficeOpenXml.ExcelRangeBase.SetCellValue(System.Int32,System.Int32,System.Object)
  id: SetCellValue(System.Int32,System.Int32,System.Object)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SetCellValue(Int32, Int32, Object)
  nameWithType: ExcelRangeBase.SetCellValue(Int32, Int32, Object)
  fullName: OfficeOpenXml.ExcelRangeBase.SetCellValue(System.Int32, System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SetCellValue
    path: ../src/EPPlus/ExcelRangeBase.cs
    startLine: 2487
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSets the value of a cell using an offset from the top-left cell in the range.\n"
  example: []
  syntax:
    content: public void SetCellValue(int rowOffset, int columnOffset, object value)
    parameters:
    - id: rowOffset
      type: System.Int32
      description: Row offset from the top-left cell in the range
    - id: columnOffset
      type: System.Int32
      description: Column offset from the top-left cell in the range
    - id: value
      type: System.Object
      description: The value to set.
    content.vb: Public Sub SetCellValue(rowOffset As Integer, columnOffset As Integer, value As Object)
  overload: OfficeOpenXml.ExcelRangeBase.SetCellValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.FillNumber
  commentId: M:OfficeOpenXml.ExcelRangeBase.FillNumber
  id: FillNumber
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: FillNumber()
  nameWithType: ExcelRangeBase.FillNumber()
  fullName: OfficeOpenXml.ExcelRangeBase.FillNumber()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Fill.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FillNumber
    path: ../src/EPPlus/ExcelRangeBase_Fill.cs
    startLine: 24
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nFills the range by adding 1 to each cell starting from the value in the top left cell by column\n"
  example: []
  syntax:
    content: public void FillNumber()
    content.vb: Public Sub FillNumber
  overload: OfficeOpenXml.ExcelRangeBase.FillNumber*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.FillNumber(System.Nullable{System.Double},System.Double)
  commentId: M:OfficeOpenXml.ExcelRangeBase.FillNumber(System.Nullable{System.Double},System.Double)
  id: FillNumber(System.Nullable{System.Double},System.Double)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: FillNumber(Nullable<Double>, Double)
  nameWithType: ExcelRangeBase.FillNumber(Nullable<Double>, Double)
  fullName: OfficeOpenXml.ExcelRangeBase.FillNumber(System.Nullable<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Fill.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FillNumber
    path: ../src/EPPlus/ExcelRangeBase_Fill.cs
    startLine: 34
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nFills a range by adding the step value to the start Value. If <code data-dev-comment-type=\"paramref\" class=\"paramref\">startValue</code> is null the first value in the row/column is used.\nFill is done by column from top to bottom\n"
  example: []
  syntax:
    content: public void FillNumber(double? startValue, double stepValue = 1)
    parameters:
    - id: startValue
      type: System.Nullable{System.Double}
      description: The start value of the first cell. If this value is null the value of the first cell is used.
    - id: stepValue
      type: System.Double
      description: The value used for each step
    content.vb: Public Sub FillNumber(startValue As Double?, stepValue As Double = 1)
  overload: OfficeOpenXml.ExcelRangeBase.FillNumber*
  nameWithType.vb: ExcelRangeBase.FillNumber(Nullable(Of Double), Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.FillNumber(System.Nullable(Of System.Double), System.Double)
  name.vb: FillNumber(Nullable(Of Double), Double)
- uid: OfficeOpenXml.ExcelRangeBase.FillNumber(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams})
  commentId: M:OfficeOpenXml.ExcelRangeBase.FillNumber(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams})
  id: FillNumber(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: FillNumber(Action<FillNumberParams>)
  nameWithType: ExcelRangeBase.FillNumber(Action<FillNumberParams>)
  fullName: OfficeOpenXml.ExcelRangeBase.FillNumber(System.Action<OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Fill.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FillNumber
    path: ../src/EPPlus/ExcelRangeBase_Fill.cs
    startLine: 42
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nFills a range by using the argument options. \n"
  example: []
  syntax:
    content: public void FillNumber(Action<FillNumberParams> options)
    parameters:
    - id: options
      type: System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams}
      description: The option to configure the fill.
    content.vb: Public Sub FillNumber(options As Action(Of FillNumberParams))
  overload: OfficeOpenXml.ExcelRangeBase.FillNumber*
  nameWithType.vb: ExcelRangeBase.FillNumber(Action(Of FillNumberParams))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.FillNumber(System.Action(Of OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams))
  name.vb: FillNumber(Action(Of FillNumberParams))
- uid: OfficeOpenXml.ExcelRangeBase.FillDateTime
  commentId: M:OfficeOpenXml.ExcelRangeBase.FillDateTime
  id: FillDateTime
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: FillDateTime()
  nameWithType: ExcelRangeBase.FillDateTime()
  fullName: OfficeOpenXml.ExcelRangeBase.FillDateTime()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Fill.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FillDateTime
    path: ../src/EPPlus/ExcelRangeBase_Fill.cs
    startLine: 92
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nFills the range by adding 1 day to each cell starting from the value in the top left cell by column.\n"
  example: []
  syntax:
    content: public void FillDateTime()
    content.vb: Public Sub FillDateTime
  overload: OfficeOpenXml.ExcelRangeBase.FillDateTime*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Nullable{System.DateTime},OfficeOpenXml.eDateTimeUnit,System.Int32)
  commentId: M:OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Nullable{System.DateTime},OfficeOpenXml.eDateTimeUnit,System.Int32)
  id: FillDateTime(System.Nullable{System.DateTime},OfficeOpenXml.eDateTimeUnit,System.Int32)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: FillDateTime(Nullable<DateTime>, eDateTimeUnit, Int32)
  nameWithType: ExcelRangeBase.FillDateTime(Nullable<DateTime>, eDateTimeUnit, Int32)
  fullName: OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Nullable<System.DateTime>, OfficeOpenXml.eDateTimeUnit, System.Int32)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Fill.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FillDateTime
    path: ../src/EPPlus/ExcelRangeBase_Fill.cs
    startLine: 99
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nFills the range by adding 1 day to each cell per column starting from <code data-dev-comment-type=\"paramref\" class=\"paramref\">startValue</code>.\n"
  example: []
  syntax:
    content: public void FillDateTime(DateTime? startValue, eDateTimeUnit dateTimeUnit = eDateTimeUnit.Day, int stepValue = 1)
    parameters:
    - id: startValue
      type: System.Nullable{System.DateTime}
    - id: dateTimeUnit
      type: OfficeOpenXml.eDateTimeUnit
    - id: stepValue
      type: System.Int32
    content.vb: Public Sub FillDateTime(startValue As Date?, dateTimeUnit As eDateTimeUnit = eDateTimeUnit.Day, stepValue As Integer = 1)
  overload: OfficeOpenXml.ExcelRangeBase.FillDateTime*
  nameWithType.vb: ExcelRangeBase.FillDateTime(Nullable(Of DateTime), eDateTimeUnit, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Nullable(Of System.DateTime), OfficeOpenXml.eDateTimeUnit, System.Int32)
  name.vb: FillDateTime(Nullable(Of DateTime), eDateTimeUnit, Int32)
- uid: OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillDateParams})
  commentId: M:OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillDateParams})
  id: FillDateTime(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillDateParams})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: FillDateTime(Action<FillDateParams>)
  nameWithType: ExcelRangeBase.FillDateTime(Action<FillDateParams>)
  fullName: OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Action<OfficeOpenXml.Core.Worksheet.Fill.FillDateParams>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Fill.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FillDateTime
    path: ../src/EPPlus/ExcelRangeBase_Fill.cs
    startLine: 112
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nFill the range with dates.\n"
  example: []
  syntax:
    content: public void FillDateTime(Action<FillDateParams> options)
    parameters:
    - id: options
      type: System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillDateParams}
      description: Options how to perform the fill
    content.vb: Public Sub FillDateTime(options As Action(Of FillDateParams))
  overload: OfficeOpenXml.ExcelRangeBase.FillDateTime*
  nameWithType.vb: ExcelRangeBase.FillDateTime(Action(Of FillDateParams))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Action(Of OfficeOpenXml.Core.Worksheet.Fill.FillDateParams))
  name.vb: FillDateTime(Action(Of FillDateParams))
- uid: OfficeOpenXml.ExcelRangeBase.FillList``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:OfficeOpenXml.ExcelRangeBase.FillList``1(System.Collections.Generic.IEnumerable{``0})
  id: FillList``1(System.Collections.Generic.IEnumerable{``0})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: FillList<T>(IEnumerable<T>)
  nameWithType: ExcelRangeBase.FillList<T>(IEnumerable<T>)
  fullName: OfficeOpenXml.ExcelRangeBase.FillList<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Fill.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FillList
    path: ../src/EPPlus/ExcelRangeBase_Fill.cs
    startLine: 164
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nFills the range columnwise using the values in the list. \n"
  example: []
  syntax:
    content: public void FillList<T>(IEnumerable<T> list)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The list to use.
    typeParameters:
    - id: T
      description: Type used in the list.
    content.vb: Public Sub FillList(Of T)(list As IEnumerable(Of T))
  overload: OfficeOpenXml.ExcelRangeBase.FillList*
  nameWithType.vb: ExcelRangeBase.FillList(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.FillList(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: FillList(Of T)(IEnumerable(Of T))
- uid: OfficeOpenXml.ExcelRangeBase.FillList``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillListParams})
  commentId: M:OfficeOpenXml.ExcelRangeBase.FillList``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillListParams})
  id: FillList``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillListParams})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: FillList<T>(IEnumerable<T>, Action<FillListParams>)
  nameWithType: ExcelRangeBase.FillList<T>(IEnumerable<T>, Action<FillListParams>)
  fullName: OfficeOpenXml.ExcelRangeBase.FillList<T>(System.Collections.Generic.IEnumerable<T>, System.Action<OfficeOpenXml.Core.Worksheet.Fill.FillListParams>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Fill.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: FillList
    path: ../src/EPPlus/ExcelRangeBase_Fill.cs
    startLine: 174
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\n\n"
  example: []
  syntax:
    content: public void FillList<T>(IEnumerable<T> list, Action<FillListParams> options)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: options
      type: System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillListParams}
      description: ''
    typeParameters:
    - id: T
      description: ''
    content.vb: Public Sub FillList(Of T)(list As IEnumerable(Of T), options As Action(Of FillListParams))
  overload: OfficeOpenXml.ExcelRangeBase.FillList*
  nameWithType.vb: ExcelRangeBase.FillList(Of T)(IEnumerable(Of T), Action(Of FillListParams))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.FillList(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of OfficeOpenXml.Core.Worksheet.Fill.FillListParams))
  name.vb: FillList(Of T)(IEnumerable(Of T), Action(Of FillListParams))
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDataReader(System.Data.IDataReader,System.Boolean,System.String,OfficeOpenXml.Table.TableStyles)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDataReader(System.Data.IDataReader,System.Boolean,System.String,OfficeOpenXml.Table.TableStyles)
  id: LoadFromDataReader(System.Data.IDataReader,System.Boolean,System.String,OfficeOpenXml.Table.TableStyles)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDataReader(IDataReader, Boolean, String, TableStyles)
  nameWithType: ExcelRangeBase.LoadFromDataReader(IDataReader, Boolean, String, TableStyles)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDataReader(System.Data.IDataReader, System.Boolean, System.String, OfficeOpenXml.Table.TableStyles)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDataReader
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 45
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad the data from the datareader starting from the top left cell of the range\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromDataReader(IDataReader Reader, bool PrintHeaders, string TableName, TableStyles TableStyle = TableStyles.None)
    parameters:
    - id: Reader
      type: System.Data.IDataReader
      description: The datareader to loadfrom
    - id: PrintHeaders
      type: System.Boolean
      description: Print the column caption property (if set) or the columnname property if not, on first row
    - id: TableName
      type: System.String
      description: The name of the table
    - id: TableStyle
      type: OfficeOpenXml.Table.TableStyles
      description: The table style to apply to the data
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromDataReader(Reader As IDataReader, PrintHeaders As Boolean, TableName As String, TableStyle As TableStyles = TableStyles.None) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDataReader*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDataReader(System.Data.IDataReader,System.Boolean)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDataReader(System.Data.IDataReader,System.Boolean)
  id: LoadFromDataReader(System.Data.IDataReader,System.Boolean)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDataReader(IDataReader, Boolean)
  nameWithType: ExcelRangeBase.LoadFromDataReader(IDataReader, Boolean)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDataReader(System.Data.IDataReader, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDataReader
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 65
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad the data from the datareader starting from the top left cell of the range\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromDataReader(IDataReader Reader, bool PrintHeaders)
    parameters:
    - id: Reader
      type: System.Data.IDataReader
      description: The datareader to load from
    - id: PrintHeaders
      type: System.Boolean
      description: Print the caption property (if set) or the columnname property if not, on first row
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromDataReader(Reader As IDataReader, PrintHeaders As Boolean) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDataReader*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean,System.String,OfficeOpenXml.Table.TableStyles,System.Nullable{System.Threading.CancellationToken})
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean,System.String,OfficeOpenXml.Table.TableStyles,System.Nullable{System.Threading.CancellationToken})
  id: LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean,System.String,OfficeOpenXml.Table.TableStyles,System.Nullable{System.Threading.CancellationToken})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDataReaderAsync(DbDataReader, Boolean, String, TableStyles, Nullable<CancellationToken>)
  nameWithType: ExcelRangeBase.LoadFromDataReaderAsync(DbDataReader, Boolean, String, TableStyles, Nullable<CancellationToken>)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader, System.Boolean, System.String, OfficeOpenXml.Table.TableStyles, System.Nullable<System.Threading.CancellationToken>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDataReaderAsync
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 105
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad the data from the datareader starting from the top left cell of the range\n"
  example: []
  syntax:
    content: public async Task<ExcelRangeBase> LoadFromDataReaderAsync(DbDataReader Reader, bool PrintHeaders, string TableName, TableStyles TableStyle = TableStyles.None, CancellationToken? cancellationToken = null)
    parameters:
    - id: Reader
      type: System.Data.Common.DbDataReader
      description: The datareader to loadfrom
    - id: PrintHeaders
      type: System.Boolean
      description: Print the column caption property (if set) or the columnname property if not, on first row
    - id: TableName
      type: System.String
      description: The name of the table
    - id: TableStyle
      type: OfficeOpenXml.Table.TableStyles
      description: The table style to apply to the data
    - id: cancellationToken
      type: System.Nullable{System.Threading.CancellationToken}
      description: The cancellation token to use
    return:
      type: System.Threading.Tasks.Task{OfficeOpenXml.ExcelRangeBase}
      description: The filled range
    content.vb: Public Function LoadFromDataReaderAsync(Reader As DbDataReader, PrintHeaders As Boolean, TableName As String, TableStyle As TableStyles = TableStyles.None, cancellationToken As CancellationToken? = Nothing) As Task(Of ExcelRangeBase)
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync*
  nameWithType.vb: ExcelRangeBase.LoadFromDataReaderAsync(DbDataReader, Boolean, String, TableStyles, Nullable(Of CancellationToken))
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader, System.Boolean, System.String, OfficeOpenXml.Table.TableStyles, System.Nullable(Of System.Threading.CancellationToken))
  name.vb: LoadFromDataReaderAsync(DbDataReader, Boolean, String, TableStyles, Nullable(Of CancellationToken))
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean)
  id: LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDataReaderAsync(DbDataReader, Boolean)
  nameWithType: ExcelRangeBase.LoadFromDataReaderAsync(DbDataReader, Boolean)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDataReaderAsync
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 127
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad the data from the datareader starting from the top left cell of the range\n"
  example: []
  syntax:
    content: public async Task<ExcelRangeBase> LoadFromDataReaderAsync(DbDataReader Reader, bool PrintHeaders)
    parameters:
    - id: Reader
      type: System.Data.Common.DbDataReader
      description: The datareader to load from
    - id: PrintHeaders
      type: System.Boolean
      description: Print the caption property (if set) or the columnname property if not, on first row
    return:
      type: System.Threading.Tasks.Task{OfficeOpenXml.ExcelRangeBase}
      description: The filled range
    content.vb: Public Function LoadFromDataReaderAsync(Reader As DbDataReader, PrintHeaders As Boolean) As Task(Of ExcelRangeBase)
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken)
  id: LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDataReaderAsync(DbDataReader, Boolean, CancellationToken)
  nameWithType: ExcelRangeBase.LoadFromDataReaderAsync(DbDataReader, Boolean, CancellationToken)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDataReaderAsync
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 138
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad the data from the datareader starting from the top left cell of the range\n"
  example: []
  syntax:
    content: public async Task<ExcelRangeBase> LoadFromDataReaderAsync(DbDataReader Reader, bool PrintHeaders, CancellationToken cancellationToken)
    parameters:
    - id: Reader
      type: System.Data.Common.DbDataReader
      description: The datareader to load from
    - id: PrintHeaders
      type: System.Boolean
      description: Print the caption property (if set) or the columnname property if not, on first row
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to use
    return:
      type: System.Threading.Tasks.Task{OfficeOpenXml.ExcelRangeBase}
      description: The filled range
    content.vb: Public Function LoadFromDataReaderAsync(Reader As DbDataReader, PrintHeaders As Boolean, cancellationToken As CancellationToken) As Task(Of ExcelRangeBase)
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})
  id: LoadFromDataTable(System.Data.DataTable,System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDataTable(DataTable, Boolean, Nullable<TableStyles>)
  nameWithType: ExcelRangeBase.LoadFromDataTable(DataTable, Boolean, Nullable<TableStyles>)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable, System.Boolean, System.Nullable<OfficeOpenXml.Table.TableStyles>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDataTable
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 183
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad the data from the datatable starting from the top left cell of the range\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromDataTable(DataTable Table, bool PrintHeaders, TableStyles? TableStyle)
    parameters:
    - id: Table
      type: System.Data.DataTable
      description: The datatable to load
    - id: PrintHeaders
      type: System.Boolean
      description: Print the column caption property (if set) or the columnname property if not, on first row
    - id: TableStyle
      type: System.Nullable{OfficeOpenXml.Table.TableStyles}
      description: The table style to apply to the data
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromDataTable(Table As DataTable, PrintHeaders As Boolean, TableStyle As TableStyles?) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable*
  nameWithType.vb: ExcelRangeBase.LoadFromDataTable(DataTable, Boolean, Nullable(Of TableStyles))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable, System.Boolean, System.Nullable(Of OfficeOpenXml.Table.TableStyles))
  name.vb: LoadFromDataTable(DataTable, Boolean, Nullable(Of TableStyles))
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Boolean)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Boolean)
  id: LoadFromDataTable(System.Data.DataTable,System.Boolean)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDataTable(DataTable, Boolean)
  nameWithType: ExcelRangeBase.LoadFromDataTable(DataTable, Boolean)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDataTable
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 199
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad the data from the datatable starting from the top left cell of the range\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromDataTable(DataTable Table, bool PrintHeaders)
    parameters:
    - id: Table
      type: System.Data.DataTable
      description: The datatable to load
    - id: PrintHeaders
      type: System.Boolean
      description: Print the caption property (if set) or the columnname property if not, on first row
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromDataTable(Table As DataTable, PrintHeaders As Boolean) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable)
  id: LoadFromDataTable(System.Data.DataTable)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDataTable(DataTable)
  nameWithType: ExcelRangeBase.LoadFromDataTable(DataTable)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDataTable
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 209
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad the data from the datatable starting from the top left cell of the range\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromDataTable(DataTable table)
    parameters:
    - id: table
      type: System.Data.DataTable
      description: The datatable to load
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromDataTable(table As DataTable) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams})
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams})
  id: LoadFromDataTable(System.Data.DataTable,System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDataTable(DataTable, Action<LoadFromDataTableParams>)
  nameWithType: ExcelRangeBase.LoadFromDataTable(DataTable, Action<LoadFromDataTableParams>)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable, System.Action<OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDataTable
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 229
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad the data from the <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> starting from the top left cell of the range\n"
  example:
  - "\n<pre><code>sheet.Cells[&quot;C1&quot;].LoadFromDataTable(dataTable, c =>\n{\n    c.PrintHeaders = true;\n    c.TableStyle = TableStyles.Dark1;\n});</code></pre>\n"
  syntax:
    content: public ExcelRangeBase LoadFromDataTable(DataTable table, Action<LoadFromDataTableParams> paramsConfig)
    parameters:
    - id: table
      type: System.Data.DataTable
      description: ''
    - id: paramsConfig
      type: System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams}
      description: <xref href="System.Action%601" data-throw-if-not-resolved="false"></xref> to provide parameters to the function
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromDataTable(table As DataTable, paramsConfig As Action(Of LoadFromDataTableParams)) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable*
  nameWithType.vb: ExcelRangeBase.LoadFromDataTable(DataTable, Action(Of LoadFromDataTableParams))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable, System.Action(Of OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams))
  name.vb: LoadFromDataTable(DataTable, Action(Of LoadFromDataTableParams))
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromArrays(System.Collections.Generic.IEnumerable{System.Object[]})
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromArrays(System.Collections.Generic.IEnumerable{System.Object[]})
  id: LoadFromArrays(System.Collections.Generic.IEnumerable{System.Object[]})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromArrays(IEnumerable<Object[]>)
  nameWithType: ExcelRangeBase.LoadFromArrays(IEnumerable<Object[]>)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromArrays(System.Collections.Generic.IEnumerable<System.Object[]>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromArrays
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 242
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoads data from the collection of arrays of objects into the range, starting from\nthe top-left cell.\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromArrays(IEnumerable<object[]> Data)
    parameters:
    - id: Data
      type: System.Collections.Generic.IEnumerable{System.Object[]}
      description: The data.
    return:
      type: OfficeOpenXml.ExcelRangeBase
    content.vb: Public Function LoadFromArrays(Data As IEnumerable(Of Object())) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromArrays*
  nameWithType.vb: ExcelRangeBase.LoadFromArrays(IEnumerable(Of Object()))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromArrays(System.Collections.Generic.IEnumerable(Of System.Object()))
  name.vb: LoadFromArrays(IEnumerable(Of Object()))
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})
  id: LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromCollection<T>(IEnumerable<T>)
  nameWithType: ExcelRangeBase.LoadFromCollection<T>(IEnumerable<T>)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromCollection<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromCollection
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 266
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad a collection into a the worksheet starting from the top left row of the range.\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromCollection<T>(IEnumerable<T> Collection)
    parameters:
    - id: Collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to load
    typeParameters:
    - id: T
      description: The datatype in the collection
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromCollection(Of T)(Collection As IEnumerable(Of T)) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromCollection*
  nameWithType.vb: ExcelRangeBase.LoadFromCollection(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromCollection(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: LoadFromCollection(Of T)(IEnumerable(Of T))
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
  id: LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromCollection<T>(IEnumerable<T>, Boolean)
  nameWithType: ExcelRangeBase.LoadFromCollection<T>(IEnumerable<T>, Boolean)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromCollection<T>(System.Collections.Generic.IEnumerable<T>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromCollection
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 293
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad a collection of T into the worksheet starting from the top left row of the range.\nDefault option will load all public instance properties of T\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromCollection<T>(IEnumerable<T> Collection, bool PrintHeaders)
    parameters:
    - id: Collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to load
    - id: PrintHeaders
      type: System.Boolean
      description: Print the property names on the first row. If the property is decorated with a <xref href="System.ComponentModel.DisplayNameAttribute" data-throw-if-not-resolved="false"></xref> or a <xref href="System.ComponentModel.DescriptionAttribute" data-throw-if-not-resolved="false"></xref> that attribute will be used instead of the reflected member name.
    typeParameters:
    - id: T
      description: The datatype in the collection
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromCollection(Of T)(Collection As IEnumerable(Of T), PrintHeaders As Boolean) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromCollection*
  nameWithType.vb: ExcelRangeBase.LoadFromCollection(Of T)(IEnumerable(Of T), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromCollection(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Boolean)
  name.vb: LoadFromCollection(Of T)(IEnumerable(Of T), Boolean)
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})
  id: LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromCollection<T>(IEnumerable<T>, Boolean, Nullable<TableStyles>)
  nameWithType: ExcelRangeBase.LoadFromCollection<T>(IEnumerable<T>, Boolean, Nullable<TableStyles>)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromCollection<T>(System.Collections.Generic.IEnumerable<T>, System.Boolean, System.Nullable<OfficeOpenXml.Table.TableStyles>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromCollection
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 306
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad a collection of T into the worksheet starting from the top left row of the range.\nDefault option will load all public instance properties of T\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromCollection<T>(IEnumerable<T> Collection, bool PrintHeaders, TableStyles? TableStyle)
    parameters:
    - id: Collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to load
    - id: PrintHeaders
      type: System.Boolean
      description: Print the property names on the first row. If the property is decorated with a <xref href="System.ComponentModel.DisplayNameAttribute" data-throw-if-not-resolved="false"></xref> or a <xref href="System.ComponentModel.DescriptionAttribute" data-throw-if-not-resolved="false"></xref> that attribute will be used instead of the reflected member name.
    - id: TableStyle
      type: System.Nullable{OfficeOpenXml.Table.TableStyles}
      description: Will create a table with this style. If set to TableStyles.None no table will be created
    typeParameters:
    - id: T
      description: The datatype in the collection
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromCollection(Of T)(Collection As IEnumerable(Of T), PrintHeaders As Boolean, TableStyle As TableStyles?) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromCollection*
  nameWithType.vb: ExcelRangeBase.LoadFromCollection(Of T)(IEnumerable(Of T), Boolean, Nullable(Of TableStyles))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromCollection(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Boolean, System.Nullable(Of OfficeOpenXml.Table.TableStyles))
  name.vb: LoadFromCollection(Of T)(IEnumerable(Of T), Boolean, Nullable(Of TableStyles))
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Reflection.BindingFlags,System.Reflection.MemberInfo[])
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Reflection.BindingFlags,System.Reflection.MemberInfo[])
  id: LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Reflection.BindingFlags,System.Reflection.MemberInfo[])
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromCollection<T>(IEnumerable<T>, Boolean, Nullable<TableStyles>, BindingFlags, MemberInfo[])
  nameWithType: ExcelRangeBase.LoadFromCollection<T>(IEnumerable<T>, Boolean, Nullable<TableStyles>, BindingFlags, MemberInfo[])
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromCollection<T>(System.Collections.Generic.IEnumerable<T>, System.Boolean, System.Nullable<OfficeOpenXml.Table.TableStyles>, System.Reflection.BindingFlags, System.Reflection.MemberInfo[])
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromCollection
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 320
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad a collection into the worksheet starting from the top left row of the range.\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromCollection<T>(IEnumerable<T> Collection, bool PrintHeaders, TableStyles? TableStyle, BindingFlags memberFlags, MemberInfo[] Members)
    parameters:
    - id: Collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to load
    - id: PrintHeaders
      type: System.Boolean
      description: Print the property names on the first row. Any underscore in the property name will be converted to a space. If the property is decorated with a <xref href="System.ComponentModel.DisplayNameAttribute" data-throw-if-not-resolved="false"></xref> or a <xref href="System.ComponentModel.DescriptionAttribute" data-throw-if-not-resolved="false"></xref> that attribute will be used instead of the reflected member name.
    - id: TableStyle
      type: System.Nullable{OfficeOpenXml.Table.TableStyles}
      description: Will create a table with this style. If set to TableStyles.None no table will be created
    - id: memberFlags
      type: System.Reflection.BindingFlags
      description: Property flags to use
    - id: Members
      type: System.Reflection.MemberInfo[]
      description: The properties to output. Must be of type T
    typeParameters:
    - id: T
      description: The datatype in the collection
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromCollection(Of T)(Collection As IEnumerable(Of T), PrintHeaders As Boolean, TableStyle As TableStyles?, memberFlags As BindingFlags, Members As MemberInfo()) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromCollection*
  nameWithType.vb: ExcelRangeBase.LoadFromCollection(Of T)(IEnumerable(Of T), Boolean, Nullable(Of TableStyles), BindingFlags, MemberInfo())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromCollection(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Boolean, System.Nullable(Of OfficeOpenXml.Table.TableStyles), System.Reflection.BindingFlags, System.Reflection.MemberInfo())
  name.vb: LoadFromCollection(Of T)(IEnumerable(Of T), Boolean, Nullable(Of TableStyles), BindingFlags, MemberInfo())
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams})
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams})
  id: LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromCollection<T>(IEnumerable<T>, Action<LoadFromCollectionParams>)
  nameWithType: ExcelRangeBase.LoadFromCollection<T>(IEnumerable<T>, Action<LoadFromCollectionParams>)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromCollection<T>(System.Collections.Generic.IEnumerable<T>, System.Action<OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromCollection
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 360
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad a collection into the worksheet starting from the top left row of the range.\n"
  example:
  - "\n<pre><code>sheet.Cells[&quot;C1&quot;].LoadFromCollection(items, c =>\n{\n    c.PrintHeaders = true;\n    c.TableStyle = TableStyles.Dark1;\n});</code></pre>\n"
  syntax:
    content: public ExcelRangeBase LoadFromCollection<T>(IEnumerable<T> collection, Action<LoadFromCollectionParams> paramsConfig)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to load
    - id: paramsConfig
      type: System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams}
      description: <xref href="System.Action%601" data-throw-if-not-resolved="false"></xref> to provide parameters to the function
    typeParameters:
    - id: T
      description: The datatype in the collection
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromCollection(Of T)(collection As IEnumerable(Of T), paramsConfig As Action(Of LoadFromCollectionParams)) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromCollection*
  nameWithType.vb: ExcelRangeBase.LoadFromCollection(Of T)(IEnumerable(Of T), Action(Of LoadFromCollectionParams))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromCollection(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams))
  name.vb: LoadFromCollection(Of T)(IEnumerable(Of T), Action(Of LoadFromCollectionParams))
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String)
  id: LoadFromText(System.String)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromText(String)
  nameWithType: ExcelRangeBase.LoadFromText(String)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromText
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 381
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoads a CSV text into a range starting from the top left cell.\nDefault settings is Comma separation\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromText(string Text)
    parameters:
    - id: Text
      type: System.String
      description: The Text
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The range containing the data
    content.vb: Public Function LoadFromText(Text As String) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat)
  id: LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromText(String, ExcelTextFormat)
  nameWithType: ExcelRangeBase.LoadFromText(String, ExcelTextFormat)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String, OfficeOpenXml.ExcelTextFormat)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromText
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 391
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoads a CSV text into a range starting from the top left cell.\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromText(string Text, ExcelTextFormat Format)
    parameters:
    - id: Text
      type: System.String
      description: The Text
    - id: Format
      type: OfficeOpenXml.ExcelTextFormat
      description: Information how to load the text
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The range containing the data
    content.vb: Public Function LoadFromText(Text As String, Format As ExcelTextFormat) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Boolean)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Boolean)
  id: LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Boolean)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromText(String, ExcelTextFormat, Nullable<TableStyles>, Boolean)
  nameWithType: ExcelRangeBase.LoadFromText(String, ExcelTextFormat, Nullable<TableStyles>, Boolean)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String, OfficeOpenXml.ExcelTextFormat, System.Nullable<OfficeOpenXml.Table.TableStyles>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromText
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 415
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoads a CSV text into a range starting from the top left cell.\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromText(string Text, ExcelTextFormat Format, TableStyles? TableStyle, bool FirstRowIsHeader)
    parameters:
    - id: Text
      type: System.String
      description: The Text
    - id: Format
      type: OfficeOpenXml.ExcelTextFormat
      description: Information how to load the text
    - id: TableStyle
      type: System.Nullable{OfficeOpenXml.Table.TableStyles}
      description: Create a table with this style. If this parameter is not null no table will be created.
    - id: FirstRowIsHeader
      type: System.Boolean
      description: Use the first row as header
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: ''
    content.vb: Public Function LoadFromText(Text As String, Format As ExcelTextFormat, TableStyle As TableStyles?, FirstRowIsHeader As Boolean) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromText*
  nameWithType.vb: ExcelRangeBase.LoadFromText(String, ExcelTextFormat, Nullable(Of TableStyles), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String, OfficeOpenXml.ExcelTextFormat, System.Nullable(Of OfficeOpenXml.Table.TableStyles), System.Boolean)
  name.vb: LoadFromText(String, ExcelTextFormat, Nullable(Of TableStyles), Boolean)
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo)
  id: LoadFromText(System.IO.FileInfo)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromText(FileInfo)
  nameWithType: ExcelRangeBase.LoadFromText(FileInfo)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromText
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 432
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoads a CSV file into a range starting from the top left cell using ASCII Encoding.\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromText(FileInfo TextFile)
    parameters:
    - id: TextFile
      type: System.IO.FileInfo
      description: The Textfile
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: ''
    content.vb: Public Function LoadFromText(TextFile As FileInfo) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat)
  id: LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromText(FileInfo, ExcelTextFormat)
  nameWithType: ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo, OfficeOpenXml.ExcelTextFormat)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromText
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 442
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoads a CSV file into a range starting from the top left cell.\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromText(FileInfo TextFile, ExcelTextFormat Format)
    parameters:
    - id: TextFile
      type: System.IO.FileInfo
      description: The Textfile
    - id: Format
      type: OfficeOpenXml.ExcelTextFormat
      description: Information how to load the text
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: ''
    content.vb: Public Function LoadFromText(TextFile As FileInfo, Format As ExcelTextFormat) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Boolean)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Boolean)
  id: LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Boolean)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromText(FileInfo, ExcelTextFormat, Nullable<TableStyles>, Boolean)
  nameWithType: ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat, Nullable<TableStyles>, Boolean)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo, OfficeOpenXml.ExcelTextFormat, System.Nullable<OfficeOpenXml.Table.TableStyles>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromText
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 459
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoads a CSV file into a range starting from the top left cell.\n"
  example: []
  syntax:
    content: public ExcelRangeBase LoadFromText(FileInfo TextFile, ExcelTextFormat Format, TableStyles? TableStyle, bool FirstRowIsHeader)
    parameters:
    - id: TextFile
      type: System.IO.FileInfo
      description: The Textfile
    - id: Format
      type: OfficeOpenXml.ExcelTextFormat
      description: Information how to load the text
    - id: TableStyle
      type: System.Nullable{OfficeOpenXml.Table.TableStyles}
      description: Create a table with this style
    - id: FirstRowIsHeader
      type: System.Boolean
      description: Use the first row as header
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: ''
    content.vb: Public Function LoadFromText(TextFile As FileInfo, Format As ExcelTextFormat, TableStyle As TableStyles?, FirstRowIsHeader As Boolean) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromText*
  nameWithType.vb: ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat, Nullable(Of TableStyles), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo, OfficeOpenXml.ExcelTextFormat, System.Nullable(Of OfficeOpenXml.Table.TableStyles), System.Boolean)
  name.vb: LoadFromText(FileInfo, ExcelTextFormat, Nullable(Of TableStyles), Boolean)
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo)
  id: LoadFromTextAsync(System.IO.FileInfo)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromTextAsync(FileInfo)
  nameWithType: ExcelRangeBase.LoadFromTextAsync(FileInfo)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromTextAsync
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 475
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoads a CSV file into a range starting from the top left cell.\n"
  example: []
  syntax:
    content: public async Task<ExcelRangeBase> LoadFromTextAsync(FileInfo TextFile)
    parameters:
    - id: TextFile
      type: System.IO.FileInfo
      description: The Textfile
    return:
      type: System.Threading.Tasks.Task{OfficeOpenXml.ExcelRangeBase}
      description: ''
    content.vb: Public Function LoadFromTextAsync(TextFile As FileInfo) As Task(Of ExcelRangeBase)
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat)
  id: LoadFromTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromTextAsync(FileInfo, ExcelTextFormat)
  nameWithType: ExcelRangeBase.LoadFromTextAsync(FileInfo, ExcelTextFormat)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo, OfficeOpenXml.ExcelTextFormat)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromTextAsync
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 492
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoads a CSV file into a range starting from the top left cell.\n"
  example: []
  syntax:
    content: public async Task<ExcelRangeBase> LoadFromTextAsync(FileInfo TextFile, ExcelTextFormat Format)
    parameters:
    - id: TextFile
      type: System.IO.FileInfo
      description: The Textfile
    - id: Format
      type: OfficeOpenXml.ExcelTextFormat
      description: Information how to load the text
    return:
      type: System.Threading.Tasks.Task{OfficeOpenXml.ExcelRangeBase}
      description: ''
    content.vb: Public Function LoadFromTextAsync(TextFile As FileInfo, Format As ExcelTextFormat) As Task(Of ExcelRangeBase)
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat,OfficeOpenXml.Table.TableStyles,System.Boolean)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat,OfficeOpenXml.Table.TableStyles,System.Boolean)
  id: LoadFromTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat,OfficeOpenXml.Table.TableStyles,System.Boolean)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromTextAsync(FileInfo, ExcelTextFormat, TableStyles, Boolean)
  nameWithType: ExcelRangeBase.LoadFromTextAsync(FileInfo, ExcelTextFormat, TableStyles, Boolean)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo, OfficeOpenXml.ExcelTextFormat, OfficeOpenXml.Table.TableStyles, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromTextAsync
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 511
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoads a CSV file into a range starting from the top left cell.\n"
  example: []
  syntax:
    content: public async Task<ExcelRangeBase> LoadFromTextAsync(FileInfo TextFile, ExcelTextFormat Format, TableStyles TableStyle, bool FirstRowIsHeader)
    parameters:
    - id: TextFile
      type: System.IO.FileInfo
      description: The Textfile
    - id: Format
      type: OfficeOpenXml.ExcelTextFormat
      description: Information how to load the text
    - id: TableStyle
      type: OfficeOpenXml.Table.TableStyles
      description: Create a table with this style
    - id: FirstRowIsHeader
      type: System.Boolean
      description: Use the first row as header
    return:
      type: System.Threading.Tasks.Task{OfficeOpenXml.ExcelRangeBase}
      description: ''
    content.vb: Public Function LoadFromTextAsync(TextFile As FileInfo, Format As ExcelTextFormat, TableStyle As TableStyles, FirstRowIsHeader As Boolean) As Task(Of ExcelRangeBase)
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}})
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}})
  id: LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDictionaries(IEnumerable<IDictionary<String, Object>>)
  nameWithType: ExcelRangeBase.LoadFromDictionaries(IEnumerable<IDictionary<String, Object>>)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable<System.Collections.Generic.IDictionary<System.String, System.Object>>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDictionaries
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 554
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.\nThese dictionaries should have the same set of keys.\n"
  example:
  - "\n<pre><code> var items = new List&lt;IDictionary&lt;string, object>>()\n   {\n       new Dictionary&lt;string, object>()\n       { \n           { &quot;Id&quot;, 1 },\n           { &quot;Name&quot;, &quot;TestName 1&quot; }\n       },\n       new Dictionary&lt;string, object>()\n       {\n           { &quot;Id&quot;, 2 },\n           { &quot;Name&quot;, &quot;TestName 2&quot; }\n       }\n   };\n   using(var package = new ExcelPackage())\n   {\n       var sheet = package.Workbook.Worksheets.Add(&quot;test&quot;);\n       var r = sheet.Cells[&quot;A1&quot;].LoadFromDictionaries(items);\n   }</code></pre>\n"
  syntax:
    content: public ExcelRangeBase LoadFromDictionaries(IEnumerable<IDictionary<string, object>> items)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}}
      description: A list of dictionaries/>
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromDictionaries(items As IEnumerable(Of IDictionary(Of String, Object))) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries*
  nameWithType.vb: ExcelRangeBase.LoadFromDictionaries(IEnumerable(Of IDictionary(Of String, Object)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)))
  name.vb: LoadFromDictionaries(IEnumerable(Of IDictionary(Of String, Object)))
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean)
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean)
  id: LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDictionaries(IEnumerable<IDictionary<String, Object>>, Boolean)
  nameWithType: ExcelRangeBase.LoadFromDictionaries(IEnumerable<IDictionary<String, Object>>, Boolean)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable<System.Collections.Generic.IDictionary<System.String, System.Object>>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDictionaries
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 588
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.\nThese dictionaries should have the same set of keys.\n"
  example:
  - "\n<pre><code> var items = new List&lt;IDictionary&lt;string, object>>()\n   {\n       new Dictionary&lt;string, object>()\n       { \n           { &quot;Id&quot;, 1 },\n           { &quot;Name&quot;, &quot;TestName 1&quot; }\n       },\n       new Dictionary&lt;string, object>()\n       {\n           { &quot;Id&quot;, 2 },\n           { &quot;Name&quot;, &quot;TestName 2&quot; }\n       }\n   };\n   using(var package = new ExcelPackage())\n   {\n       var sheet = package.Workbook.Worksheets.Add(&quot;test&quot;);\n       var r = sheet.Cells[&quot;A1&quot;].LoadFromDictionaries(items, true);\n   }</code></pre>\n"
  syntax:
    content: public ExcelRangeBase LoadFromDictionaries(IEnumerable<IDictionary<string, object>> items, bool printHeaders)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}}
      description: A list of dictionaries/>
    - id: printHeaders
      type: System.Boolean
      description: If true the key names from the first instance will be used as headers
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromDictionaries(items As IEnumerable(Of IDictionary(Of String, Object)), printHeaders As Boolean) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries*
  nameWithType.vb: ExcelRangeBase.LoadFromDictionaries(IEnumerable(Of IDictionary(Of String, Object)), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)), System.Boolean)
  name.vb: LoadFromDictionaries(IEnumerable(Of IDictionary(Of String, Object)), Boolean)
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})
  id: LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDictionaries(IEnumerable<IDictionary<String, Object>>, Boolean, Nullable<TableStyles>)
  nameWithType: ExcelRangeBase.LoadFromDictionaries(IEnumerable<IDictionary<String, Object>>, Boolean, Nullable<TableStyles>)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable<System.Collections.Generic.IDictionary<System.String, System.Object>>, System.Boolean, System.Nullable<OfficeOpenXml.Table.TableStyles>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDictionaries
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 623
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.\nThese dictionaries should have the same set of keys.\n"
  example:
  - "\n<pre><code> var items = new List&lt;IDictionary&lt;string, object>>()\n   {\n       new Dictionary&lt;string, object>()\n       { \n           { &quot;Id&quot;, 1 },\n           { &quot;Name&quot;, &quot;TestName 1&quot; }\n       },\n       new Dictionary&lt;string, object>()\n       {\n           { &quot;Id&quot;, 2 },\n           { &quot;Name&quot;, &quot;TestName 2&quot; }\n       }\n   };\n   using(var package = new ExcelPackage())\n   {\n       var sheet = package.Workbook.Worksheets.Add(&quot;test&quot;);\n       var r = sheet.Cells[&quot;A1&quot;].LoadFromDictionaries(items, true, TableStyles.None);\n   }</code></pre>\n"
  syntax:
    content: public ExcelRangeBase LoadFromDictionaries(IEnumerable<IDictionary<string, object>> items, bool printHeaders, TableStyles? tableStyle)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}}
      description: A list of dictionaries/>
    - id: printHeaders
      type: System.Boolean
      description: If true the key names from the first instance will be used as headers
    - id: tableStyle
      type: System.Nullable{OfficeOpenXml.Table.TableStyles}
      description: Will create a table with this style. If set to TableStyles.None no table will be created
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromDictionaries(items As IEnumerable(Of IDictionary(Of String, Object)), printHeaders As Boolean, tableStyle As TableStyles?) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries*
  nameWithType.vb: ExcelRangeBase.LoadFromDictionaries(IEnumerable(Of IDictionary(Of String, Object)), Boolean, Nullable(Of TableStyles))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)), System.Boolean, System.Nullable(Of OfficeOpenXml.Table.TableStyles))
  name.vb: LoadFromDictionaries(IEnumerable(Of IDictionary(Of String, Object)), Boolean, Nullable(Of TableStyles))
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Collections.Generic.IEnumerable{System.String})
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Collections.Generic.IEnumerable{System.String})
  id: LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Collections.Generic.IEnumerable{System.String})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDictionaries(IEnumerable<IDictionary<String, Object>>, Boolean, Nullable<TableStyles>, IEnumerable<String>)
  nameWithType: ExcelRangeBase.LoadFromDictionaries(IEnumerable<IDictionary<String, Object>>, Boolean, Nullable<TableStyles>, IEnumerable<String>)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable<System.Collections.Generic.IDictionary<System.String, System.Object>>, System.Boolean, System.Nullable<OfficeOpenXml.Table.TableStyles>, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDictionaries
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 659
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.\nThese dictionaries should have the same set of keys.\n"
  example:
  - "\n<pre><code> var items = new List&lt;IDictionary&lt;string, object>>()\n   {\n       new Dictionary&lt;string, object>()\n       { \n           { &quot;Id&quot;, 1 },\n           { &quot;Name&quot;, &quot;TestName 1&quot; }\n       },\n       new Dictionary&lt;string, object>()\n       {\n           { &quot;Id&quot;, 2 },\n           { &quot;Name&quot;, &quot;TestName 2&quot; }\n       }\n   };\n   using(var package = new ExcelPackage())\n   {\n       var sheet = package.Workbook.Worksheets.Add(&quot;test&quot;);\n       var r = sheet.Cells[&quot;A1&quot;].LoadFromDictionaries(items, true, TableStyles.None, null);\n   }</code></pre>\n"
  syntax:
    content: public ExcelRangeBase LoadFromDictionaries(IEnumerable<IDictionary<string, object>> items, bool printHeaders, TableStyles? tableStyle, IEnumerable<string> keys)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}}
      description: A list of dictionaries
    - id: printHeaders
      type: System.Boolean
      description: If true the key names from the first instance will be used as headers
    - id: tableStyle
      type: System.Nullable{OfficeOpenXml.Table.TableStyles}
      description: Will create a table with this style. If set to TableStyles.None no table will be created
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Keys that should be used, keys omitted will not be included
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromDictionaries(items As IEnumerable(Of IDictionary(Of String, Object)), printHeaders As Boolean, tableStyle As TableStyles?, keys As IEnumerable(Of String)) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries*
  nameWithType.vb: ExcelRangeBase.LoadFromDictionaries(IEnumerable(Of IDictionary(Of String, Object)), Boolean, Nullable(Of TableStyles), IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)), System.Boolean, System.Nullable(Of OfficeOpenXml.Table.TableStyles), System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: LoadFromDictionaries(IEnumerable(Of IDictionary(Of String, Object)), Boolean, Nullable(Of TableStyles), IEnumerable(Of String))
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Object},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Collections.Generic.IEnumerable{System.String})
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Object},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Collections.Generic.IEnumerable{System.String})
  id: LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Object},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Collections.Generic.IEnumerable{System.String})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDictionaries(IEnumerable<Object>, Boolean, Nullable<TableStyles>, IEnumerable<String>)
  nameWithType: ExcelRangeBase.LoadFromDictionaries(IEnumerable<Object>, Boolean, Nullable<TableStyles>, IEnumerable<String>)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable<System.Object>, System.Boolean, System.Nullable<OfficeOpenXml.Table.TableStyles>, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDictionaries
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 705
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.\nThese dictionaries should have the same set of keys.\n"
  example:
  - "\n<pre><code> var items = new List&lt;IDictionary&lt;string, object>>()\n   {\n       new Dictionary&lt;string, object>()\n       { \n           { &quot;Id&quot;, 1 },\n           { &quot;Name&quot;, &quot;TestName 1&quot; }\n       },\n       new Dictionary&lt;string, object>()\n       {\n           { &quot;Id&quot;, 2 },\n           { &quot;Name&quot;, &quot;TestName 2&quot; }\n       }\n   };\n   using(var package = new ExcelPackage())\n   {\n       var sheet = package.Workbook.Worksheets.Add(&quot;test&quot;);\n       var r = sheet.Cells[&quot;A1&quot;].LoadFromDictionaries(items, true, TableStyles.None, null);\n   }</code></pre>\n"
  syntax:
    content: public ExcelRangeBase LoadFromDictionaries(IEnumerable<dynamic> items, bool printHeaders, TableStyles? tableStyle, IEnumerable<string> keys)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: A list of dictionaries
    - id: printHeaders
      type: System.Boolean
      description: If true the key names from the first instance will be used as headers
    - id: tableStyle
      type: System.Nullable{OfficeOpenXml.Table.TableStyles}
      description: Will create a table with this style. If set to TableStyles.None no table will be created
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Keys that should be used, keys omitted will not be included
    return:
      type: OfficeOpenXml.ExcelRangeBase
      description: The filled range
    content.vb: Public Function LoadFromDictionaries(items As IEnumerable(Of Object), printHeaders As Boolean, tableStyle As TableStyles?, keys As IEnumerable(Of String)) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries*
  nameWithType.vb: ExcelRangeBase.LoadFromDictionaries(IEnumerable(Of Object), Boolean, Nullable(Of TableStyles), IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable(Of System.Object), System.Boolean, System.Nullable(Of OfficeOpenXml.Table.TableStyles), System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: LoadFromDictionaries(IEnumerable(Of Object), Boolean, Nullable(Of TableStyles), IEnumerable(Of String))
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams})
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams})
  id: LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDictionaries(IEnumerable<IDictionary<String, Object>>, Action<LoadFromDictionariesParams>)
  nameWithType: ExcelRangeBase.LoadFromDictionaries(IEnumerable<IDictionary<String, Object>>, Action<LoadFromDictionariesParams>)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable<System.Collections.Generic.IDictionary<System.String, System.Object>>, System.Action<OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDictionaries
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 734
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.\nThese dictionaries should have the same set of keys.\n"
  example:
  - "\nsheet.Cells[&quot;C1&quot;].LoadFromDictionaries(items, c =>\n{\nc.PrintHeaders = true;\nc.TableStyle = TableStyles.Dark1;\n});\n"
  syntax:
    content: public ExcelRangeBase LoadFromDictionaries(IEnumerable<IDictionary<string, object>> items, Action<LoadFromDictionariesParams> paramsConfig)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}}
      description: A list of dictionaries/ExpandoObjects
    - id: paramsConfig
      type: System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams}
      description: <xref href="System.Action%601" data-throw-if-not-resolved="false"></xref> to provide parameters to the function
    return:
      type: OfficeOpenXml.ExcelRangeBase
    content.vb: Public Function LoadFromDictionaries(items As IEnumerable(Of IDictionary(Of String, Object)), paramsConfig As Action(Of LoadFromDictionariesParams)) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries*
  nameWithType.vb: ExcelRangeBase.LoadFromDictionaries(IEnumerable(Of IDictionary(Of String, Object)), Action(Of LoadFromDictionariesParams))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)), System.Action(Of OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams))
  name.vb: LoadFromDictionaries(IEnumerable(Of IDictionary(Of String, Object)), Action(Of LoadFromDictionariesParams))
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Object},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams})
  commentId: M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Object},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams})
  id: LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Object},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: LoadFromDictionaries(IEnumerable<Object>, Action<LoadFromDictionariesParams>)
  nameWithType: ExcelRangeBase.LoadFromDictionaries(IEnumerable<Object>, Action<LoadFromDictionariesParams>)
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable<System.Object>, System.Action<OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Load.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: LoadFromDictionaries
    path: ../src/EPPlus/ExcelRangeBase_Load.cs
    startLine: 756
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nLoad a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.\nThese dictionaries should have the same set of keys.\n"
  example:
  - "\nsheet.Cells[&quot;C1&quot;].LoadFromDictionaries(items, c =>\n{\nc.PrintHeaders = true;\nc.TableStyle = TableStyles.Dark1;\n});\n"
  syntax:
    content: public ExcelRangeBase LoadFromDictionaries(IEnumerable<dynamic> items, Action<LoadFromDictionariesParams> paramsConfig)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: A list of dictionaries/ExpandoObjects
    - id: paramsConfig
      type: System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams}
      description: <xref href="System.Action%601" data-throw-if-not-resolved="false"></xref> to provide parameters to the function
    return:
      type: OfficeOpenXml.ExcelRangeBase
    content.vb: Public Function LoadFromDictionaries(items As IEnumerable(Of Object), paramsConfig As Action(Of LoadFromDictionariesParams)) As ExcelRangeBase
  overload: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries*
  nameWithType.vb: ExcelRangeBase.LoadFromDictionaries(IEnumerable(Of Object), Action(Of LoadFromDictionariesParams))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable(Of System.Object), System.Action(Of OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams))
  name.vb: LoadFromDictionaries(IEnumerable(Of Object), Action(Of LoadFromDictionariesParams))
- uid: OfficeOpenXml.ExcelRangeBase.ToDataTable
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToDataTable
  id: ToDataTable
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToDataTable()
  nameWithType: ExcelRangeBase.ToDataTable()
  fullName: OfficeOpenXml.ExcelRangeBase.ToDataTable()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToDataTable
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 44
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns the range as a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Default\" data-throw-if-not-resolved=\"false\"></xref> settings.\n"
  example: []
  syntax:
    content: public DataTable ToDataTable()
    return:
      type: System.Data.DataTable
      description: A <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> representing the range.
    content.vb: Public Function ToDataTable As DataTable
  overload: OfficeOpenXml.ExcelRangeBase.ToDataTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions})
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions})
  id: ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToDataTable(Action<ToDataTableOptions>)
  nameWithType: ExcelRangeBase.ToDataTable(Action<ToDataTableOptions>)
  fullName: OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action<OfficeOpenXml.Export.ToDataTable.ToDataTableOptions>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToDataTable
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 54
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns the range as a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> with the option supplied.\n"
  example: []
  syntax:
    content: public DataTable ToDataTable(Action<ToDataTableOptions> configHandler)
    parameters:
    - id: configHandler
      type: System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions}
      description: Configures the settings used to convert the range.
    return:
      type: System.Data.DataTable
      description: A <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> representing the range.
    content.vb: Public Function ToDataTable(configHandler As Action(Of ToDataTableOptions)) As DataTable
  overload: OfficeOpenXml.ExcelRangeBase.ToDataTable*
  nameWithType.vb: ExcelRangeBase.ToDataTable(Action(Of ToDataTableOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action(Of OfficeOpenXml.Export.ToDataTable.ToDataTableOptions))
  name.vb: ToDataTable(Action(Of ToDataTableOptions))
- uid: OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions)
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions)
  id: ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToDataTable(ToDataTableOptions)
  nameWithType: ExcelRangeBase.ToDataTable(ToDataTableOptions)
  fullName: OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToDataTable
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 66
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns the range as a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> with the option supplied.\n"
  example: []
  syntax:
    content: public DataTable ToDataTable(ToDataTableOptions options)
    parameters:
    - id: options
      type: OfficeOpenXml.Export.ToDataTable.ToDataTableOptions
      description: Sets the settings used to convert the range.
    return:
      type: System.Data.DataTable
      description: A <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> representing the range.
    content.vb: Public Function ToDataTable(options As ToDataTableOptions) As DataTable
  overload: OfficeOpenXml.ExcelRangeBase.ToDataTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions},System.Data.DataTable)
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions},System.Data.DataTable)
  id: ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions},System.Data.DataTable)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToDataTable(Action<ToDataTableOptions>, DataTable)
  nameWithType: ExcelRangeBase.ToDataTable(Action<ToDataTableOptions>, DataTable)
  fullName: OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action<OfficeOpenXml.Export.ToDataTable.ToDataTableOptions>, System.Data.DataTable)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToDataTable
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 78
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns the range as a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> with the option supplied.\n"
  example: []
  syntax:
    content: public DataTable ToDataTable(Action<ToDataTableOptions> configHandler, DataTable dataTable)
    parameters:
    - id: configHandler
      type: System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions}
      description: Configures the settings used to convert the range.
    - id: dataTable
      type: System.Data.DataTable
      description: The data table to add the range data to.
    return:
      type: System.Data.DataTable
      description: A <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> representing the range.
    content.vb: Public Function ToDataTable(configHandler As Action(Of ToDataTableOptions), dataTable As DataTable) As DataTable
  overload: OfficeOpenXml.ExcelRangeBase.ToDataTable*
  nameWithType.vb: ExcelRangeBase.ToDataTable(Action(Of ToDataTableOptions), DataTable)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action(Of OfficeOpenXml.Export.ToDataTable.ToDataTableOptions), System.Data.DataTable)
  name.vb: ToDataTable(Action(Of ToDataTableOptions), DataTable)
- uid: OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Data.DataTable)
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Data.DataTable)
  id: ToDataTable(System.Data.DataTable)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToDataTable(DataTable)
  nameWithType: ExcelRangeBase.ToDataTable(DataTable)
  fullName: OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Data.DataTable)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToDataTable
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 90
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns the range as a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> with the option supplied.\n"
  example: []
  syntax:
    content: public DataTable ToDataTable(DataTable dataTable)
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: The data table to add the range data to.
    return:
      type: System.Data.DataTable
      description: A <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> representing the range.
    content.vb: Public Function ToDataTable(dataTable As DataTable) As DataTable
  overload: OfficeOpenXml.ExcelRangeBase.ToDataTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions,System.Data.DataTable)
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions,System.Data.DataTable)
  id: ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions,System.Data.DataTable)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToDataTable(ToDataTableOptions, DataTable)
  nameWithType: ExcelRangeBase.ToDataTable(ToDataTableOptions, DataTable)
  fullName: OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions, System.Data.DataTable)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToDataTable
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 101
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns the range as a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> with the option supplied.\n"
  example: []
  syntax:
    content: public DataTable ToDataTable(ToDataTableOptions options, DataTable dataTable)
    parameters:
    - id: options
      type: OfficeOpenXml.Export.ToDataTable.ToDataTableOptions
      description: Sets the settings used to convert the range.
    - id: dataTable
      type: System.Data.DataTable
      description: The data table to add the range data to.
    return:
      type: System.Data.DataTable
      description: A <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> representing the range.
    content.vb: Public Function ToDataTable(options As ToDataTableOptions, dataTable As DataTable) As DataTable
  overload: OfficeOpenXml.ExcelRangeBase.ToDataTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.ToText
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToText
  id: ToText
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToText()
  nameWithType: ExcelRangeBase.ToText()
  fullName: OfficeOpenXml.ExcelRangeBase.ToText()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToText
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 112
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nConverts a range to text in CSV format.\n"
  example: []
  syntax:
    content: public string ToText()
    return:
      type: System.String
      description: A string containing the text
    content.vb: Public Function ToText As String
  overload: OfficeOpenXml.ExcelRangeBase.ToText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.ToText(OfficeOpenXml.ExcelOutputTextFormat)
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToText(OfficeOpenXml.ExcelOutputTextFormat)
  id: ToText(OfficeOpenXml.ExcelOutputTextFormat)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToText(ExcelOutputTextFormat)
  nameWithType: ExcelRangeBase.ToText(ExcelOutputTextFormat)
  fullName: OfficeOpenXml.ExcelRangeBase.ToText(OfficeOpenXml.ExcelOutputTextFormat)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToText
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 122
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nConverts a range to text in CSV format.\nInvariant culture is used by default.\n"
  example: []
  syntax:
    content: public string ToText(ExcelOutputTextFormat Format)
    parameters:
    - id: Format
      type: OfficeOpenXml.ExcelOutputTextFormat
      description: Information how to create the csv text
    return:
      type: System.String
      description: A string containing the text
    content.vb: Public Function ToText(Format As ExcelOutputTextFormat) As String
  overload: OfficeOpenXml.ExcelRangeBase.ToText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)
  commentId: M:OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)
  id: SaveToText(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SaveToText(FileInfo, ExcelOutputTextFormat)
  nameWithType: ExcelRangeBase.SaveToText(FileInfo, ExcelOutputTextFormat)
  fullName: OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.FileInfo, OfficeOpenXml.ExcelOutputTextFormat)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SaveToText
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 138
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nConverts a range to text in CSV format.\nInvariant culture is used by default.\n"
  example: []
  syntax:
    content: public void SaveToText(FileInfo file, ExcelOutputTextFormat Format)
    parameters:
    - id: file
      type: System.IO.FileInfo
      description: The file to write to
    - id: Format
      type: OfficeOpenXml.ExcelOutputTextFormat
      description: Information how to create the csv text
    content.vb: Public Sub SaveToText(file As FileInfo, Format As ExcelOutputTextFormat)
  overload: OfficeOpenXml.ExcelRangeBase.SaveToText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)
  commentId: M:OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)
  id: SaveToText(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SaveToText(Stream, ExcelOutputTextFormat)
  nameWithType: ExcelRangeBase.SaveToText(Stream, ExcelOutputTextFormat)
  fullName: OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.Stream, OfficeOpenXml.ExcelOutputTextFormat)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SaveToText
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 149
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nConverts a range to text in CSV format.\nInvariant culture is used by default.\n"
  example: []
  syntax:
    content: public void SaveToText(Stream stream, ExcelOutputTextFormat Format)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The strem to write to
    - id: Format
      type: OfficeOpenXml.ExcelOutputTextFormat
      description: Information how to create the csv text
    content.vb: Public Sub SaveToText(stream As Stream, Format As ExcelOutputTextFormat)
  overload: OfficeOpenXml.ExcelRangeBase.SaveToText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.ToTextAsync
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToTextAsync
  id: ToTextAsync
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToTextAsync()
  nameWithType: ExcelRangeBase.ToTextAsync()
  fullName: OfficeOpenXml.ExcelRangeBase.ToTextAsync()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToTextAsync
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 202
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nConverts a range to text in CSV format.\n"
  example: []
  syntax:
    content: public async Task<string> ToTextAsync()
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A string containing the text
    content.vb: Public Function ToTextAsync As Task(Of String)
  overload: OfficeOpenXml.ExcelRangeBase.ToTextAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.ToTextAsync(OfficeOpenXml.ExcelOutputTextFormat)
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToTextAsync(OfficeOpenXml.ExcelOutputTextFormat)
  id: ToTextAsync(OfficeOpenXml.ExcelOutputTextFormat)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToTextAsync(ExcelOutputTextFormat)
  nameWithType: ExcelRangeBase.ToTextAsync(ExcelOutputTextFormat)
  fullName: OfficeOpenXml.ExcelRangeBase.ToTextAsync(OfficeOpenXml.ExcelOutputTextFormat)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToTextAsync
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 212
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nConverts a range to text in CSV format.\nInvariant culture is used by default.\n"
  example: []
  syntax:
    content: public async Task<string> ToTextAsync(ExcelOutputTextFormat Format)
    parameters:
    - id: Format
      type: OfficeOpenXml.ExcelOutputTextFormat
      description: Information how to create the csv text
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A string containing the text
    content.vb: Public Function ToTextAsync(Format As ExcelOutputTextFormat) As Task(Of String)
  overload: OfficeOpenXml.ExcelRangeBase.ToTextAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.SaveToTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)
  commentId: M:OfficeOpenXml.ExcelRangeBase.SaveToTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)
  id: SaveToTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SaveToTextAsync(FileInfo, ExcelOutputTextFormat)
  nameWithType: ExcelRangeBase.SaveToTextAsync(FileInfo, ExcelOutputTextFormat)
  fullName: OfficeOpenXml.ExcelRangeBase.SaveToTextAsync(System.IO.FileInfo, OfficeOpenXml.ExcelOutputTextFormat)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SaveToTextAsync
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 228
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nConverts a range to text in CSV format.\nInvariant culture is used by default.\n"
  example: []
  syntax:
    content: public async Task SaveToTextAsync(FileInfo file, ExcelOutputTextFormat Format)
    parameters:
    - id: file
      type: System.IO.FileInfo
      description: The file to write to
    - id: Format
      type: OfficeOpenXml.ExcelOutputTextFormat
      description: Information how to create the csv text
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SaveToTextAsync(file As FileInfo, Format As ExcelOutputTextFormat) As Task
  overload: OfficeOpenXml.ExcelRangeBase.SaveToTextAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.SaveToTextAsync(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)
  commentId: M:OfficeOpenXml.ExcelRangeBase.SaveToTextAsync(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)
  id: SaveToTextAsync(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SaveToTextAsync(Stream, ExcelOutputTextFormat)
  nameWithType: ExcelRangeBase.SaveToTextAsync(Stream, ExcelOutputTextFormat)
  fullName: OfficeOpenXml.ExcelRangeBase.SaveToTextAsync(System.IO.Stream, OfficeOpenXml.ExcelOutputTextFormat)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SaveToTextAsync
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 239
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nConverts a range to text in CSV format.\nInvariant culture is used by default.\n"
  example: []
  syntax:
    content: public async Task SaveToTextAsync(Stream stream, ExcelOutputTextFormat Format)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The strem to write to
    - id: Format
      type: OfficeOpenXml.ExcelOutputTextFormat
      description: Information how to create the csv text
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SaveToTextAsync(stream As Stream, Format As ExcelOutputTextFormat) As Task
  overload: OfficeOpenXml.ExcelRangeBase.SaveToTextAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.ToJson
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToJson
  id: ToJson
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToJson()
  nameWithType: ExcelRangeBase.ToJson()
  fullName: OfficeOpenXml.ExcelRangeBase.ToJson()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToJson
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 300
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns the range as JSON\n"
  example: []
  syntax:
    content: public string ToJson()
    return:
      type: System.String
      description: A JSON string
    content.vb: Public Function ToJson As String
  overload: OfficeOpenXml.ExcelRangeBase.ToJson*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.ToJson(System.Action{OfficeOpenXml.JsonRangeExportSettings})
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToJson(System.Action{OfficeOpenXml.JsonRangeExportSettings})
  id: ToJson(System.Action{OfficeOpenXml.JsonRangeExportSettings})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToJson(Action<JsonRangeExportSettings>)
  nameWithType: ExcelRangeBase.ToJson(Action<JsonRangeExportSettings>)
  fullName: OfficeOpenXml.ExcelRangeBase.ToJson(System.Action<OfficeOpenXml.JsonRangeExportSettings>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToJson
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 312
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns the range as JSON\n"
  example: []
  syntax:
    content: public string ToJson(Action<JsonRangeExportSettings> settings)
    parameters:
    - id: settings
      type: System.Action{OfficeOpenXml.JsonRangeExportSettings}
      description: Configures settings for the JSON export
    return:
      type: System.String
      description: ''
    content.vb: Public Function ToJson(settings As Action(Of JsonRangeExportSettings)) As String
  overload: OfficeOpenXml.ExcelRangeBase.ToJson*
  nameWithType.vb: ExcelRangeBase.ToJson(Action(Of JsonRangeExportSettings))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.ToJson(System.Action(Of OfficeOpenXml.JsonRangeExportSettings))
  name.vb: ToJson(Action(Of JsonRangeExportSettings))
- uid: OfficeOpenXml.ExcelRangeBase.SaveToJson(System.IO.Stream)
  commentId: M:OfficeOpenXml.ExcelRangeBase.SaveToJson(System.IO.Stream)
  id: SaveToJson(System.IO.Stream)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SaveToJson(Stream)
  nameWithType: ExcelRangeBase.SaveToJson(Stream)
  fullName: OfficeOpenXml.ExcelRangeBase.SaveToJson(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SaveToJson
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 325
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSaves the range as JSON to a stream.\n"
  example: []
  syntax:
    content: public void SaveToJson(Stream stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The writable stream to write the JSON to.
    content.vb: Public Sub SaveToJson(stream As Stream)
  overload: OfficeOpenXml.ExcelRangeBase.SaveToJson*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.SaveToJson(System.IO.Stream,System.Action{OfficeOpenXml.JsonRangeExportSettings})
  commentId: M:OfficeOpenXml.ExcelRangeBase.SaveToJson(System.IO.Stream,System.Action{OfficeOpenXml.JsonRangeExportSettings})
  id: SaveToJson(System.IO.Stream,System.Action{OfficeOpenXml.JsonRangeExportSettings})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SaveToJson(Stream, Action<JsonRangeExportSettings>)
  nameWithType: ExcelRangeBase.SaveToJson(Stream, Action<JsonRangeExportSettings>)
  fullName: OfficeOpenXml.ExcelRangeBase.SaveToJson(System.IO.Stream, System.Action<OfficeOpenXml.JsonRangeExportSettings>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SaveToJson
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 335
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSaves the range as JSON to a stream.\n"
  example: []
  syntax:
    content: public void SaveToJson(Stream stream, Action<JsonRangeExportSettings> settings)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The writable stream to write the JSON to
    - id: settings
      type: System.Action{OfficeOpenXml.JsonRangeExportSettings}
      description: Configures settings for the JSON export
    content.vb: Public Sub SaveToJson(stream As Stream, settings As Action(Of JsonRangeExportSettings))
  overload: OfficeOpenXml.ExcelRangeBase.SaveToJson*
  nameWithType.vb: ExcelRangeBase.SaveToJson(Stream, Action(Of JsonRangeExportSettings))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.SaveToJson(System.IO.Stream, System.Action(Of OfficeOpenXml.JsonRangeExportSettings))
  name.vb: SaveToJson(Stream, Action(Of JsonRangeExportSettings))
- uid: OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync(System.IO.Stream)
  commentId: M:OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync(System.IO.Stream)
  id: SaveToJsonAsync(System.IO.Stream)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SaveToJsonAsync(Stream)
  nameWithType: ExcelRangeBase.SaveToJsonAsync(Stream)
  fullName: OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SaveToJsonAsync
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 350
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSave the range to json\n"
  example: []
  syntax:
    content: public async Task SaveToJsonAsync(Stream stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream to save to.
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function SaveToJsonAsync(stream As Stream) As Task
  overload: OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync(System.IO.Stream,System.Action{OfficeOpenXml.JsonRangeExportSettings})
  commentId: M:OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync(System.IO.Stream,System.Action{OfficeOpenXml.JsonRangeExportSettings})
  id: SaveToJsonAsync(System.IO.Stream,System.Action{OfficeOpenXml.JsonRangeExportSettings})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: SaveToJsonAsync(Stream, Action<JsonRangeExportSettings>)
  nameWithType: ExcelRangeBase.SaveToJsonAsync(Stream, Action<JsonRangeExportSettings>)
  fullName: OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync(System.IO.Stream, System.Action<OfficeOpenXml.JsonRangeExportSettings>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: SaveToJsonAsync
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 361
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nSave the range to json\n"
  example: []
  syntax:
    content: public async Task SaveToJsonAsync(Stream stream, Action<JsonRangeExportSettings> settings)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream to save to.
    - id: settings
      type: System.Action{OfficeOpenXml.JsonRangeExportSettings}
      description: Settings for the json output.
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function SaveToJsonAsync(stream As Stream, settings As Action(Of JsonRangeExportSettings)) As Task
  overload: OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync*
  nameWithType.vb: ExcelRangeBase.SaveToJsonAsync(Stream, Action(Of JsonRangeExportSettings))
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync(System.IO.Stream, System.Action(Of OfficeOpenXml.JsonRangeExportSettings))
  name.vb: SaveToJsonAsync(Stream, Action(Of JsonRangeExportSettings))
- uid: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0})
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0})
  id: ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToCollectionWithMappings<T>(Func<ToCollectionRow, T>)
  nameWithType: ExcelRangeBase.ToCollectionWithMappings<T>(Func<ToCollectionRow, T>)
  fullName: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings<T>(System.Func<OfficeOpenXml.Export.ToCollection.ToCollectionRow, T>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToCollectionWithMappings
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 523
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns a collection of T for the range. \nIf the range contains multiple addresses the first range is used.\nThe first row must containt the unique headers used as keys in the row dictionary.\n"
  example: []
  syntax:
    content: public List<T> ToCollectionWithMappings<T>(Func<ToCollectionRow, T> setRow)
    parameters:
    - id: setRow
      type: System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,{T}}
      description: The call back function to map each row to the item of type T.
    typeParameters:
    - id: T
      description: The type to map to
    return:
      type: System.Collections.Generic.List{{T}}
      description: A list of T
    content.vb: Public Function ToCollectionWithMappings(Of T)(setRow As Func(Of ToCollectionRow, T)) As List(Of T)
  overload: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings*
  nameWithType.vb: ExcelRangeBase.ToCollectionWithMappings(Of T)(Func(Of ToCollectionRow, T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings(Of T)(System.Func(Of OfficeOpenXml.Export.ToCollection.ToCollectionRow, T))
  name.vb: ToCollectionWithMappings(Of T)(Func(Of ToCollectionRow, T))
- uid: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0},System.Action{OfficeOpenXml.ToCollectionRangeOptions})
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0},System.Action{OfficeOpenXml.ToCollectionRangeOptions})
  id: ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0},System.Action{OfficeOpenXml.ToCollectionRangeOptions})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToCollectionWithMappings<T>(Func<ToCollectionRow, T>, Action<ToCollectionRangeOptions>)
  nameWithType: ExcelRangeBase.ToCollectionWithMappings<T>(Func<ToCollectionRow, T>, Action<ToCollectionRangeOptions>)
  fullName: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings<T>(System.Func<OfficeOpenXml.Export.ToCollection.ToCollectionRow, T>, System.Action<OfficeOpenXml.ToCollectionRangeOptions>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToCollectionWithMappings
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 536
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns a collection of T for the range. \nIf the range contains multiple addresses the first range is used.\nThe first row must contain the unique headers used as keys in the row dictionary.\n"
  example: []
  syntax:
    content: public List<T> ToCollectionWithMappings<T>(Func<ToCollectionRow, T> setRow, Action<ToCollectionRangeOptions> options)
    parameters:
    - id: setRow
      type: System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,{T}}
      description: The call back function to map each row to the item of type T.
    - id: options
      type: System.Action{OfficeOpenXml.ToCollectionRangeOptions}
      description: Configures the settings for the function
    typeParameters:
    - id: T
      description: The type to map to
    return:
      type: System.Collections.Generic.List{{T}}
      description: A list of T
    content.vb: Public Function ToCollectionWithMappings(Of T)(setRow As Func(Of ToCollectionRow, T), options As Action(Of ToCollectionRangeOptions)) As List(Of T)
  overload: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings*
  nameWithType.vb: ExcelRangeBase.ToCollectionWithMappings(Of T)(Func(Of ToCollectionRow, T), Action(Of ToCollectionRangeOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings(Of T)(System.Func(Of OfficeOpenXml.Export.ToCollection.ToCollectionRow, T), System.Action(Of OfficeOpenXml.ToCollectionRangeOptions))
  name.vb: ToCollectionWithMappings(Of T)(Func(Of ToCollectionRow, T), Action(Of ToCollectionRangeOptions))
- uid: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0},OfficeOpenXml.ToCollectionRangeOptions)
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0},OfficeOpenXml.ToCollectionRangeOptions)
  id: ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0},OfficeOpenXml.ToCollectionRangeOptions)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToCollectionWithMappings<T>(Func<ToCollectionRow, T>, ToCollectionRangeOptions)
  nameWithType: ExcelRangeBase.ToCollectionWithMappings<T>(Func<ToCollectionRow, T>, ToCollectionRangeOptions)
  fullName: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings<T>(System.Func<OfficeOpenXml.Export.ToCollection.ToCollectionRow, T>, OfficeOpenXml.ToCollectionRangeOptions)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToCollectionWithMappings
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 552
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns a collection of T for the range. \nIf the range contains multiple addresses the first range is used.\nThe first row must containt the unique headers used as keys in the row dictionary.\n"
  example: []
  syntax:
    content: public List<T> ToCollectionWithMappings<T>(Func<ToCollectionRow, T> setRow, ToCollectionRangeOptions options)
    parameters:
    - id: setRow
      type: System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,{T}}
      description: The call back function to map each row to the item of type T.
    - id: options
      type: OfficeOpenXml.ToCollectionRangeOptions
      description: Parameters to the function
    typeParameters:
    - id: T
      description: The type to map to
    return:
      type: System.Collections.Generic.List{{T}}
      description: A list of T
    content.vb: Public Function ToCollectionWithMappings(Of T)(setRow As Func(Of ToCollectionRow, T), options As ToCollectionRangeOptions) As List(Of T)
  overload: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings*
  nameWithType.vb: ExcelRangeBase.ToCollectionWithMappings(Of T)(Func(Of ToCollectionRow, T), ToCollectionRangeOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings(Of T)(System.Func(Of OfficeOpenXml.Export.ToCollection.ToCollectionRow, T), OfficeOpenXml.ToCollectionRangeOptions)
  name.vb: ToCollectionWithMappings(Of T)(Func(Of ToCollectionRow, T), ToCollectionRangeOptions)
- uid: OfficeOpenXml.ExcelRangeBase.ToCollection``1
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToCollection``1
  id: ToCollection``1
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToCollection<T>()
  nameWithType: ExcelRangeBase.ToCollection<T>()
  fullName: OfficeOpenXml.ExcelRangeBase.ToCollection<T>()
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToCollection
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 565
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nReturns a collection of T for the range. \nIf the range contains multiple addresses the first range is used.\nThe first row must contain the unique headers used as keys in the row dictionary.\nHeaders will be mapped to properties using the name or the attributes without white spaces. \nThe attributes that can be used are: EpplusTableColumnAttributeBase.Header, DescriptionAttribute.Description or DisplayNameAttribute.Name.\n"
  example: []
  syntax:
    content: public List<T> ToCollection<T>()
    typeParameters:
    - id: T
      description: The type to map to
    return:
      type: System.Collections.Generic.List{{T}}
      description: A list of T
    content.vb: Public Function ToCollection(Of T) As List(Of T)
  overload: OfficeOpenXml.ExcelRangeBase.ToCollection*
  nameWithType.vb: ExcelRangeBase.ToCollection(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.ToCollection(Of T)()
  name.vb: ToCollection(Of T)()
- uid: OfficeOpenXml.ExcelRangeBase.ToCollection``1(System.Action{OfficeOpenXml.ToCollectionRangeOptions})
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToCollection``1(System.Action{OfficeOpenXml.ToCollectionRangeOptions})
  id: ToCollection``1(System.Action{OfficeOpenXml.ToCollectionRangeOptions})
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToCollection<T>(Action<ToCollectionRangeOptions>)
  nameWithType: ExcelRangeBase.ToCollection<T>(Action<ToCollectionRangeOptions>)
  fullName: OfficeOpenXml.ExcelRangeBase.ToCollection<T>(System.Action<OfficeOpenXml.ToCollectionRangeOptions>)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToCollection
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 578
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nAutomatically maps the range to the properties <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.Text.T\" data-throw-if-not-resolved=\"false\"></xref> using the headers.\nUsing this method requires a headers.\nHeaders will be mapped to properties using the name or the attributes without white spaces. \nThe attributes that can be used are: EpplusTableColumnAttributeBase.Header, DescriptionAttribute.Description or DisplayNameAttribute.Name.\n"
  example: []
  syntax:
    content: public List<T> ToCollection<T>(Action<ToCollectionRangeOptions> options)
    parameters:
    - id: options
      type: System.Action{OfficeOpenXml.ToCollectionRangeOptions}
      description: Configures the settings for the function
    typeParameters:
    - id: T
      description: The type to use
    return:
      type: System.Collections.Generic.List{{T}}
      description: A list of <xref href="OfficeOpenXml.FormulaParsing.Excel.Functions.Text.T" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function ToCollection(Of T)(options As Action(Of ToCollectionRangeOptions)) As List(Of T)
  overload: OfficeOpenXml.ExcelRangeBase.ToCollection*
  nameWithType.vb: ExcelRangeBase.ToCollection(Of T)(Action(Of ToCollectionRangeOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.ToCollection(Of T)(System.Action(Of OfficeOpenXml.ToCollectionRangeOptions))
  name.vb: ToCollection(Of T)(Action(Of ToCollectionRangeOptions))
- uid: OfficeOpenXml.ExcelRangeBase.ToCollection``1(OfficeOpenXml.ToCollectionRangeOptions)
  commentId: M:OfficeOpenXml.ExcelRangeBase.ToCollection``1(OfficeOpenXml.ToCollectionRangeOptions)
  id: ToCollection``1(OfficeOpenXml.ToCollectionRangeOptions)
  parent: OfficeOpenXml.ExcelRangeBase
  langs:
  - csharp
  - vb
  name: ToCollection<T>(ToCollectionRangeOptions)
  nameWithType: ExcelRangeBase.ToCollection<T>(ToCollectionRangeOptions)
  fullName: OfficeOpenXml.ExcelRangeBase.ToCollection<T>(OfficeOpenXml.ToCollectionRangeOptions)
  type: Method
  source:
    remote:
      path: src/EPPlus/ExcelRangeBase_Save.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ToCollection
    path: ../src/EPPlus/ExcelRangeBase_Save.cs
    startLine: 593
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml
  summary: "\nAutomatically maps the range to the properties <xref href=\"OfficeOpenXml.FormulaParsing.Excel.Functions.Text.T\" data-throw-if-not-resolved=\"false\"></xref> using the headers.\nUsing this method requires a headers.\nHeaders will be mapped to properties using the name or the attributes without white spaces. \nThe attributes that can be used are: EpplusTableColumnAttributeBase.Header, DescriptionAttribute.Description or DisplayNameAttribute.Name.\n"
  example: []
  syntax:
    content: public List<T> ToCollection<T>(ToCollectionRangeOptions options)
    parameters:
    - id: options
      type: OfficeOpenXml.ToCollectionRangeOptions
      description: Settings for the method
    typeParameters:
    - id: T
      description: The type to use
    return:
      type: System.Collections.Generic.List{{T}}
      description: A list of <xref href="OfficeOpenXml.FormulaParsing.Excel.Functions.Text.T" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function ToCollection(Of T)(options As ToCollectionRangeOptions) As List(Of T)
  overload: OfficeOpenXml.ExcelRangeBase.ToCollection*
  nameWithType.vb: ExcelRangeBase.ToCollection(Of T)(ToCollectionRangeOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.ExcelRangeBase.ToCollection(Of T)(OfficeOpenXml.ToCollectionRangeOptions)
  name.vb: ToCollection(Of T)(ToCollectionRangeOptions)
references:
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.ExcelCellBase
  commentId: T:OfficeOpenXml.ExcelCellBase
  parent: OfficeOpenXml
  name: ExcelCellBase
  nameWithType: ExcelCellBase
  fullName: OfficeOpenXml.ExcelCellBase
- uid: OfficeOpenXml.ExcelAddressBase
  commentId: T:OfficeOpenXml.ExcelAddressBase
  parent: OfficeOpenXml
  name: ExcelAddressBase
  nameWithType: ExcelAddressBase
  fullName: OfficeOpenXml.ExcelAddressBase
- uid: OfficeOpenXml.ExcelAddress
  commentId: T:OfficeOpenXml.ExcelAddress
  parent: OfficeOpenXml
  name: ExcelAddress
  nameWithType: ExcelAddress
  fullName: OfficeOpenXml.ExcelAddress
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeBase}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeBase}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ExcelRangeBase>
  nameWithType: IEnumerable<ExcelRangeBase>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelRangeBase>
  nameWithType.vb: IEnumerable(Of ExcelRangeBase)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.ExcelRangeBase)
  name.vb: IEnumerable(Of ExcelRangeBase)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.ExcelRangeBase
    name: ExcelRangeBase
    nameWithType: ExcelRangeBase
    fullName: OfficeOpenXml.ExcelRangeBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.ExcelRangeBase
    name: ExcelRangeBase
    nameWithType: ExcelRangeBase
    fullName: OfficeOpenXml.ExcelRangeBase
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeBase}
  commentId: T:System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeBase}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<ExcelRangeBase>
  nameWithType: IEnumerator<ExcelRangeBase>
  fullName: System.Collections.Generic.IEnumerator<OfficeOpenXml.ExcelRangeBase>
  nameWithType.vb: IEnumerator(Of ExcelRangeBase)
  fullName.vb: System.Collections.Generic.IEnumerator(Of OfficeOpenXml.ExcelRangeBase)
  name.vb: IEnumerator(Of ExcelRangeBase)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.ExcelRangeBase
    name: ExcelRangeBase
    nameWithType: ExcelRangeBase
    fullName: OfficeOpenXml.ExcelRangeBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.ExcelRangeBase
    name: ExcelRangeBase
    nameWithType: ExcelRangeBase
    fullName: OfficeOpenXml.ExcelRangeBase
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: OfficeOpenXml.ExcelAddress.Address
  commentId: P:OfficeOpenXml.ExcelAddress.Address
  parent: OfficeOpenXml.ExcelAddress
  name: Address
  nameWithType: ExcelAddress.Address
  fullName: OfficeOpenXml.ExcelAddress.Address
- uid: OfficeOpenXml.ExcelAddressBase.SetAddress(System.String,OfficeOpenXml.ExcelWorkbook,System.String)
  commentId: M:OfficeOpenXml.ExcelAddressBase.SetAddress(System.String,OfficeOpenXml.ExcelWorkbook,System.String)
  parent: OfficeOpenXml.ExcelAddressBase
  isExternal: true
  name: SetAddress(String, ExcelWorkbook, String)
  nameWithType: ExcelAddressBase.SetAddress(String, ExcelWorkbook, String)
  fullName: OfficeOpenXml.ExcelAddressBase.SetAddress(System.String, OfficeOpenXml.ExcelWorkbook, System.String)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelAddressBase.SetAddress(System.String,OfficeOpenXml.ExcelWorkbook,System.String)
    name: SetAddress
    nameWithType: ExcelAddressBase.SetAddress
    fullName: OfficeOpenXml.ExcelAddressBase.SetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.ExcelWorkbook
    name: ExcelWorkbook
    nameWithType: ExcelWorkbook
    fullName: OfficeOpenXml.ExcelWorkbook
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelAddressBase.SetAddress(System.String,OfficeOpenXml.ExcelWorkbook,System.String)
    name: SetAddress
    nameWithType: ExcelAddressBase.SetAddress
    fullName: OfficeOpenXml.ExcelAddressBase.SetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.ExcelWorkbook
    name: ExcelWorkbook
    nameWithType: ExcelWorkbook
    fullName: OfficeOpenXml.ExcelWorkbook
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelAddressBase.Start
  commentId: P:OfficeOpenXml.ExcelAddressBase.Start
  parent: OfficeOpenXml.ExcelAddressBase
  name: Start
  nameWithType: ExcelAddressBase.Start
  fullName: OfficeOpenXml.ExcelAddressBase.Start
- uid: OfficeOpenXml.ExcelAddressBase.End
  commentId: P:OfficeOpenXml.ExcelAddressBase.End
  parent: OfficeOpenXml.ExcelAddressBase
  name: End
  nameWithType: ExcelAddressBase.End
  fullName: OfficeOpenXml.ExcelAddressBase.End
- uid: OfficeOpenXml.ExcelAddressBase.ExternalReferenceIndex
  commentId: P:OfficeOpenXml.ExcelAddressBase.ExternalReferenceIndex
  parent: OfficeOpenXml.ExcelAddressBase
  name: ExternalReferenceIndex
  nameWithType: ExcelAddressBase.ExternalReferenceIndex
  fullName: OfficeOpenXml.ExcelAddressBase.ExternalReferenceIndex
- uid: OfficeOpenXml.ExcelAddressBase.Table
  commentId: P:OfficeOpenXml.ExcelAddressBase.Table
  parent: OfficeOpenXml.ExcelAddressBase
  name: Table
  nameWithType: ExcelAddressBase.Table
  fullName: OfficeOpenXml.ExcelAddressBase.Table
- uid: OfficeOpenXml.ExcelAddressBase.IsName
  commentId: P:OfficeOpenXml.ExcelAddressBase.IsName
  parent: OfficeOpenXml.ExcelAddressBase
  name: IsName
  nameWithType: ExcelAddressBase.IsName
  fullName: OfficeOpenXml.ExcelAddressBase.IsName
- uid: OfficeOpenXml.ExcelAddressBase.ToString
  commentId: M:OfficeOpenXml.ExcelAddressBase.ToString
  parent: OfficeOpenXml.ExcelAddressBase
  name: ToString()
  nameWithType: ExcelAddressBase.ToString()
  fullName: OfficeOpenXml.ExcelAddressBase.ToString()
  spec.csharp:
  - uid: OfficeOpenXml.ExcelAddressBase.ToString
    name: ToString
    nameWithType: ExcelAddressBase.ToString
    fullName: OfficeOpenXml.ExcelAddressBase.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelAddressBase.ToString
    name: ToString
    nameWithType: ExcelAddressBase.ToString
    fullName: OfficeOpenXml.ExcelAddressBase.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelAddressBase.GetHashCode
  commentId: M:OfficeOpenXml.ExcelAddressBase.GetHashCode
  parent: OfficeOpenXml.ExcelAddressBase
  name: GetHashCode()
  nameWithType: ExcelAddressBase.GetHashCode()
  fullName: OfficeOpenXml.ExcelAddressBase.GetHashCode()
  spec.csharp:
  - uid: OfficeOpenXml.ExcelAddressBase.GetHashCode
    name: GetHashCode
    nameWithType: ExcelAddressBase.GetHashCode
    fullName: OfficeOpenXml.ExcelAddressBase.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelAddressBase.GetHashCode
    name: GetHashCode
    nameWithType: ExcelAddressBase.GetHashCode
    fullName: OfficeOpenXml.ExcelAddressBase.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelAddressBase.Validate
  commentId: M:OfficeOpenXml.ExcelAddressBase.Validate
  parent: OfficeOpenXml.ExcelAddressBase
  name: Validate()
  nameWithType: ExcelAddressBase.Validate()
  fullName: OfficeOpenXml.ExcelAddressBase.Validate()
  spec.csharp:
  - uid: OfficeOpenXml.ExcelAddressBase.Validate
    name: Validate
    nameWithType: ExcelAddressBase.Validate
    fullName: OfficeOpenXml.ExcelAddressBase.Validate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelAddressBase.Validate
    name: Validate
    nameWithType: ExcelAddressBase.Validate
    fullName: OfficeOpenXml.ExcelAddressBase.Validate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelAddressBase.Rows
  commentId: P:OfficeOpenXml.ExcelAddressBase.Rows
  parent: OfficeOpenXml.ExcelAddressBase
  name: Rows
  nameWithType: ExcelAddressBase.Rows
  fullName: OfficeOpenXml.ExcelAddressBase.Rows
- uid: OfficeOpenXml.ExcelAddressBase.Columns
  commentId: P:OfficeOpenXml.ExcelAddressBase.Columns
  parent: OfficeOpenXml.ExcelAddressBase
  name: Columns
  nameWithType: ExcelAddressBase.Columns
  fullName: OfficeOpenXml.ExcelAddressBase.Columns
- uid: OfficeOpenXml.ExcelAddressBase.IsFullRow
  commentId: P:OfficeOpenXml.ExcelAddressBase.IsFullRow
  parent: OfficeOpenXml.ExcelAddressBase
  name: IsFullRow
  nameWithType: ExcelAddressBase.IsFullRow
  fullName: OfficeOpenXml.ExcelAddressBase.IsFullRow
- uid: OfficeOpenXml.ExcelAddressBase.IsFullColumn
  commentId: P:OfficeOpenXml.ExcelAddressBase.IsFullColumn
  parent: OfficeOpenXml.ExcelAddressBase
  name: IsFullColumn
  nameWithType: ExcelAddressBase.IsFullColumn
  fullName: OfficeOpenXml.ExcelAddressBase.IsFullColumn
- uid: OfficeOpenXml.ExcelAddressBase.LocalAddress
  commentId: P:OfficeOpenXml.ExcelAddressBase.LocalAddress
  parent: OfficeOpenXml.ExcelAddressBase
  name: LocalAddress
  nameWithType: ExcelAddressBase.LocalAddress
  fullName: OfficeOpenXml.ExcelAddressBase.LocalAddress
- uid: OfficeOpenXml.ExcelAddressBase.Equals(System.Object)
  commentId: M:OfficeOpenXml.ExcelAddressBase.Equals(System.Object)
  parent: OfficeOpenXml.ExcelAddressBase
  isExternal: true
  name: Equals(Object)
  nameWithType: ExcelAddressBase.Equals(Object)
  fullName: OfficeOpenXml.ExcelAddressBase.Equals(System.Object)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelAddressBase.Equals(System.Object)
    name: Equals
    nameWithType: ExcelAddressBase.Equals
    fullName: OfficeOpenXml.ExcelAddressBase.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelAddressBase.Equals(System.Object)
    name: Equals
    nameWithType: ExcelAddressBase.Equals
    fullName: OfficeOpenXml.ExcelAddressBase.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelAddressBase.IsExternal
  commentId: P:OfficeOpenXml.ExcelAddressBase.IsExternal
  parent: OfficeOpenXml.ExcelAddressBase
  name: IsExternal
  nameWithType: ExcelAddressBase.IsExternal
  fullName: OfficeOpenXml.ExcelAddressBase.IsExternal
- uid: OfficeOpenXml.ExcelCellBase.TranslateFromR1C1(System.String,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.ExcelCellBase.TranslateFromR1C1(System.String,System.Int32,System.Int32)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: TranslateFromR1C1(String, Int32, Int32)
  nameWithType: ExcelCellBase.TranslateFromR1C1(String, Int32, Int32)
  fullName: OfficeOpenXml.ExcelCellBase.TranslateFromR1C1(System.String, System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.TranslateFromR1C1(System.String,System.Int32,System.Int32)
    name: TranslateFromR1C1
    nameWithType: ExcelCellBase.TranslateFromR1C1
    fullName: OfficeOpenXml.ExcelCellBase.TranslateFromR1C1
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.TranslateFromR1C1(System.String,System.Int32,System.Int32)
    name: TranslateFromR1C1
    nameWithType: ExcelCellBase.TranslateFromR1C1
    fullName: OfficeOpenXml.ExcelCellBase.TranslateFromR1C1
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.TranslateToR1C1(System.String,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.ExcelCellBase.TranslateToR1C1(System.String,System.Int32,System.Int32)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: TranslateToR1C1(String, Int32, Int32)
  nameWithType: ExcelCellBase.TranslateToR1C1(String, Int32, Int32)
  fullName: OfficeOpenXml.ExcelCellBase.TranslateToR1C1(System.String, System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.TranslateToR1C1(System.String,System.Int32,System.Int32)
    name: TranslateToR1C1
    nameWithType: ExcelCellBase.TranslateToR1C1
    fullName: OfficeOpenXml.ExcelCellBase.TranslateToR1C1
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.TranslateToR1C1(System.String,System.Int32,System.Int32)
    name: TranslateToR1C1
    nameWithType: ExcelCellBase.TranslateToR1C1
    fullName: OfficeOpenXml.ExcelCellBase.TranslateToR1C1
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32)
  commentId: M:OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: GetColumnLetter(Int32)
  nameWithType: ExcelCellBase.GetColumnLetter(Int32)
  fullName: OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32)
    name: GetColumnLetter
    nameWithType: ExcelCellBase.GetColumnLetter
    fullName: OfficeOpenXml.ExcelCellBase.GetColumnLetter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32)
    name: GetColumnLetter
    nameWithType: ExcelCellBase.GetColumnLetter
    fullName: OfficeOpenXml.ExcelCellBase.GetColumnLetter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32,System.Boolean)
  commentId: M:OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32,System.Boolean)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: GetColumnLetter(Int32, Boolean)
  nameWithType: ExcelCellBase.GetColumnLetter(Int32, Boolean)
  fullName: OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32, System.Boolean)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32,System.Boolean)
    name: GetColumnLetter
    nameWithType: ExcelCellBase.GetColumnLetter
    fullName: OfficeOpenXml.ExcelCellBase.GetColumnLetter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32,System.Boolean)
    name: GetColumnLetter
    nameWithType: ExcelCellBase.GetColumnLetter
    fullName: OfficeOpenXml.ExcelCellBase.GetColumnLetter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.GetAddressRow(System.Int32,System.Boolean)
  commentId: M:OfficeOpenXml.ExcelCellBase.GetAddressRow(System.Int32,System.Boolean)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: GetAddressRow(Int32, Boolean)
  nameWithType: ExcelCellBase.GetAddressRow(Int32, Boolean)
  fullName: OfficeOpenXml.ExcelCellBase.GetAddressRow(System.Int32, System.Boolean)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddressRow(System.Int32,System.Boolean)
    name: GetAddressRow
    nameWithType: ExcelCellBase.GetAddressRow
    fullName: OfficeOpenXml.ExcelCellBase.GetAddressRow
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddressRow(System.Int32,System.Boolean)
    name: GetAddressRow
    nameWithType: ExcelCellBase.GetAddressRow
    fullName: OfficeOpenXml.ExcelCellBase.GetAddressRow
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.GetAddressCol(System.Int32,System.Boolean)
  commentId: M:OfficeOpenXml.ExcelCellBase.GetAddressCol(System.Int32,System.Boolean)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: GetAddressCol(Int32, Boolean)
  nameWithType: ExcelCellBase.GetAddressCol(Int32, Boolean)
  fullName: OfficeOpenXml.ExcelCellBase.GetAddressCol(System.Int32, System.Boolean)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddressCol(System.Int32,System.Boolean)
    name: GetAddressCol
    nameWithType: ExcelCellBase.GetAddressCol
    fullName: OfficeOpenXml.ExcelCellBase.GetAddressCol
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddressCol(System.Int32,System.Boolean)
    name: GetAddressCol
    nameWithType: ExcelCellBase.GetAddressCol
    fullName: OfficeOpenXml.ExcelCellBase.GetAddressCol
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: GetAddress(Int32, Int32)
  nameWithType: ExcelCellBase.GetAddress(Int32, Int32)
  fullName: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32)
    name: GetAddress
    nameWithType: ExcelCellBase.GetAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32)
    name: GetAddress
    nameWithType: ExcelCellBase.GetAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Boolean,System.Int32,System.Boolean)
  commentId: M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Boolean,System.Int32,System.Boolean)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: GetAddress(Int32, Boolean, Int32, Boolean)
  nameWithType: ExcelCellBase.GetAddress(Int32, Boolean, Int32, Boolean)
  fullName: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32, System.Boolean, System.Int32, System.Boolean)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Boolean,System.Int32,System.Boolean)
    name: GetAddress
    nameWithType: ExcelCellBase.GetAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Boolean,System.Int32,System.Boolean)
    name: GetAddress
    nameWithType: ExcelCellBase.GetAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Boolean)
  commentId: M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Boolean)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: GetAddress(Int32, Int32, Boolean)
  nameWithType: ExcelCellBase.GetAddress(Int32, Int32, Boolean)
  fullName: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32, System.Int32, System.Boolean)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Boolean)
    name: GetAddress
    nameWithType: ExcelCellBase.GetAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Boolean)
    name: GetAddress
    nameWithType: ExcelCellBase.GetAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: GetAddress(Int32, Int32, Int32, Int32)
  nameWithType: ExcelCellBase.GetAddress(Int32, Int32, Int32, Int32)
  fullName: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32, System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32)
    name: GetAddress
    nameWithType: ExcelCellBase.GetAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32)
    name: GetAddress
    nameWithType: ExcelCellBase.GetAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)
  commentId: M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: GetAddress(Int32, Int32, Int32, Int32, Boolean)
  nameWithType: ExcelCellBase.GetAddress(Int32, Int32, Int32, Int32, Boolean)
  fullName: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)
    name: GetAddress
    nameWithType: ExcelCellBase.GetAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)
    name: GetAddress
    nameWithType: ExcelCellBase.GetAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: GetAddress(Int32, Int32, Int32, Int32, Boolean, Boolean, Boolean, Boolean)
  nameWithType: ExcelCellBase.GetAddress(Int32, Int32, Int32, Int32, Boolean, Boolean, Boolean, Boolean)
  fullName: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean, System.Boolean, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
    name: GetAddress
    nameWithType: ExcelCellBase.GetAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
    name: GetAddress
    nameWithType: ExcelCellBase.GetAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String)
  commentId: M:OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: GetFullAddress(String, String)
  nameWithType: ExcelCellBase.GetFullAddress(String, String)
  fullName: OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String, System.String)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String)
    name: GetFullAddress
    nameWithType: ExcelCellBase.GetFullAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetFullAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String)
    name: GetFullAddress
    nameWithType: ExcelCellBase.GetFullAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetFullAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String,System.String)
  commentId: M:OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String,System.String)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: GetFullAddress(String, String, String)
  nameWithType: ExcelCellBase.GetFullAddress(String, String, String)
  fullName: OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String, System.String, System.String)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String,System.String)
    name: GetFullAddress
    nameWithType: ExcelCellBase.GetFullAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetFullAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String,System.String)
    name: GetFullAddress
    nameWithType: ExcelCellBase.GetFullAddress
    fullName: OfficeOpenXml.ExcelCellBase.GetFullAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.IsSimpleAddress(System.String)
  commentId: M:OfficeOpenXml.ExcelCellBase.IsSimpleAddress(System.String)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: IsSimpleAddress(String)
  nameWithType: ExcelCellBase.IsSimpleAddress(String)
  fullName: OfficeOpenXml.ExcelCellBase.IsSimpleAddress(System.String)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.IsSimpleAddress(System.String)
    name: IsSimpleAddress
    nameWithType: ExcelCellBase.IsSimpleAddress
    fullName: OfficeOpenXml.ExcelCellBase.IsSimpleAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.IsSimpleAddress(System.String)
    name: IsSimpleAddress
    nameWithType: ExcelCellBase.IsSimpleAddress
    fullName: OfficeOpenXml.ExcelCellBase.IsSimpleAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.IsValidAddress(System.String)
  commentId: M:OfficeOpenXml.ExcelCellBase.IsValidAddress(System.String)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: IsValidAddress(String)
  nameWithType: ExcelCellBase.IsValidAddress(String)
  fullName: OfficeOpenXml.ExcelCellBase.IsValidAddress(System.String)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.IsValidAddress(System.String)
    name: IsValidAddress
    nameWithType: ExcelCellBase.IsValidAddress
    fullName: OfficeOpenXml.ExcelCellBase.IsValidAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.IsValidAddress(System.String)
    name: IsValidAddress
    nameWithType: ExcelCellBase.IsValidAddress
    fullName: OfficeOpenXml.ExcelCellBase.IsValidAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelCellBase.IsValidCellAddress(System.String)
  commentId: M:OfficeOpenXml.ExcelCellBase.IsValidCellAddress(System.String)
  parent: OfficeOpenXml.ExcelCellBase
  isExternal: true
  name: IsValidCellAddress(String)
  nameWithType: ExcelCellBase.IsValidCellAddress(String)
  fullName: OfficeOpenXml.ExcelCellBase.IsValidCellAddress(System.String)
  spec.csharp:
  - uid: OfficeOpenXml.ExcelCellBase.IsValidCellAddress(System.String)
    name: IsValidCellAddress
    nameWithType: ExcelCellBase.IsValidCellAddress
    fullName: OfficeOpenXml.ExcelCellBase.IsValidCellAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelCellBase.IsValidCellAddress(System.String)
    name: IsValidCellAddress
    nameWithType: ExcelCellBase.IsValidCellAddress
    fullName: OfficeOpenXml.ExcelCellBase.IsValidCellAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.OfficeOpenXml.CalculationExtension.Calculate
  commentId: M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase)
  parent: OfficeOpenXml.CalculationExtension
  definition: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase)
  name: Calculate()
  nameWithType: CalculationExtension.Calculate()
  fullName: OfficeOpenXml.CalculationExtension.Calculate()
  spec.csharp:
  - uid: OfficeOpenXml.CalculationExtension.Calculate
    name: Calculate
    nameWithType: CalculationExtension.Calculate
    fullName: OfficeOpenXml.CalculationExtension.Calculate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.CalculationExtension.Calculate
    name: Calculate
    nameWithType: CalculationExtension.Calculate
    fullName: OfficeOpenXml.CalculationExtension.Calculate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.OfficeOpenXml.CalculationExtension.Calculate(System.Action{OfficeOpenXml.FormulaParsing.ExcelCalculationOption})
  commentId: M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,System.Action{OfficeOpenXml.FormulaParsing.ExcelCalculationOption})
  parent: OfficeOpenXml.CalculationExtension
  definition: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,System.Action{OfficeOpenXml.FormulaParsing.ExcelCalculationOption})
  name: Calculate(Action<ExcelCalculationOption>)
  nameWithType: CalculationExtension.Calculate(Action<ExcelCalculationOption>)
  fullName: OfficeOpenXml.CalculationExtension.Calculate(System.Action<OfficeOpenXml.FormulaParsing.ExcelCalculationOption>)
  nameWithType.vb: CalculationExtension.Calculate(Action(Of ExcelCalculationOption))
  fullName.vb: OfficeOpenXml.CalculationExtension.Calculate(System.Action(Of OfficeOpenXml.FormulaParsing.ExcelCalculationOption))
  name.vb: Calculate(Action(Of ExcelCalculationOption))
  spec.csharp:
  - uid: OfficeOpenXml.CalculationExtension.Calculate(System.Action{OfficeOpenXml.FormulaParsing.ExcelCalculationOption})
    name: Calculate
    nameWithType: CalculationExtension.Calculate
    fullName: OfficeOpenXml.CalculationExtension.Calculate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
    name: ExcelCalculationOption
    nameWithType: ExcelCalculationOption
    fullName: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.CalculationExtension.Calculate(System.Action{OfficeOpenXml.FormulaParsing.ExcelCalculationOption})
    name: Calculate
    nameWithType: CalculationExtension.Calculate
    fullName: OfficeOpenXml.CalculationExtension.Calculate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
    name: ExcelCalculationOption
    nameWithType: ExcelCalculationOption
    fullName: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.FormulaParsing.ExcelCalculationOption)
  commentId: M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)
  parent: OfficeOpenXml.CalculationExtension
  definition: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)
  name: Calculate(ExcelCalculationOption)
  nameWithType: CalculationExtension.Calculate(ExcelCalculationOption)
  fullName: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.FormulaParsing.ExcelCalculationOption)
  spec.csharp:
  - uid: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.FormulaParsing.ExcelCalculationOption)
    name: Calculate
    nameWithType: CalculationExtension.Calculate
    fullName: OfficeOpenXml.CalculationExtension.Calculate
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
    name: ExcelCalculationOption
    nameWithType: ExcelCalculationOption
    fullName: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.FormulaParsing.ExcelCalculationOption)
    name: Calculate
    nameWithType: CalculationExtension.Calculate
    fullName: OfficeOpenXml.CalculationExtension.Calculate
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
    name: ExcelCalculationOption
    nameWithType: ExcelCalculationOption
    fullName: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase)
  commentId: M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase)
  name: Calculate(ExcelRangeBase)
  nameWithType: CalculationExtension.Calculate(ExcelRangeBase)
  fullName: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase)
  spec.csharp:
  - uid: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase)
    name: Calculate
    nameWithType: CalculationExtension.Calculate
    fullName: OfficeOpenXml.CalculationExtension.Calculate
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.ExcelRangeBase
    name: ExcelRangeBase
    nameWithType: ExcelRangeBase
    fullName: OfficeOpenXml.ExcelRangeBase
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase)
    name: Calculate
    nameWithType: CalculationExtension.Calculate
    fullName: OfficeOpenXml.CalculationExtension.Calculate
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.ExcelRangeBase
    name: ExcelRangeBase
    nameWithType: ExcelRangeBase
    fullName: OfficeOpenXml.ExcelRangeBase
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.CalculationExtension
  commentId: T:OfficeOpenXml.CalculationExtension
  parent: OfficeOpenXml
  name: CalculationExtension
  nameWithType: CalculationExtension
  fullName: OfficeOpenXml.CalculationExtension
- uid: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,System.Action{OfficeOpenXml.FormulaParsing.ExcelCalculationOption})
  commentId: M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,System.Action{OfficeOpenXml.FormulaParsing.ExcelCalculationOption})
  isExternal: true
  name: Calculate(ExcelRangeBase, Action<ExcelCalculationOption>)
  nameWithType: CalculationExtension.Calculate(ExcelRangeBase, Action<ExcelCalculationOption>)
  fullName: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase, System.Action<OfficeOpenXml.FormulaParsing.ExcelCalculationOption>)
  nameWithType.vb: CalculationExtension.Calculate(ExcelRangeBase, Action(Of ExcelCalculationOption))
  fullName.vb: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase, System.Action(Of OfficeOpenXml.FormulaParsing.ExcelCalculationOption))
  name.vb: Calculate(ExcelRangeBase, Action(Of ExcelCalculationOption))
  spec.csharp:
  - uid: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,System.Action{OfficeOpenXml.FormulaParsing.ExcelCalculationOption})
    name: Calculate
    nameWithType: CalculationExtension.Calculate
    fullName: OfficeOpenXml.CalculationExtension.Calculate
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.ExcelRangeBase
    name: ExcelRangeBase
    nameWithType: ExcelRangeBase
    fullName: OfficeOpenXml.ExcelRangeBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
    name: ExcelCalculationOption
    nameWithType: ExcelCalculationOption
    fullName: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,System.Action{OfficeOpenXml.FormulaParsing.ExcelCalculationOption})
    name: Calculate
    nameWithType: CalculationExtension.Calculate
    fullName: OfficeOpenXml.CalculationExtension.Calculate
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.ExcelRangeBase
    name: ExcelRangeBase
    nameWithType: ExcelRangeBase
    fullName: OfficeOpenXml.ExcelRangeBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
    name: ExcelCalculationOption
    nameWithType: ExcelCalculationOption
    fullName: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)
  commentId: M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)
  name: Calculate(ExcelRangeBase, ExcelCalculationOption)
  nameWithType: CalculationExtension.Calculate(ExcelRangeBase, ExcelCalculationOption)
  fullName: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase, OfficeOpenXml.FormulaParsing.ExcelCalculationOption)
  spec.csharp:
  - uid: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)
    name: Calculate
    nameWithType: CalculationExtension.Calculate
    fullName: OfficeOpenXml.CalculationExtension.Calculate
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.ExcelRangeBase
    name: ExcelRangeBase
    nameWithType: ExcelRangeBase
    fullName: OfficeOpenXml.ExcelRangeBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
    name: ExcelCalculationOption
    nameWithType: ExcelCalculationOption
    fullName: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)
    name: Calculate
    nameWithType: CalculationExtension.Calculate
    fullName: OfficeOpenXml.CalculationExtension.Calculate
  - name: (
    nameWithType: (
    fullName: (
  - uid: OfficeOpenXml.ExcelRangeBase
    name: ExcelRangeBase
    nameWithType: ExcelRangeBase
    fullName: OfficeOpenXml.ExcelRangeBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
    name: ExcelCalculationOption
    nameWithType: ExcelCalculationOption
    fullName: OfficeOpenXml.FormulaParsing.ExcelCalculationOption
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelWorksheet
  commentId: T:OfficeOpenXml.ExcelWorksheet
  parent: OfficeOpenXml
  name: ExcelWorksheet
  nameWithType: ExcelWorksheet
  fullName: OfficeOpenXml.ExcelWorksheet
- uid: OfficeOpenXml.ExcelAddressBase.ChangeAddress
  commentId: M:OfficeOpenXml.ExcelAddressBase.ChangeAddress
  parent: OfficeOpenXml.ExcelAddressBase
  name: ChangeAddress()
  nameWithType: ExcelAddressBase.ChangeAddress()
  fullName: OfficeOpenXml.ExcelAddressBase.ChangeAddress()
  spec.csharp:
  - uid: OfficeOpenXml.ExcelAddressBase.ChangeAddress
    name: ChangeAddress
    nameWithType: ExcelAddressBase.ChangeAddress
    fullName: OfficeOpenXml.ExcelAddressBase.ChangeAddress
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.ExcelAddressBase.ChangeAddress
    name: ChangeAddress
    nameWithType: ExcelAddressBase.ChangeAddress
    fullName: OfficeOpenXml.ExcelAddressBase.ChangeAddress
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.ChangeAddress*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.ChangeAddress
  name: ChangeAddress
  nameWithType: ExcelRangeBase.ChangeAddress
  fullName: OfficeOpenXml.ExcelRangeBase.ChangeAddress
- uid: OfficeOpenXml.ExcelRangeBase.Style*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Style
  name: Style
  nameWithType: ExcelRangeBase.Style
  fullName: OfficeOpenXml.ExcelRangeBase.Style
- uid: OfficeOpenXml.Style.ExcelStyle
  commentId: T:OfficeOpenXml.Style.ExcelStyle
  parent: OfficeOpenXml.Style
  name: ExcelStyle
  nameWithType: ExcelStyle
  fullName: OfficeOpenXml.Style.ExcelStyle
- uid: OfficeOpenXml.Style
  commentId: N:OfficeOpenXml.Style
  name: OfficeOpenXml.Style
  nameWithType: OfficeOpenXml.Style
  fullName: OfficeOpenXml.Style
- uid: OfficeOpenXml.ExcelRangeBase.StyleName*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.StyleName
  name: StyleName
  nameWithType: ExcelRangeBase.StyleName
  fullName: OfficeOpenXml.ExcelRangeBase.StyleName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.ExcelRangeBase.StyleID*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.StyleID
  name: StyleID
  nameWithType: ExcelRangeBase.StyleID
  fullName: OfficeOpenXml.ExcelRangeBase.StyleID
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.ExcelRangeBase.Value*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Value
  name: Value
  nameWithType: ExcelRangeBase.Value
  fullName: OfficeOpenXml.ExcelRangeBase.Value
- uid: OfficeOpenXml.ExcelRangeBase.SetErrorValue*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.SetErrorValue
  name: SetErrorValue
  nameWithType: ExcelRangeBase.SetErrorValue
  fullName: OfficeOpenXml.ExcelRangeBase.SetErrorValue
- uid: OfficeOpenXml.eErrorType
  commentId: T:OfficeOpenXml.eErrorType
  parent: OfficeOpenXml
  name: eErrorType
  nameWithType: eErrorType
  fullName: OfficeOpenXml.eErrorType
- uid: OfficeOpenXml.ExcelRangeBase.Text*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Text
  name: Text
  nameWithType: ExcelRangeBase.Text
  fullName: OfficeOpenXml.ExcelRangeBase.Text
- uid: OfficeOpenXml.ExcelRangeBase.AutoFitColumns*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.AutoFitColumns
  name: AutoFitColumns
  nameWithType: ExcelRangeBase.AutoFitColumns
  fullName: OfficeOpenXml.ExcelRangeBase.AutoFitColumns
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: OfficeOpenXml.ExcelRangeBase.Formula*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Formula
  name: Formula
  nameWithType: ExcelRangeBase.Formula
  fullName: OfficeOpenXml.ExcelRangeBase.Formula
- uid: OfficeOpenXml.ExcelRangeBase.FormulaR1C1*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.FormulaR1C1
  name: FormulaR1C1
  nameWithType: ExcelRangeBase.FormulaR1C1
  fullName: OfficeOpenXml.ExcelRangeBase.FormulaR1C1
- uid: OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter
  commentId: T:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter
  parent: OfficeOpenXml.Export.HtmlExport.Interfaces
  name: IExcelHtmlRangeExporter
  nameWithType: IExcelHtmlRangeExporter
  fullName: OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter
- uid: OfficeOpenXml.ExcelRangeBase.CreateHtmlExporter*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.CreateHtmlExporter
  name: CreateHtmlExporter
  nameWithType: ExcelRangeBase.CreateHtmlExporter
  fullName: OfficeOpenXml.ExcelRangeBase.CreateHtmlExporter
- uid: OfficeOpenXml.Export.HtmlExport.Interfaces
  commentId: N:OfficeOpenXml.Export.HtmlExport.Interfaces
  name: OfficeOpenXml.Export.HtmlExport.Interfaces
  nameWithType: OfficeOpenXml.Export.HtmlExport.Interfaces
  fullName: OfficeOpenXml.Export.HtmlExport.Interfaces
- uid: OfficeOpenXml.ExcelRangeBase.Hyperlink*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Hyperlink
  name: Hyperlink
  nameWithType: ExcelRangeBase.Hyperlink
  fullName: OfficeOpenXml.ExcelRangeBase.Hyperlink
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: OfficeOpenXml.ExcelRangeBase.SetHyperlink*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.SetHyperlink
  name: SetHyperlink
  nameWithType: ExcelRangeBase.SetHyperlink
  fullName: OfficeOpenXml.ExcelRangeBase.SetHyperlink
- uid: OfficeOpenXml.ExcelHyperLink
  commentId: T:OfficeOpenXml.ExcelHyperLink
  parent: OfficeOpenXml
  name: ExcelHyperLink
  nameWithType: ExcelHyperLink
  fullName: OfficeOpenXml.ExcelHyperLink
- uid: OfficeOpenXml.ExcelRange
  commentId: T:OfficeOpenXml.ExcelRange
  parent: OfficeOpenXml
  name: ExcelRange
  nameWithType: ExcelRange
  fullName: OfficeOpenXml.ExcelRange
- uid: OfficeOpenXml.ExcelRangeBase.Merge*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Merge
  name: Merge
  nameWithType: ExcelRangeBase.Merge
  fullName: OfficeOpenXml.ExcelRangeBase.Merge
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.ExcelRangeBase.AutoFilter*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.AutoFilter
  name: AutoFilter
  nameWithType: ExcelRangeBase.AutoFilter
  fullName: OfficeOpenXml.ExcelRangeBase.AutoFilter
- uid: OfficeOpenXml.ExcelRangeBase.IsRichText*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.IsRichText
  name: IsRichText
  nameWithType: ExcelRangeBase.IsRichText
  fullName: OfficeOpenXml.ExcelRangeBase.IsRichText
- uid: OfficeOpenXml.ExcelRangeBase.IsTable
  commentId: P:OfficeOpenXml.ExcelRangeBase.IsTable
  parent: OfficeOpenXml.ExcelRangeBase
  name: IsTable
  nameWithType: ExcelRangeBase.IsTable
  fullName: OfficeOpenXml.ExcelRangeBase.IsTable
- uid: OfficeOpenXml.ExcelRangeBase.IsTable*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.IsTable
  name: IsTable
  nameWithType: ExcelRangeBase.IsTable
  fullName: OfficeOpenXml.ExcelRangeBase.IsTable
- uid: OfficeOpenXml.ExcelRangeBase
  commentId: T:OfficeOpenXml.ExcelRangeBase
  parent: OfficeOpenXml
  name: ExcelRangeBase
  nameWithType: ExcelRangeBase
  fullName: OfficeOpenXml.ExcelRangeBase
- uid: OfficeOpenXml.Table.ExcelTable
  commentId: T:OfficeOpenXml.Table.ExcelTable
  parent: OfficeOpenXml.Table
  name: ExcelTable
  nameWithType: ExcelTable
  fullName: OfficeOpenXml.Table.ExcelTable
- uid: OfficeOpenXml.ExcelRangeBase.GetTable*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.GetTable
  name: GetTable
  nameWithType: ExcelRangeBase.GetTable
  fullName: OfficeOpenXml.ExcelRangeBase.GetTable
- uid: OfficeOpenXml.Table
  commentId: N:OfficeOpenXml.Table
  name: OfficeOpenXml.Table
  nameWithType: OfficeOpenXml.Table
  fullName: OfficeOpenXml.Table
- uid: OfficeOpenXml.ExcelRangeBase.Insert*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Insert
  name: Insert
  nameWithType: ExcelRangeBase.Insert
  fullName: OfficeOpenXml.ExcelRangeBase.Insert
- uid: OfficeOpenXml.eShiftTypeInsert
  commentId: T:OfficeOpenXml.eShiftTypeInsert
  parent: OfficeOpenXml
  name: eShiftTypeInsert
  nameWithType: eShiftTypeInsert
  fullName: OfficeOpenXml.eShiftTypeInsert
- uid: OfficeOpenXml.ExcelRangeBase.Delete*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Delete
  name: Delete
  nameWithType: ExcelRangeBase.Delete
  fullName: OfficeOpenXml.ExcelRangeBase.Delete
- uid: OfficeOpenXml.eShiftTypeDelete
  commentId: T:OfficeOpenXml.eShiftTypeDelete
  parent: OfficeOpenXml
  name: eShiftTypeDelete
  nameWithType: eShiftTypeDelete
  fullName: OfficeOpenXml.eShiftTypeDelete
- uid: OfficeOpenXml.ExcelRangeBase.IsArrayFormula*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.IsArrayFormula
  name: IsArrayFormula
  nameWithType: ExcelRangeBase.IsArrayFormula
  fullName: OfficeOpenXml.ExcelRangeBase.IsArrayFormula
- uid: OfficeOpenXml.Style.ExcelRichTextCollection
  commentId: T:OfficeOpenXml.Style.ExcelRichTextCollection
  parent: OfficeOpenXml.Style
  name: ExcelRichTextCollection
  nameWithType: ExcelRichTextCollection
  fullName: OfficeOpenXml.Style.ExcelRichTextCollection
- uid: OfficeOpenXml.ExcelRangeBase.RichText*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.RichText
  name: RichText
  nameWithType: ExcelRangeBase.RichText
  fullName: OfficeOpenXml.ExcelRangeBase.RichText
- uid: OfficeOpenXml.ExcelRangeBase.Comment*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Comment
  name: Comment
  nameWithType: ExcelRangeBase.Comment
  fullName: OfficeOpenXml.ExcelRangeBase.Comment
- uid: OfficeOpenXml.ExcelComment
  commentId: T:OfficeOpenXml.ExcelComment
  parent: OfficeOpenXml
  name: ExcelComment
  nameWithType: ExcelComment
  fullName: OfficeOpenXml.ExcelComment
- uid: OfficeOpenXml.ExcelRangeBase.ThreadedComment*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.ThreadedComment
  name: ThreadedComment
  nameWithType: ExcelRangeBase.ThreadedComment
  fullName: OfficeOpenXml.ExcelRangeBase.ThreadedComment
- uid: OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread
  commentId: T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread
  parent: OfficeOpenXml.ThreadedComments
  name: ExcelThreadedCommentThread
  nameWithType: ExcelThreadedCommentThread
  fullName: OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread
- uid: OfficeOpenXml.ThreadedComments
  commentId: N:OfficeOpenXml.ThreadedComments
  name: OfficeOpenXml.ThreadedComments
  nameWithType: OfficeOpenXml.ThreadedComments
  fullName: OfficeOpenXml.ThreadedComments
- uid: OfficeOpenXml.ExcelRangeBase.Worksheet*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Worksheet
  name: Worksheet
  nameWithType: ExcelRangeBase.Worksheet
  fullName: OfficeOpenXml.ExcelRangeBase.Worksheet
- uid: OfficeOpenXml.ExcelRangeBase.FullAddress*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.FullAddress
  name: FullAddress
  nameWithType: ExcelRangeBase.FullAddress
  fullName: OfficeOpenXml.ExcelRangeBase.FullAddress
- uid: OfficeOpenXml.ExcelRangeBase.FullAddressAbsolute*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.FullAddressAbsolute
  name: FullAddressAbsolute
  nameWithType: ExcelRangeBase.FullAddressAbsolute
  fullName: OfficeOpenXml.ExcelRangeBase.FullAddressAbsolute
- uid: OfficeOpenXml.ExcelRangeBase.ClearFormulas*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.ClearFormulas
  name: ClearFormulas
  nameWithType: ExcelRangeBase.ClearFormulas
  fullName: OfficeOpenXml.ExcelRangeBase.ClearFormulas
- uid: OfficeOpenXml.ExcelRangeBase.ClearFormulaValues*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.ClearFormulaValues
  name: ClearFormulaValues
  nameWithType: ExcelRangeBase.ClearFormulaValues
  fullName: OfficeOpenXml.ExcelRangeBase.ClearFormulaValues
- uid: OfficeOpenXml.ExcelRangeBase.ConditionalFormatting*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.ConditionalFormatting
  name: ConditionalFormatting
  nameWithType: ExcelRangeBase.ConditionalFormatting
  fullName: OfficeOpenXml.ExcelRangeBase.ConditionalFormatting
- uid: OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting
  commentId: T:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting
  parent: OfficeOpenXml.ConditionalFormatting
  name: IRangeConditionalFormatting
  nameWithType: IRangeConditionalFormatting
  fullName: OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting
- uid: OfficeOpenXml.ConditionalFormatting
  commentId: N:OfficeOpenXml.ConditionalFormatting
  name: OfficeOpenXml.ConditionalFormatting
  nameWithType: OfficeOpenXml.ConditionalFormatting
  fullName: OfficeOpenXml.ConditionalFormatting
- uid: OfficeOpenXml.ExcelRangeBase.DataValidation*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.DataValidation
  name: DataValidation
  nameWithType: ExcelRangeBase.DataValidation
  fullName: OfficeOpenXml.ExcelRangeBase.DataValidation
- uid: OfficeOpenXml.DataValidation.IRangeDataValidation
  commentId: T:OfficeOpenXml.DataValidation.IRangeDataValidation
  parent: OfficeOpenXml.DataValidation
  name: IRangeDataValidation
  nameWithType: IRangeDataValidation
  fullName: OfficeOpenXml.DataValidation.IRangeDataValidation
- uid: OfficeOpenXml.DataValidation
  commentId: N:OfficeOpenXml.DataValidation
  name: OfficeOpenXml.DataValidation
  nameWithType: OfficeOpenXml.DataValidation
  fullName: OfficeOpenXml.DataValidation
- uid: OfficeOpenXml.ExcelRangeBase.Value
  commentId: P:OfficeOpenXml.ExcelRangeBase.Value
  parent: OfficeOpenXml.ExcelRangeBase
  name: Value
  nameWithType: ExcelRangeBase.Value
  fullName: OfficeOpenXml.ExcelRangeBase.Value
- uid: System.FormatException
  commentId: T:System.FormatException
  isExternal: true
- uid: System.DateTime.FromOADate(System.Double)
  commentId: M:System.DateTime.FromOADate(System.Double)
  isExternal: true
- uid: System.Convert.ChangeType(System.Object,System.Type)
  commentId: M:System.Convert.ChangeType(System.Object,System.Type)
  isExternal: true
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
  isExternal: true
- uid: OfficeOpenXml.ExcelRangeBase.GetValue*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.GetValue
  name: GetValue
  nameWithType: ExcelRangeBase.GetValue
  fullName: OfficeOpenXml.ExcelRangeBase.GetValue
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: OfficeOpenXml.ExcelRangeBase.Offset*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Offset
  name: Offset
  nameWithType: ExcelRangeBase.Offset
  fullName: OfficeOpenXml.ExcelRangeBase.Offset
- uid: OfficeOpenXml.ExcelRangeBase.AddComment*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.AddComment
  name: AddComment
  nameWithType: ExcelRangeBase.AddComment
  fullName: OfficeOpenXml.ExcelRangeBase.AddComment
- uid: OfficeOpenXml.ExcelRangeBase.AddThreadedComment*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.AddThreadedComment
  name: AddThreadedComment
  nameWithType: ExcelRangeBase.AddThreadedComment
  fullName: OfficeOpenXml.ExcelRangeBase.AddThreadedComment
- uid: OfficeOpenXml.ExcelRangeBase.Copy*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Copy
  name: Copy
  nameWithType: ExcelRangeBase.Copy
  fullName: OfficeOpenXml.ExcelRangeBase.Copy
- uid: System.Nullable{OfficeOpenXml.ExcelRangeCopyOptionFlags}
  commentId: T:System.Nullable{OfficeOpenXml.ExcelRangeCopyOptionFlags}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ExcelRangeCopyOptionFlags>
  nameWithType: Nullable<ExcelRangeCopyOptionFlags>
  fullName: System.Nullable<OfficeOpenXml.ExcelRangeCopyOptionFlags>
  nameWithType.vb: Nullable(Of ExcelRangeCopyOptionFlags)
  fullName.vb: System.Nullable(Of OfficeOpenXml.ExcelRangeCopyOptionFlags)
  name.vb: Nullable(Of ExcelRangeCopyOptionFlags)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.ExcelRangeCopyOptionFlags
    name: ExcelRangeCopyOptionFlags
    nameWithType: ExcelRangeCopyOptionFlags
    fullName: OfficeOpenXml.ExcelRangeCopyOptionFlags
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.ExcelRangeCopyOptionFlags
    name: ExcelRangeCopyOptionFlags
    nameWithType: ExcelRangeCopyOptionFlags
    fullName: OfficeOpenXml.ExcelRangeCopyOptionFlags
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeCopyOptionFlags[]
  isExternal: true
  name: ExcelRangeCopyOptionFlags[]
  nameWithType: ExcelRangeCopyOptionFlags[]
  fullName: OfficeOpenXml.ExcelRangeCopyOptionFlags[]
  nameWithType.vb: ExcelRangeCopyOptionFlags()
  fullName.vb: OfficeOpenXml.ExcelRangeCopyOptionFlags()
  name.vb: ExcelRangeCopyOptionFlags()
  spec.csharp:
  - uid: OfficeOpenXml.ExcelRangeCopyOptionFlags
    name: ExcelRangeCopyOptionFlags
    nameWithType: ExcelRangeCopyOptionFlags
    fullName: OfficeOpenXml.ExcelRangeCopyOptionFlags
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: OfficeOpenXml.ExcelRangeCopyOptionFlags
    name: ExcelRangeCopyOptionFlags
    nameWithType: ExcelRangeCopyOptionFlags
    fullName: OfficeOpenXml.ExcelRangeCopyOptionFlags
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: OfficeOpenXml.ExcelRangeBase.CopyStyles*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.CopyStyles
  name: CopyStyles
  nameWithType: ExcelRangeBase.CopyStyles
  fullName: OfficeOpenXml.ExcelRangeBase.CopyStyles
- uid: OfficeOpenXml.ExcelRangeBase.Clear*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Clear
  name: Clear
  nameWithType: ExcelRangeBase.Clear
  fullName: OfficeOpenXml.ExcelRangeBase.Clear
- uid: OfficeOpenXml.ExcelRangeBase.CreateArrayFormula*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.CreateArrayFormula
  name: CreateArrayFormula
  nameWithType: ExcelRangeBase.CreateArrayFormula
  fullName: OfficeOpenXml.ExcelRangeBase.CreateArrayFormula
- uid: OfficeOpenXml.ExcelRangeBase.Dispose*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Dispose
  name: Dispose
  nameWithType: ExcelRangeBase.Dispose
  fullName: OfficeOpenXml.ExcelRangeBase.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.GetEnumerator*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.GetEnumerator
  name: GetEnumerator
  nameWithType: ExcelRangeBase.GetEnumerator
  fullName: OfficeOpenXml.ExcelRangeBase.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeBase}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeBase}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeBase}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<ExcelRangeBase>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelRangeBase>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of ExcelRangeBase).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.ExcelRangeBase).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<ExcelRangeBase>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelRangeBase>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of ExcelRangeBase).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.ExcelRangeBase).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: ExcelRangeBase.IEnumerable.GetEnumerator
  fullName: OfficeOpenXml.ExcelRangeBase.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExcelRangeBase.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.Current*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Current
  name: Current
  nameWithType: ExcelRangeBase.Current
  fullName: OfficeOpenXml.ExcelRangeBase.Current
- uid: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeBase}.Current
  commentId: P:System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeBase}.Current
  parent: System.Collections.Generic.IEnumerator{OfficeOpenXml.ExcelRangeBase}
  definition: System.Collections.Generic.IEnumerator`1.Current
  name: Current
  nameWithType: IEnumerator<ExcelRangeBase>.Current
  fullName: System.Collections.Generic.IEnumerator<OfficeOpenXml.ExcelRangeBase>.Current
  nameWithType.vb: IEnumerator(Of ExcelRangeBase).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of OfficeOpenXml.ExcelRangeBase).Current
- uid: System.Collections.Generic.IEnumerator`1.Current
  commentId: P:System.Collections.Generic.IEnumerator`1.Current
  isExternal: true
  name: Current
  nameWithType: IEnumerator<T>.Current
  fullName: System.Collections.Generic.IEnumerator<T>.Current
  nameWithType.vb: IEnumerator(Of T).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of T).Current
- uid: OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerator#Current*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerator#Current
  name: IEnumerator.Current
  nameWithType: ExcelRangeBase.IEnumerator.Current
  fullName: OfficeOpenXml.ExcelRangeBase.System.Collections.IEnumerator.Current
  nameWithType.vb: ExcelRangeBase.System.Collections.IEnumerator.Current
  name.vb: System.Collections.IEnumerator.Current
- uid: System.Collections.IEnumerator.Current
  commentId: P:System.Collections.IEnumerator.Current
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Current
  nameWithType: IEnumerator.Current
  fullName: System.Collections.IEnumerator.Current
- uid: OfficeOpenXml.ExcelRangeBase.MoveNext*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.MoveNext
  name: MoveNext
  nameWithType: ExcelRangeBase.MoveNext
  fullName: OfficeOpenXml.ExcelRangeBase.MoveNext
- uid: System.Collections.IEnumerator.MoveNext
  commentId: M:System.Collections.IEnumerator.MoveNext
  parent: System.Collections.IEnumerator
  isExternal: true
  name: MoveNext()
  nameWithType: IEnumerator.MoveNext()
  fullName: System.Collections.IEnumerator.MoveNext()
  spec.csharp:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.Reset*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Reset
  name: Reset
  nameWithType: ExcelRangeBase.Reset
  fullName: OfficeOpenXml.ExcelRangeBase.Reset
- uid: System.Collections.IEnumerator.Reset
  commentId: M:System.Collections.IEnumerator.Reset
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Reset()
  nameWithType: IEnumerator.Reset()
  fullName: System.Collections.IEnumerator.Reset()
  spec.csharp:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.Sort*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.Sort
  name: Sort
  nameWithType: ExcelRangeBase.Sort
  fullName: OfficeOpenXml.ExcelRangeBase.Sort
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean[]
  isExternal: true
  name: Boolean[]
  nameWithType: Boolean[]
  fullName: System.Boolean[]
  nameWithType.vb: Boolean()
  fullName.vb: System.Boolean()
  name.vb: Boolean()
  spec.csharp:
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization.CompareOptions
  commentId: T:System.Globalization.CompareOptions
  parent: System.Globalization
  isExternal: true
  name: CompareOptions
  nameWithType: CompareOptions
  fullName: System.Globalization.CompareOptions
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: OfficeOpenXml.Sorting.RangeSortOptions
  commentId: T:OfficeOpenXml.Sorting.RangeSortOptions
  parent: OfficeOpenXml.Sorting
  name: RangeSortOptions
  nameWithType: RangeSortOptions
  fullName: OfficeOpenXml.Sorting.RangeSortOptions
- uid: System.Action{OfficeOpenXml.Sorting.RangeSortOptions}
  commentId: T:System.Action{OfficeOpenXml.Sorting.RangeSortOptions}
  parent: System
  definition: System.Action`1
  name: Action<RangeSortOptions>
  nameWithType: Action<RangeSortOptions>
  fullName: System.Action<OfficeOpenXml.Sorting.RangeSortOptions>
  nameWithType.vb: Action(Of RangeSortOptions)
  fullName.vb: System.Action(Of OfficeOpenXml.Sorting.RangeSortOptions)
  name.vb: Action(Of RangeSortOptions)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Sorting.RangeSortOptions
    name: RangeSortOptions
    nameWithType: RangeSortOptions
    fullName: OfficeOpenXml.Sorting.RangeSortOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Sorting.RangeSortOptions
    name: RangeSortOptions
    nameWithType: RangeSortOptions
    fullName: OfficeOpenXml.Sorting.RangeSortOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Sorting
  commentId: N:OfficeOpenXml.Sorting
  name: OfficeOpenXml.Sorting
  nameWithType: OfficeOpenXml.Sorting
  fullName: OfficeOpenXml.Sorting
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Sorting.RangeSortOptions.SortBy
  commentId: P:OfficeOpenXml.Sorting.RangeSortOptions.SortBy
  isExternal: true
- uid: OfficeOpenXml.Sorting.RangeSortOptions.SortLeftToRightBy
  commentId: P:OfficeOpenXml.Sorting.RangeSortOptions.SortLeftToRightBy
  isExternal: true
- uid: OfficeOpenXml.ExcelRangeBase.EntireColumn*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.EntireColumn
  name: EntireColumn
  nameWithType: ExcelRangeBase.EntireColumn
  fullName: OfficeOpenXml.ExcelRangeBase.EntireColumn
- uid: OfficeOpenXml.ExcelRangeColumn
  commentId: T:OfficeOpenXml.ExcelRangeColumn
  parent: OfficeOpenXml
  name: ExcelRangeColumn
  nameWithType: ExcelRangeColumn
  fullName: OfficeOpenXml.ExcelRangeColumn
- uid: OfficeOpenXml.ExcelRangeBase.EntireRow*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.EntireRow
  name: EntireRow
  nameWithType: ExcelRangeBase.EntireRow
  fullName: OfficeOpenXml.ExcelRangeBase.EntireRow
- uid: OfficeOpenXml.ExcelRangeRow
  commentId: T:OfficeOpenXml.ExcelRangeRow
  parent: OfficeOpenXml
  name: ExcelRangeRow
  nameWithType: ExcelRangeRow
  fullName: OfficeOpenXml.ExcelRangeRow
- uid: OfficeOpenXml.ExcelRangeBase.GetCellValue*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.GetCellValue
  name: GetCellValue
  nameWithType: ExcelRangeBase.GetCellValue
  fullName: OfficeOpenXml.ExcelRangeBase.GetCellValue
- uid: OfficeOpenXml.ExcelRangeBase.SetCellValue*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.SetCellValue
  name: SetCellValue
  nameWithType: ExcelRangeBase.SetCellValue
  fullName: OfficeOpenXml.ExcelRangeBase.SetCellValue
- uid: OfficeOpenXml.ExcelRangeBase.FillNumber*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.FillNumber
  name: FillNumber
  nameWithType: ExcelRangeBase.FillNumber
  fullName: OfficeOpenXml.ExcelRangeBase.FillNumber
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams}
  commentId: T:System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams}
  parent: System
  definition: System.Action`1
  name: Action<FillNumberParams>
  nameWithType: Action<FillNumberParams>
  fullName: System.Action<OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams>
  nameWithType.vb: Action(Of FillNumberParams)
  fullName.vb: System.Action(Of OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams)
  name.vb: Action(Of FillNumberParams)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams
    name: FillNumberParams
    nameWithType: FillNumberParams
    fullName: OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams
    name: FillNumberParams
    nameWithType: FillNumberParams
    fullName: OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.FillDateTime*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.FillDateTime
  name: FillDateTime
  nameWithType: ExcelRangeBase.FillDateTime
  fullName: OfficeOpenXml.ExcelRangeBase.FillDateTime
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.eDateTimeUnit
  commentId: T:OfficeOpenXml.eDateTimeUnit
  parent: OfficeOpenXml
  name: eDateTimeUnit
  nameWithType: eDateTimeUnit
  fullName: OfficeOpenXml.eDateTimeUnit
- uid: System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillDateParams}
  commentId: T:System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillDateParams}
  parent: System
  definition: System.Action`1
  name: Action<FillDateParams>
  nameWithType: Action<FillDateParams>
  fullName: System.Action<OfficeOpenXml.Core.Worksheet.Fill.FillDateParams>
  nameWithType.vb: Action(Of FillDateParams)
  fullName.vb: System.Action(Of OfficeOpenXml.Core.Worksheet.Fill.FillDateParams)
  name.vb: Action(Of FillDateParams)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Core.Worksheet.Fill.FillDateParams
    name: FillDateParams
    nameWithType: FillDateParams
    fullName: OfficeOpenXml.Core.Worksheet.Fill.FillDateParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Core.Worksheet.Fill.FillDateParams
    name: FillDateParams
    nameWithType: FillDateParams
    fullName: OfficeOpenXml.Core.Worksheet.Fill.FillDateParams
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.FillList*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.FillList
  name: FillList
  nameWithType: ExcelRangeBase.FillList
  fullName: OfficeOpenXml.ExcelRangeBase.FillList
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillListParams}
  commentId: T:System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillListParams}
  parent: System
  definition: System.Action`1
  name: Action<FillListParams>
  nameWithType: Action<FillListParams>
  fullName: System.Action<OfficeOpenXml.Core.Worksheet.Fill.FillListParams>
  nameWithType.vb: Action(Of FillListParams)
  fullName.vb: System.Action(Of OfficeOpenXml.Core.Worksheet.Fill.FillListParams)
  name.vb: Action(Of FillListParams)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Core.Worksheet.Fill.FillListParams
    name: FillListParams
    nameWithType: FillListParams
    fullName: OfficeOpenXml.Core.Worksheet.Fill.FillListParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Core.Worksheet.Fill.FillListParams
    name: FillListParams
    nameWithType: FillListParams
    fullName: OfficeOpenXml.Core.Worksheet.Fill.FillListParams
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDataReader*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.LoadFromDataReader
  name: LoadFromDataReader
  nameWithType: ExcelRangeBase.LoadFromDataReader
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDataReader
- uid: System.Data.IDataReader
  commentId: T:System.Data.IDataReader
  parent: System.Data
  isExternal: true
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: OfficeOpenXml.Table.TableStyles
  commentId: T:OfficeOpenXml.Table.TableStyles
  parent: OfficeOpenXml.Table
  name: TableStyles
  nameWithType: TableStyles
  fullName: OfficeOpenXml.Table.TableStyles
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync
  name: LoadFromDataReaderAsync
  nameWithType: ExcelRangeBase.LoadFromDataReaderAsync
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync
- uid: System.Data.Common.DbDataReader
  commentId: T:System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: true
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Nullable{System.Threading.CancellationToken}
  commentId: T:System.Nullable{System.Threading.CancellationToken}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CancellationToken>
  nameWithType: Nullable<CancellationToken>
  fullName: System.Nullable<System.Threading.CancellationToken>
  nameWithType.vb: Nullable(Of CancellationToken)
  fullName.vb: System.Nullable(Of System.Threading.CancellationToken)
  name.vb: Nullable(Of CancellationToken)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{OfficeOpenXml.ExcelRangeBase}
  commentId: T:System.Threading.Tasks.Task{OfficeOpenXml.ExcelRangeBase}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ExcelRangeBase>
  nameWithType: Task<ExcelRangeBase>
  fullName: System.Threading.Tasks.Task<OfficeOpenXml.ExcelRangeBase>
  nameWithType.vb: Task(Of ExcelRangeBase)
  fullName.vb: System.Threading.Tasks.Task(Of OfficeOpenXml.ExcelRangeBase)
  name.vb: Task(Of ExcelRangeBase)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.ExcelRangeBase
    name: ExcelRangeBase
    nameWithType: ExcelRangeBase
    fullName: OfficeOpenXml.ExcelRangeBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.ExcelRangeBase
    name: ExcelRangeBase
    nameWithType: ExcelRangeBase
    fullName: OfficeOpenXml.ExcelRangeBase
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: true
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable
  name: LoadFromDataTable
  nameWithType: ExcelRangeBase.LoadFromDataTable
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDataTable
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Nullable{OfficeOpenXml.Table.TableStyles}
  commentId: T:System.Nullable{OfficeOpenXml.Table.TableStyles}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TableStyles>
  nameWithType: Nullable<TableStyles>
  fullName: System.Nullable<OfficeOpenXml.Table.TableStyles>
  nameWithType.vb: Nullable(Of TableStyles)
  fullName.vb: System.Nullable(Of OfficeOpenXml.Table.TableStyles)
  name.vb: Nullable(Of TableStyles)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Table.TableStyles
    name: TableStyles
    nameWithType: TableStyles
    fullName: OfficeOpenXml.Table.TableStyles
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Table.TableStyles
    name: TableStyles
    nameWithType: TableStyles
    fullName: OfficeOpenXml.Table.TableStyles
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams}
  commentId: T:System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams}
  parent: System
  definition: System.Action`1
  name: Action<LoadFromDataTableParams>
  nameWithType: Action<LoadFromDataTableParams>
  fullName: System.Action<OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams>
  nameWithType.vb: Action(Of LoadFromDataTableParams)
  fullName.vb: System.Action(Of OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams)
  name.vb: Action(Of LoadFromDataTableParams)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams
    name: LoadFromDataTableParams
    nameWithType: LoadFromDataTableParams
    fullName: OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams
    name: LoadFromDataTableParams
    nameWithType: LoadFromDataTableParams
    fullName: OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromArrays*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.LoadFromArrays
  name: LoadFromArrays
  nameWithType: ExcelRangeBase.LoadFromArrays
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromArrays
- uid: System.Collections.Generic.IEnumerable{System.Object[]}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object[]>
  nameWithType: IEnumerable<Object[]>
  fullName: System.Collections.Generic.IEnumerable<System.Object[]>
  nameWithType.vb: IEnumerable(Of Object())
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Object())
  name.vb: IEnumerable(Of Object())
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromCollection*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.LoadFromCollection
  name: LoadFromCollection
  nameWithType: ExcelRangeBase.LoadFromCollection
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromCollection
- uid: System.ComponentModel.DisplayNameAttribute
  commentId: T:System.ComponentModel.DisplayNameAttribute
  isExternal: true
- uid: System.ComponentModel.DescriptionAttribute
  commentId: T:System.ComponentModel.DescriptionAttribute
  isExternal: true
- uid: System.Reflection.BindingFlags
  commentId: T:System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: true
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.MemberInfo[]
  isExternal: true
  name: MemberInfo[]
  nameWithType: MemberInfo[]
  fullName: System.Reflection.MemberInfo[]
  nameWithType.vb: MemberInfo()
  fullName.vb: System.Reflection.MemberInfo()
  name.vb: MemberInfo()
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams}
  commentId: T:System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams}
  parent: System
  definition: System.Action`1
  name: Action<LoadFromCollectionParams>
  nameWithType: Action<LoadFromCollectionParams>
  fullName: System.Action<OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams>
  nameWithType.vb: Action(Of LoadFromCollectionParams)
  fullName.vb: System.Action(Of OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams)
  name.vb: Action(Of LoadFromCollectionParams)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams
    name: LoadFromCollectionParams
    nameWithType: LoadFromCollectionParams
    fullName: OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams
    name: LoadFromCollectionParams
    nameWithType: LoadFromCollectionParams
    fullName: OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromText*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.LoadFromText
  name: LoadFromText
  nameWithType: ExcelRangeBase.LoadFromText
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromText
- uid: OfficeOpenXml.ExcelTextFormat
  commentId: T:OfficeOpenXml.ExcelTextFormat
  parent: OfficeOpenXml
  name: ExcelTextFormat
  nameWithType: ExcelTextFormat
  fullName: OfficeOpenXml.ExcelTextFormat
- uid: System.IO.FileInfo
  commentId: T:System.IO.FileInfo
  parent: System.IO
  isExternal: true
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync
  name: LoadFromTextAsync
  nameWithType: ExcelRangeBase.LoadFromTextAsync
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync
- uid: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries
  name: LoadFromDictionaries
  nameWithType: ExcelRangeBase.LoadFromDictionaries
  fullName: OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IDictionary<String, Object>>
  nameWithType: IEnumerable<IDictionary<String, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IDictionary<System.String, System.Object>>
  nameWithType.vb: IEnumerable(Of IDictionary(Of String, Object))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: IEnumerable(Of IDictionary(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams}
  commentId: T:System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams}
  parent: System
  definition: System.Action`1
  name: Action<LoadFromDictionariesParams>
  nameWithType: Action<LoadFromDictionariesParams>
  fullName: System.Action<OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams>
  nameWithType.vb: Action(Of LoadFromDictionariesParams)
  fullName.vb: System.Action(Of OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams)
  name.vb: Action(Of LoadFromDictionariesParams)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams
    name: LoadFromDictionariesParams
    nameWithType: LoadFromDictionariesParams
    fullName: OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams
    name: LoadFromDictionariesParams
    nameWithType: LoadFromDictionariesParams
    fullName: OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Default
  commentId: P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Default
  isExternal: true
- uid: OfficeOpenXml.ExcelRangeBase.ToDataTable*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.ToDataTable
  name: ToDataTable
  nameWithType: ExcelRangeBase.ToDataTable
  fullName: OfficeOpenXml.ExcelRangeBase.ToDataTable
- uid: System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions}
  commentId: T:System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions}
  parent: System
  definition: System.Action`1
  name: Action<ToDataTableOptions>
  nameWithType: Action<ToDataTableOptions>
  fullName: System.Action<OfficeOpenXml.Export.ToDataTable.ToDataTableOptions>
  nameWithType.vb: Action(Of ToDataTableOptions)
  fullName.vb: System.Action(Of OfficeOpenXml.Export.ToDataTable.ToDataTableOptions)
  name.vb: Action(Of ToDataTableOptions)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToDataTable.ToDataTableOptions
    name: ToDataTableOptions
    nameWithType: ToDataTableOptions
    fullName: OfficeOpenXml.Export.ToDataTable.ToDataTableOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToDataTable.ToDataTableOptions
    name: ToDataTableOptions
    nameWithType: ToDataTableOptions
    fullName: OfficeOpenXml.Export.ToDataTable.ToDataTableOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.Export.ToDataTable.ToDataTableOptions
  commentId: T:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions
  parent: OfficeOpenXml.Export.ToDataTable
  name: ToDataTableOptions
  nameWithType: ToDataTableOptions
  fullName: OfficeOpenXml.Export.ToDataTable.ToDataTableOptions
- uid: OfficeOpenXml.Export.ToDataTable
  commentId: N:OfficeOpenXml.Export.ToDataTable
  name: OfficeOpenXml.Export.ToDataTable
  nameWithType: OfficeOpenXml.Export.ToDataTable
  fullName: OfficeOpenXml.Export.ToDataTable
- uid: OfficeOpenXml.ExcelRangeBase.ToText*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.ToText
  name: ToText
  nameWithType: ExcelRangeBase.ToText
  fullName: OfficeOpenXml.ExcelRangeBase.ToText
- uid: OfficeOpenXml.ExcelOutputTextFormat
  commentId: T:OfficeOpenXml.ExcelOutputTextFormat
  parent: OfficeOpenXml
  name: ExcelOutputTextFormat
  nameWithType: ExcelOutputTextFormat
  fullName: OfficeOpenXml.ExcelOutputTextFormat
- uid: OfficeOpenXml.ExcelRangeBase.SaveToText*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.SaveToText
  name: SaveToText
  nameWithType: ExcelRangeBase.SaveToText
  fullName: OfficeOpenXml.ExcelRangeBase.SaveToText
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: OfficeOpenXml.ExcelRangeBase.ToTextAsync*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.ToTextAsync
  name: ToTextAsync
  nameWithType: ExcelRangeBase.ToTextAsync
  fullName: OfficeOpenXml.ExcelRangeBase.ToTextAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.SaveToTextAsync*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.SaveToTextAsync
  name: SaveToTextAsync
  nameWithType: ExcelRangeBase.SaveToTextAsync
  fullName: OfficeOpenXml.ExcelRangeBase.SaveToTextAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: OfficeOpenXml.ExcelRangeBase.ToJson*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.ToJson
  name: ToJson
  nameWithType: ExcelRangeBase.ToJson
  fullName: OfficeOpenXml.ExcelRangeBase.ToJson
- uid: System.Action{OfficeOpenXml.JsonRangeExportSettings}
  commentId: T:System.Action{OfficeOpenXml.JsonRangeExportSettings}
  parent: System
  definition: System.Action`1
  name: Action<JsonRangeExportSettings>
  nameWithType: Action<JsonRangeExportSettings>
  fullName: System.Action<OfficeOpenXml.JsonRangeExportSettings>
  nameWithType.vb: Action(Of JsonRangeExportSettings)
  fullName.vb: System.Action(Of OfficeOpenXml.JsonRangeExportSettings)
  name.vb: Action(Of JsonRangeExportSettings)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.JsonRangeExportSettings
    name: JsonRangeExportSettings
    nameWithType: JsonRangeExportSettings
    fullName: OfficeOpenXml.JsonRangeExportSettings
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.JsonRangeExportSettings
    name: JsonRangeExportSettings
    nameWithType: JsonRangeExportSettings
    fullName: OfficeOpenXml.JsonRangeExportSettings
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ExcelRangeBase.SaveToJson*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.SaveToJson
  name: SaveToJson
  nameWithType: ExcelRangeBase.SaveToJson
  fullName: OfficeOpenXml.ExcelRangeBase.SaveToJson
- uid: OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync
  name: SaveToJsonAsync
  nameWithType: ExcelRangeBase.SaveToJsonAsync
  fullName: OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync
- uid: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings
  name: ToCollectionWithMappings
  nameWithType: ExcelRangeBase.ToCollectionWithMappings
  fullName: OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings
- uid: System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,{T}}
  commentId: T:System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0}
  parent: System
  definition: System.Func`2
  name: Func<ToCollectionRow, T>
  nameWithType: Func<ToCollectionRow, T>
  fullName: System.Func<OfficeOpenXml.Export.ToCollection.ToCollectionRow, T>
  nameWithType.vb: Func(Of ToCollectionRow, T)
  fullName.vb: System.Func(Of OfficeOpenXml.Export.ToCollection.ToCollectionRow, T)
  name.vb: Func(Of ToCollectionRow, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.Export.ToCollection.ToCollectionRow
    name: ToCollectionRow
    nameWithType: ToCollectionRow
    fullName: OfficeOpenXml.Export.ToCollection.ToCollectionRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.Export.ToCollection.ToCollectionRow
    name: ToCollectionRow
    nameWithType: ToCollectionRow
    fullName: OfficeOpenXml.Export.ToCollection.ToCollectionRow
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{OfficeOpenXml.ToCollectionRangeOptions}
  commentId: T:System.Action{OfficeOpenXml.ToCollectionRangeOptions}
  parent: System
  definition: System.Action`1
  name: Action<ToCollectionRangeOptions>
  nameWithType: Action<ToCollectionRangeOptions>
  fullName: System.Action<OfficeOpenXml.ToCollectionRangeOptions>
  nameWithType.vb: Action(Of ToCollectionRangeOptions)
  fullName.vb: System.Action(Of OfficeOpenXml.ToCollectionRangeOptions)
  name.vb: Action(Of ToCollectionRangeOptions)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.ToCollectionRangeOptions
    name: ToCollectionRangeOptions
    nameWithType: ToCollectionRangeOptions
    fullName: OfficeOpenXml.ToCollectionRangeOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.ToCollectionRangeOptions
    name: ToCollectionRangeOptions
    nameWithType: ToCollectionRangeOptions
    fullName: OfficeOpenXml.ToCollectionRangeOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.ToCollectionRangeOptions
  commentId: T:OfficeOpenXml.ToCollectionRangeOptions
  parent: OfficeOpenXml
  name: ToCollectionRangeOptions
  nameWithType: ToCollectionRangeOptions
  fullName: OfficeOpenXml.ToCollectionRangeOptions
- uid: OfficeOpenXml.ExcelRangeBase.ToCollection*
  commentId: Overload:OfficeOpenXml.ExcelRangeBase.ToCollection
  name: ToCollection
  nameWithType: ExcelRangeBase.ToCollection
  fullName: OfficeOpenXml.ExcelRangeBase.ToCollection
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.Text.T
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.Text.T
  isExternal: true
